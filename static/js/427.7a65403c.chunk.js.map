{"version":3,"file":"static/js/427.7a65403c.chunk.js","mappings":"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","sources":["pages/Playground/Playground.tsx","pages/Playground/index.tsx","util/converters.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { convertMsToTimeFormat, roundEven5 } from \"util/converters\";\r\n\r\nconst RaceTimeCalculator: React.FC = () => {\r\n  const [playgroundInput, setPlaygroundInput] = useState<number>(0);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center align-center justify-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Playground\r\n      </p>\r\n      <div className=\"flex items-center gap-4 py-2\">\r\n        <label className=\"input input-bordered flex items-center gap-2\">\r\n          <input\r\n            className=\"font-medium text-lg max-w-40\"\r\n            type=\"text\"\r\n            inputMode=\"numeric\"\r\n            placeholder=\"roundEven5 Playground\"\r\n            onChange={(e: any) => {\r\n              setPlaygroundInput(Number(e.target.value));\r\n            }}\r\n          />\r\n        </label>\r\n        <p id=\"roundEven5-result\">\r\n          {roundEven5(playgroundInput * 0.85)} ({playgroundInput * 0.85})\r\n        </p>\r\n      </div>\r\n      <div className=\"divider\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaceTimeCalculator;\r\n","import Playground from \"./Playground\";\r\nexport default Playground;\r\n","import { Tower } from \"types/ct\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  ctTeamMedalImages,\r\n  raceMedalImages,\r\n} from \"./formatters\";\r\nimport { EventType } from \"types/events\";\r\nimport ctIds from \"configs/ctIds.config\";\r\n\r\nexport type TowerType = \"primary\" | \"military\" | \"magic\" | \"support\" | \"hero\";\r\n\r\nexport const roundEven5 = (num: number) => {\r\n  if (num % 5 === 2.5) {\r\n    return Math.floor(num / 5) * 5;\r\n  }\r\n  return Math.round(num / 5) * 5;\r\n};\r\n\r\nexport const convertMsToTimeFormat = (ms: number): string => {\r\n  // Calculate the hours, minutes, seconds, and milliseconds\r\n  const hours = Math.floor(ms / 3600000);\r\n  const minutes = Math.floor((ms % 3600000) / 60000);\r\n  const seconds = Math.floor((ms % 60000) / 1000);\r\n  const milliseconds = Math.floor((ms % 1000) / 10); // Extract two digits of milliseconds\r\n\r\n  // Format each part to ensure two digits\r\n  const formattedHours = hours > 0 ? hours.toString().padStart(2, \"0\") : \"\";\r\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\r\n  const formattedSeconds = seconds.toString().padStart(2, \"0\");\r\n  const formattedMilliseconds = milliseconds.toString().padStart(2, \"0\");\r\n\r\n  // Combine and return the formatted string\r\n  return formattedHours\r\n    ? `${formattedHours}:${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`\r\n    : `${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`;\r\n};\r\n\r\nexport const timeAgo = (timestamp: number): string => {\r\n  const now = Date.now();\r\n  const elapsed = now - timestamp;\r\n\r\n  const msPerSecond = 1000;\r\n  const msPerMinute = msPerSecond * 60;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    const seconds = Math.floor(elapsed / msPerSecond);\r\n    return `${seconds} second${seconds !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerHour) {\r\n    const minutes = Math.floor(elapsed / msPerMinute);\r\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerDay) {\r\n    const hours = Math.floor(elapsed / msPerHour);\r\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\r\n  } else {\r\n    const days = Math.floor(elapsed / msPerDay);\r\n    return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\r\n  }\r\n};\r\n\r\nexport const formatGameEntityName = (entity: string): string => {\r\n  const wordsToExclude = [\"or\", \"the\", \"a\", \"of\"];\r\n\r\n  return entity\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space before capitals\r\n    .replace(/\\b(Or|The|A|Of)\\b/g, (match) => match.toLowerCase()); // Lowercase specific words\r\n};\r\n\r\nexport const formatToUpperCase = (entity: string): string => {\r\n  return entity\r\n    .split(\"_\")\r\n    .map((word) => {\r\n      return word.charAt(0).toUpperCase() + word.slice(1);\r\n    })\r\n    .join(\"\");\r\n};\r\n\r\nexport const placeToRaceMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return raceMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return raceMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return raceMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return raceMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return raceMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return raceMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return raceMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return raceMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return raceMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossNormalMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossNormalMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossNormalMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossNormalMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossNormalMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossNormalMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossNormalMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossNormalMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossNormalMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossNormalMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossEliteMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossEliteMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossEliteMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossEliteMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossEliteMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossEliteMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossEliteMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossEliteMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossEliteMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossEliteMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtPlayerMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place <= 25) {\r\n    return ctPlayerMedalImages.diamond;\r\n  } else if (place <= 100) {\r\n    return ctPlayerMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return ctPlayerMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return ctPlayerMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctPlayerMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return ctPlayerMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctPlayerMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtTeamMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return ctTeamMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return ctTeamMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return ctTeamMedalImages.diamond;\r\n  } else if (place <= 25) {\r\n    return ctTeamMedalImages.gold_diamond;\r\n  } else if (place <= 100) {\r\n    return ctTeamMedalImages.double_gold;\r\n  } else if (percentile <= 1) {\r\n    return ctTeamMedalImages.gold_silver;\r\n  } else if (percentile <= 10) {\r\n    return ctTeamMedalImages.double_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctTeamMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctTeamMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const appendOrdinalSuffix = (number: number): string => {\r\n  const j = number % 10;\r\n  const k = number % 100;\r\n  if (j === 1 && k !== 11) {\r\n    return number + \"st\";\r\n  }\r\n  if (j === 2 && k !== 12) {\r\n    return number + \"nd\";\r\n  }\r\n  if (j === 3 && k !== 13) {\r\n    return number + \"rd\";\r\n  }\r\n  return number + \"th\";\r\n};\r\n\r\nexport const convertGameTypeToString = (gameType: number): string => {\r\n  switch (gameType) {\r\n    case 2:\r\n      return \"Race\";\r\n    case 4:\r\n      return \"Boss\";\r\n    case 8:\r\n      return \"LeastCash\";\r\n    case 9:\r\n      return \"LeastTiers\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const towerTypes: { [key in Tower]: TowerType } = {\r\n  Alchemist: \"magic\",\r\n  BananaFarm: \"support\",\r\n  BeastHandler: \"support\",\r\n  BoomerangMonkey: \"primary\",\r\n  BombShooter: \"primary\",\r\n  DartMonkey: \"primary\",\r\n  DartlingGunner: \"military\",\r\n  Druid: \"magic\",\r\n  EngineerMonkey: \"support\",\r\n  GlueGunner: \"primary\",\r\n  HeliPilot: \"military\",\r\n  IceMonkey: \"primary\",\r\n  Mermonkey: \"magic\",\r\n  MonkeyAce: \"military\",\r\n  MonkeyBuccaneer: \"military\",\r\n  MonkeySub: \"military\",\r\n  MonkeyVillage: \"support\",\r\n  MortarMonkey: \"military\",\r\n  NinjaMonkey: \"magic\",\r\n  SniperMonkey: \"military\",\r\n  SpikeFactory: \"support\",\r\n  SuperMonkey: \"magic\",\r\n  TackShooter: \"primary\",\r\n  WizardMonkey: \"magic\",\r\n  // Heroes\r\n  AdmiralBrickell: \"hero\",\r\n  Adora: \"hero\",\r\n  Benjamin: \"hero\",\r\n  CaptainChurchill: \"hero\",\r\n  Corvus: \"hero\",\r\n  Etienne: \"hero\",\r\n  Ezili: \"hero\",\r\n  Geraldo: \"hero\",\r\n  Gwendolin: \"hero\",\r\n  ObynGreenfoot: \"hero\",\r\n  PatFusty: \"hero\",\r\n  Psi: \"hero\",\r\n  Quincy: \"hero\",\r\n  Rosalia: \"hero\",\r\n  Sauda: \"hero\",\r\n  StrikerJones: \"hero\",\r\n  ChosenPrimaryHero: \"hero\",\r\n};\r\n\r\nexport const prettyEventNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Boss\",\r\n  Boss2: \"Boss\",\r\n  Boss3: \"Boss\",\r\n  Boss4: \"Boss\",\r\n  CtPlayer: \"Contested Territory\",\r\n  CtTeam: \"Contested Territory\",\r\n};\r\n\r\nexport const prettyNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Solo\",\r\n  Boss2: \"Duo\",\r\n  Boss3: \"Trio\",\r\n  Boss4: \"Quad\",\r\n  CtPlayer: \"Player\",\r\n  CtTeam: \"Team\",\r\n};\r\n"],"names":["RaceTimeCalculator","playgroundInput","setPlaygroundInput","useState","_jsxs","className","children","_jsx","type","inputMode","placeholder","onChange","e","Number","target","value","id","roundEven5","num","Math","floor","round","convertMsToTimeFormat","ms","hours","minutes","seconds","milliseconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","formattedMilliseconds","concat","timeAgo","timestamp","elapsed","Date","now","msPerMinute","msPerSecond","msPerHour","msPerDay","days","formatGameEntityName","entity","replace","match","toLowerCase","formatToUpperCase","split","map","word","charAt","toUpperCase","slice","join","placeToRaceMedal","place","totalEntries","percentile","raceMedalImages","black_diamond","red_diamond","diamond","gold_diamond","double_gold","gold_silver","double_silver","silver","bronze","placeToBossNormalMedal","bossNormalMedalImages","placeToBossEliteMedal","bossEliteMedalImages","placeToCtPlayerMedal","ctPlayerMedalImages","placeToCtTeamMedal","ctTeamMedalImages","appendOrdinalSuffix","number","j","k","convertGameTypeToString","gameType","towerTypes","Alchemist","BananaFarm","BeastHandler","BoomerangMonkey","BombShooter","DartMonkey","DartlingGunner","Druid","EngineerMonkey","GlueGunner","HeliPilot","IceMonkey","Mermonkey","MonkeyAce","MonkeyBuccaneer","MonkeySub","MonkeyVillage","MortarMonkey","NinjaMonkey","SniperMonkey","SpikeFactory","SuperMonkey","TackShooter","WizardMonkey","AdmiralBrickell","Adora","Benjamin","CaptainChurchill","Corvus","Etienne","Ezili","Geraldo","Gwendolin","ObynGreenfoot","PatFusty","Psi","Quincy","Rosalia","Sauda","StrikerJones","ChosenPrimaryHero","prettyEventNames","Race","Boss","Boss2","Boss3","Boss4","CtPlayer","CtTeam"],"sourceRoot":""}