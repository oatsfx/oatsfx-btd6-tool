{"version":3,"file":"static/js/314.76a0958e.chunk.js","mappings":"8PAWA,MA8DA,EA9D2C,CACzC,CACEA,KAAM,cACNC,GAAI,YACJC,MAAOC,EACPC,YACE,uHAEJ,CACEJ,KAAM,gBACNC,GAAI,cACJC,MAAOG,EACPD,YACE,+FAEJ,CACEJ,KAAM,gBACNC,GAAI,eACJC,MAAOI,EACPF,YAAa,4CAEf,CACEJ,KAAM,iBACNC,GAAI,gBACJC,MAAOK,EACPH,YACE,uHAEJ,CACEJ,KAAM,mBACNC,GAAI,kBACJC,MAAOM,EACPJ,YAAa,+CAEf,CACEJ,KAAM,gBACNC,GAAI,eACJC,MAAOO,EACPL,YACE,sFAEJ,CACEJ,KAAM,mBACNC,GAAI,kBACJC,MAAOQ,EACPN,YAAa,8CAEf,CACEJ,KAAM,kBACNC,GAAI,iBACJC,MAAOS,EACPP,YAAa,8CAEf,CACEJ,KAAM,iBACNC,GAAI,gBACJC,MAAOU,EACPR,YACE,qF,uBChEN,MAmFA,EAnFkBS,IAYX,IAZY,KACjBC,EAAI,YACJC,EAAW,QACXC,EAAO,OACPC,EAAM,uBACNC,GAODL,EACC,MAAOM,EAAWC,IAAgBC,EAAAA,EAAAA,UAAmB,IAE/CC,EAAeC,IACnBL,EAAuBK,EAAEC,OAAOvB,GAAG,EAcrC,OAXAwB,EAAAA,EAAAA,YAAU,KACR,IAAIR,EAAmB,GACvBS,OAAOC,QAAQb,GAAMc,KAAKC,IACpBA,EAAK,GAAGC,WACVb,EAAOc,KAAKF,EAAK,GAAGC,UACtB,IAGFV,EAAaH,EAAOe,OAAOjB,GAAa,GACvC,CAACD,EAAMC,KAGRkB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kCAAiCC,SAAC,wBAC/CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,SACnBnB,GAiCAiB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+CAA8CC,SAAA,EAC3DC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BAxCjBG,EAAsBT,KAAKU,IACzBF,EAAAA,EAAAA,KAAA,OACEF,UAAU,eACV,WACEf,EAAUoB,SAASD,EAAMrC,IACrBqC,EAAMlC,YACN,4BACL+B,UAGDF,EAAAA,EAAAA,MAAA,SACEC,UACE,gBACEf,EAAUoB,SAASD,EAAMrC,IAEvB,kBADA,kCAELkC,SAAA,EAEDC,EAAAA,EAAAA,KAAA,OAAKI,IAAKF,EAAMpC,MAAOgC,UAAU,cACjCE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,aAAYC,SAAEG,EAAMtC,QACpCoC,EAAAA,EAAAA,KAAA,SACEK,KAAK,WACLC,QAASzB,EAAOsB,SAASD,EAAMrC,IAC/BiC,UAAU,uBACVjC,GAAIqC,EAAMrC,GACV0C,UAAWxB,EAAUoB,SAASD,EAAMrC,IACpC2C,SAAUtB,QAlBTgB,EAAMrC,UAoCf,E,0KCjFV,MAuCA,EAvCqBY,IAUd,IAVe,KACpBb,EAAI,MACJE,EAAK,UACL2C,EAAS,YACTC,GAMDjC,EACC,OACEoB,EAAAA,EAAAA,MAAA,OACEC,UAAU,uDACV,YAAUa,EAAAA,EAAAA,IAAqB/C,GAAMmC,SAAA,CAEpCU,GACCT,EAAAA,EAAAA,KAAA,QAAMF,UAAU,qIAAoIC,SACjJU,KAGHT,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,IAEDF,GACCV,EAAAA,EAAAA,KAAA,QAAMF,UAAU,qDAAoDC,UAClEC,EAAAA,EAAAA,KAAA,OAAKI,IAAKnC,EAAkB6B,UAAU,gBAGxCE,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,KAEFZ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,UACrBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6DAA4DC,UACzEC,EAAAA,EAAAA,KAAA,OAAKI,IAAKtC,UAGV,EC0GV,EAlIoBW,IAA2D,IAADoC,EAAA,IAAzD,SAAEC,EAAQ,KAAErB,GAAwChB,EACvE,OACEoB,EAAAA,EAAAA,MAAA,OACEC,UACE,wJACAiB,EAAAA,GAAUtB,EAAKuB,SAASC,aACzBlB,SAAA,EAEDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mIAAkIC,SAAA,EAC/IC,EAAAA,EAAAA,KAAA,OACEI,IACEc,EAAAA,GACEzB,EAAKuB,SAASG,aAGlBrB,UAAU,cAEXa,EAAAA,EAAAA,KACCS,EAAAA,EAAAA,IAAwB3B,EAAKuB,SAASG,kBAG1CnB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iCAAgCC,SAAEe,KAC/CjB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,kCAAiCC,SAAA,EAC3CY,EAAAA,EAAAA,IAAqBlB,EAAKuB,SAASC,aAAuB,MAAI,KAC9DN,EAAAA,EAAAA,IAAqBlB,EAAKuB,SAASK,wBAEtCxB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,sBAAqBC,SAAA,KAAAH,OACU,QADViB,EAC3BpB,EAAKuB,SAASM,QAAQC,WAAWC,YAAI,IAAAX,OAAA,EAArCA,EAAuCY,iBAAgB,QAAQ,IAAG,SAAA7B,OAC7DH,EAAKuB,SAASM,QAAQC,WAAWG,MAAK,KAAA9B,OAAIH,EAAKuB,SAASM,QAAQC,WAAWI,cAEvF9B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wDAAuDC,SAAA,CACnEN,EAAKuB,SAASM,QAAQM,gBACrB5B,EAAAA,EAAAA,KAAA,OACEF,UAAU,gCACV,WAAU,mBAAmBC,UAE7BC,EAAAA,EAAAA,KAAA,OAAKI,IAAKyB,EAAgB/B,UAAU,gBAGtCE,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,IAEDnB,EAAKuB,SAASM,QAAQQ,WACrB9B,EAAAA,EAAAA,KAAA,OACEF,UAAU,gCACV,WAAU,4BAA4BC,UAEtCC,EAAAA,EAAAA,KAAA,OAAKI,IAAK2B,EAAWjC,UAAU,gBAGjCE,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,IAEiB,UAAlBnB,EAAKuC,UACJhC,EAAAA,EAAAA,KAAA,OACEF,UAAU,gCACV,YAAUa,EAAAA,EAAAA,IAAqBlB,EAAKC,WAAqBK,UAEzDC,EAAAA,EAAAA,KAAA,OACEI,IAAK6B,EAAAA,GAAYxC,EAAKC,WACtBI,UAAU,gBAIdE,EAAAA,EAAAA,KAAA,OACEF,UAAU,gCACV,YAAUa,EAAAA,EAAAA,IAAqBlB,EAAKuC,UAAoBjC,UAExDC,EAAAA,EAAAA,KAAA,OAAKI,IAAK8B,EAAAA,GAAWzC,EAAKuC,UAAWlC,UAAU,kBAIpDL,EAAKuB,SAASM,QAAQa,OAAOC,OAAOC,QAClCC,GAAMA,EAAEC,QAAoB,IAAVD,EAAEE,MACrBC,QACA5C,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAAb,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAC1BN,EAAKuB,SAASM,QAAQa,OAAOC,OAAOC,QAClCC,GAAMA,EAAEC,QAAoB,IAAVD,EAAEE,MACrBC,OACFhD,EAAKuB,SAASM,QAAQa,OAAOC,OAAOC,QAAQC,GAAMA,EAAEC,SAAQE,OAC1D,EACE,kBACA,YAENzC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,8CAA6CC,SACzDN,EAAKuB,SAASM,QAAQa,OAAOC,OAAOC,QAClCC,GAAMA,EAAEC,QAAoB,IAAVD,EAAEE,MACrBC,OACFhD,EAAKuB,SAASM,QAAQa,OAAOC,OAAOC,QAAQC,GAAMA,EAAEC,SAAQE,OAC1D,EACEhD,EAAKuB,SAASM,QAAQa,OAAOC,OAC1BC,QACEC,GACCA,EAAEC,QAAoB,IAAVD,EAAEE,KAAyB,sBAAZF,EAAEI,QAEhClD,KAAKmD,IACJ3C,EAAAA,EAAAA,KAAC4C,EAAY,CACXhF,KAAM+E,EAAKD,MACX5E,MAAO+E,EAAAA,GAAYF,EAAKD,QACnBC,EAAKD,SAGhBjD,EAAKuB,SAASM,QAAQa,OAAOC,OAC1BC,QAAQC,GAAMA,EAAEC,QAAoB,IAAVD,EAAEE,MAC5BhD,KAAKmD,IACJ3C,EAAAA,EAAAA,KAAC4C,EAAY,CACXhF,KAAM+E,EAAKD,MACX5E,MAAO+E,EAAAA,GAAYF,EAAKD,QACnBC,EAAKD,cAKtB,MACJ1C,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,YAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,8CAA6CC,SACzDN,EAAKuB,SAASM,QAAQa,OAAOC,OAC3BC,QAAQC,IAAOA,EAAEC,QAAoB,IAAVD,EAAEE,MAC7BhD,KAAKkD,IACJ1C,EAAAA,EAAAA,KAAC4C,EAAY,CACXhF,KAAM8E,EAAMA,MACZ5E,MAAO+E,EAAAA,GAAYH,EAAMA,OACzBjC,UAAWiC,EAAMF,IAAM,EAAIE,EAAMF,IAAM,UAClCE,EAAMA,aAIf,E,kCClIV,MA2KA,EA3KqBjE,IAYd,IAZe,KACpBC,EAAI,QACJE,EAAO,aACPkE,EAAY,OACZjE,EAAM,WACNkE,GAODtE,EACC,MAAOuE,EAAYC,IAAiBhE,EAAAA,EAAAA,UAA2B,QACxDiE,EAAmBC,IAAwBlE,EAAAA,EAAAA,UAE/C,CAAC,GAEEmE,EAAgBjE,IACpB8D,EAAc9D,EAAEC,OAAOiE,MAAM,EAQzBC,EAAwBnE,IAC5B8D,EAAc,SACdF,EAAW5D,EAAEC,OAAOvB,IACnB0F,SAASC,eAAe,eAAqCH,MAC5DlE,EAAEC,OAAOvB,EAAE,EAsBf,OAnBAwB,EAAAA,EAAAA,YAAU,KACR,MAAMoE,EAAWnE,OAAOoE,KAAKhF,GAC1BiF,OACAC,QAAO,CAACH,EAAmCI,KAEL,IAAnCnF,EAAKmF,GAAK7C,SAASG,aACH,QAAf6B,GAAwBtE,EAAKmF,GAAK7B,WAAagB,IAEhDS,EAASI,GAAOnF,EAAKmF,IAEhBJ,IACN,CAAC,GACDnE,OAAOoE,KAAKD,GAAUtD,SAAS2C,IAAkC,KAAjBA,GACnDC,EAAWzD,OAAOoE,KAAKD,GAAUK,GAAG,IAGtCX,EAAqBM,EAAS,GAC7B,CAACT,EAAYtE,KAGdsB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,UACrBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kCAAiCC,SAAC,kBAC7CnB,GAgGAiB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+CAA8CC,SAAA,EAC3DC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBACfD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4CACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4CACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4CACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4CACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4CACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kDAxGnBD,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAAb,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,gCAA+BC,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,SACEK,KAAK,QACLzC,KAAK,UACLyF,MAAM,SACNvD,UAAU,QACVQ,QAAwB,WAAf0C,EACTxC,SAAU4C,KAEZpD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAgBM,IAAK2D,QAEtClE,EAAAA,EAAAA,MAAA,SAAOC,UAAU,gCAA+BC,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,SACEK,KAAK,QACLzC,KAAK,UACLyF,MAAM,QACNvD,UAAU,QACVQ,QAAwB,UAAf0C,EACTxC,SAAU4C,KAEZpD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAgBM,IAAK4D,QAEtCnE,EAAAA,EAAAA,MAAA,SAAOC,UAAU,gCAA+BC,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,SACEK,KAAK,QACLzC,KAAK,UACLyF,MAAM,UACNvD,UAAU,QACVQ,QACiB,YAAf0C,GACe,qBAAfA,EAEFxC,SAAU4C,KAEZpD,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAgBM,IAAK6D,QAEtCpE,EAAAA,EAAAA,MAAA,SAAOC,UAAU,gCAA+BC,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,SACEK,KAAK,QACLzC,KAAK,UACLyF,MAAM,MACNvD,UAAU,QACVQ,QAAwB,QAAf0C,EACTxC,SAAU4C,KAEZpD,EAAAA,EAAAA,KAAA,KAAGF,UAAU,eAAcC,SAAC,eAGhCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yCAAwCC,SAAA,EACrDF,EAAAA,EAAAA,MAAA,UACEhC,GAAG,cACHiC,UAAU,yCACVU,SA1FWrB,IACvB,MAAMM,EAAON,EAAEC,OAAOiE,MACtBN,EAAWtD,EAAK,EAyFJyE,aAAc,gBAAgBnE,SAAA,EAE9BC,EAAAA,EAAAA,KAAA,UAAQO,UAAQ,EAAAR,SAAC,kBAChBT,OAAOC,QAAQ2D,GAAmB1D,KAAKsB,IACtCd,EAAAA,EAAAA,KAAA,UAAQnC,GAAIiD,EAAS,GAAGf,SACrBe,EAAS,IADkBA,EAAS,UAK3CjB,EAAAA,EAAAA,MAAA,WAASC,UAAU,0CAAyCC,SAAA,EAC1DC,EAAAA,EAAAA,KAAA,WAASF,UAAU,WAAUC,SAAC,iBAC9BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,4GAA2GC,SACtHT,OAAOC,QAAQb,GAAMc,KAAKC,GACJ,UAArBA,EAAK,GAAGuC,UACyB,IAAjCvC,EAAK,GAAGuB,SAASG,aACfnB,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAAA,KAAGhC,GAAI4B,EAAK,GAAI0E,QAASb,EAAqBvD,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OACEF,UAAU,WACVM,IACE6B,EAAAA,GACExC,EAAK,GAAGC,cAIbiB,EAAAA,EAAAA,IAAqBlB,EAAK,GAAGC,eAVzBD,EAAK,GAAGC,WAaf,eAKXoD,GACC9C,EAAAA,EAAAA,KAACoE,EAAW,CAACtD,SAAUgC,EAAcrD,KAAMf,EAAKoE,MAEhD9C,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SAAC,6BAkB/B,EC5IGsE,EAAmD,CAC9DC,KAAM,IACNC,OAAQ,EACRC,KAAM,MCVR,EA1BoB/F,IAA8C,IAA7C,SAAEgG,GAAqChG,EAC1D,OACEuB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kFAAiFC,SAC7F0E,EACEd,MAAK,CAACe,EAAGC,IAAMA,EAAEC,KAAOF,EAAEE,OAC1BpF,KAAI,CAACkD,EAAOmC,KACX7E,EAAAA,EAAAA,KAAC4C,EAAY,CACXhF,KAAI,GAAAgC,OAAK8C,EAAM9E,KAAI,OAAAgC,OAAM8C,EAAMkC,KAAKnD,kBAAgB7B,OAClD8C,EAAMhC,YAAc,IAAM,IAE5B5C,MAAO+E,EAAAA,GAAYH,EAAM9E,MACzB6C,UAAWiC,EAAMoC,KACjBpE,YAAagC,EAAMhC,aACdmE,MASP,EC2BV,EAjDwBpG,IAYjB,IAZkB,UACvBsG,EAAS,aACTC,EAAY,YACZC,EAAW,aACXC,EAAY,eACZC,GAOD1G,EACC,OACEoB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,gCAA+BC,SAAA,CAAC,qBAE1CiF,EAAY,QAAApF,OAAWoF,EAAY,UAAApF,OAASqF,GAAgB,MAG9DF,EAAUtC,OAAS,GAClB5C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oGAAmGC,SAAA,EAChHC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAC,eAC7BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iEAAgEC,SAC5EgF,EAAUvF,KAAI,CAACiF,EAAUW,KACxBpF,EAAAA,EAAAA,KAACqF,EAAW,CAACZ,SAAUA,GAAeW,WAK5CpF,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SAAC,iCAE7BF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,qBAAoBC,SAAA,CAAC,WACvBgF,EAAUtC,OAAO,kBACJ,IAArBsC,EAAUtC,OAAe,GAAK,IAAI,QAErCzC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,8CAA6CC,UAC1DC,EAAAA,EAAAA,KAAA,UACEF,UAAU,0DACVS,SAAU2E,EACVf,QAASgB,EAAepF,SACzB,cAIC,EC8LV,EA/Oc,CACZ,CACElC,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,IAEV,CACEzH,GAAI,WACJyH,OAAQ,GAEV,CACEzH,GAAI,WACJyH,OAAQ,GAEV,CACEzH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","sources":["configs/relics.config.ts","components/RelicList/RelicList.tsx","components/TowerDisplay/TowerDisplay.tsx","components/TileDisplay/TileDisplay.tsx","components/TileSelector/TileSelector.tsx","types/costs.ts","components/SolutionRow/SolutionRow.tsx","components/SolutionManager/SolutionManager.tsx","configs/ctIds.config.ts","pages/LeastCashCalculator/index.tsx","pages/LeastCashCalculator/LeastCashCalculator.tsx","hooks/useCtData.tsx","hooks/useCtEventRelics.tsx","hooks/useTowerCostData.tsx","hooks/useHeroCostData.tsx","util/converters.ts"],"sourcesContent":["import airAndSeaImage from \"images/relics/air_and_sea.webp\";\r\nimport boxOfMonkeyImage from \"images/relics/box_of_monkey.webp\";\r\nimport magicMonkeysImage from \"images/relics/magic_monkeys.webp\";\r\nimport marchingBootsImage from \"images/relics/marching_boots.webp\";\r\nimport militaryMonkeysImage from \"images/relics/military_monkeys.webp\";\r\nimport monkeyTycoonImage from \"images/relics/monkey_tycoon.webp\";\r\nimport primaryPrimatesImage from \"images/relics/primary_primates.webp\";\r\nimport supportSimiansImages from \"images/relics/support_simians.webp\";\r\nimport startingStashImage from \"images/relics/starting_stash.webp\";\r\nimport { RelicData } from \"types/relic\";\r\n\r\nconst costInfluencingRelics: RelicData[] = [\r\n  {\r\n    name: \"Air and Sea\",\r\n    id: \"AirAndSea\",\r\n    image: airAndSeaImage,\r\n    description:\r\n      \"Ace, Heli, Buccaneer and Sub have their placement and upgrade costs reduced by 5%, and their reload improved by 5% \",\r\n  },\r\n  {\r\n    name: \"Box of Monkey\",\r\n    id: \"BoxOfMonkey\",\r\n    image: boxOfMonkeyImage,\r\n    description:\r\n      \"Start each game with one free Monkey costing $400 or less for unmodified initial placement.\",\r\n  },\r\n  {\r\n    name: \"Magic Monkeys\",\r\n    id: \"MagicMonkeys\",\r\n    image: magicMonkeysImage,\r\n    description: \"Reduces cost of all Magic Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Marching Boots\",\r\n    id: \"MarchingBoots\",\r\n    image: marchingBootsImage,\r\n    description:\r\n      \"In restricted count games, give players +1 max count of each tower in their loadout or +4 total max count per game.\",\r\n  },\r\n  {\r\n    name: \"Military Monkeys\",\r\n    id: \"MilitaryMonkeys\",\r\n    image: militaryMonkeysImage,\r\n    description: \"Reduces cost of all Military Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Monkey Tycoon\",\r\n    id: \"MonkeyTycoon\",\r\n    image: monkeyTycoonImage,\r\n    description:\r\n      \"Get +1 of all Monkey Towers in your loadout and their base price is reduced by 4%.\",\r\n  },\r\n  {\r\n    name: \"Primary Primates\",\r\n    id: \"PrimaryPrimates\",\r\n    image: primaryPrimatesImage,\r\n    description: \"Reduces cost of all Primary Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Support Simians\",\r\n    id: \"SupportSimians\",\r\n    image: supportSimiansImages,\r\n    description: \"Reduces cost of all Support Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Starting Stash\",\r\n    id: \"StartingStash\",\r\n    image: startingStashImage,\r\n    description:\r\n      \"Start each game with an extra 250 cash (stacks with More Cash on Regular Tiles).\",\r\n  },\r\n];\r\n\r\nexport default costInfluencingRelics;\r\n","import costInfluencingRelics from \"configs/relics.config\";\r\nimport { useCtEventRelics } from \"hooks/useCtEventRelics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { CTData, Relic } from \"types/ct\";\r\n\r\nconst RelicList = ({\r\n  data,\r\n  eventRelics,\r\n  loading,\r\n  relics,\r\n  handleRelicFilterClick,\r\n}: {\r\n  data: CTData;\r\n  eventRelics: Relic[];\r\n  loading: boolean;\r\n  relics: Relic[];\r\n  handleRelicFilterClick: (relic: Relic) => void;\r\n}) => {\r\n  const [relicList, setRelicList] = useState<string[]>([]);\r\n\r\n  const handleCheck = (e: any) => {\r\n    handleRelicFilterClick(e.target.id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let relics: string[] = [];\r\n    Object.entries(data).map((tile) => {\r\n      if (tile[1].RelicType) {\r\n        relics.push(tile[1].RelicType);\r\n      }\r\n    });\r\n\r\n    setRelicList(relics.concat(eventRelics));\r\n  }, [data, eventRelics]);\r\n\r\n  return (\r\n    <div className=\"w-2/3\">\r\n      <p className=\"text-lg font-medium text-center\">Select some Relics</p>\r\n      <div className=\"w-full\">\r\n        {!loading ? (\r\n          costInfluencingRelics.map((relic) => (\r\n            <div\r\n              className=\"tooltip flex\"\r\n              data-tip={\r\n                relicList.includes(relic.id)\r\n                  ? relic.description\r\n                  : \"Not available this event.\"\r\n              }\r\n              key={relic.id}\r\n            >\r\n              <label\r\n                className={\r\n                  \"label w-full\" +\r\n                  (!relicList.includes(relic.id)\r\n                    ? \" cursor-not-allowed opacity-40\"\r\n                    : \" cursor-pointer\")\r\n                }\r\n              >\r\n                <img src={relic.image} className=\"w-[28px]\" />\r\n                <span className=\"label-text\">{relic.name}</span>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={relics.includes(relic.id as Relic)}\r\n                  className=\"checkbox checkbox-sm\"\r\n                  id={relic.id}\r\n                  disabled={!relicList.includes(relic.id)}\r\n                  onChange={handleCheck}\r\n                />\r\n              </label>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"flex flex-col gap-2 w-full py-2 items-center\">\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RelicList;\r\n","import { formatGameEntityName } from \"util/converters\";\r\nimport boxOfMonkeyImage from \"images/relics/box_of_monkey.webp\";\r\n\r\nconst TowerDisplay = ({\r\n  name,\r\n  image,\r\n  indicator,\r\n  boxOfMonkey,\r\n}: {\r\n  name: string;\r\n  image: string;\r\n  indicator?: string | number;\r\n  boxOfMonkey?: boolean;\r\n}) => {\r\n  return (\r\n    <div\r\n      className=\"tooltip before:z-50 before:content-[attr(data-tip)] \"\r\n      data-tip={formatGameEntityName(name)}\r\n    >\r\n      {indicator ? (\r\n        <span className=\"indicator-item indicator-bottom indicator-center badge px-2 outline outline-white/25 outline-1 rounded-[4px] font-medium shadow-lg\">\r\n          {indicator}\r\n        </span>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {boxOfMonkey ? (\r\n        <span className=\"indicator-item indicator-top font-medium shadow-lg\">\r\n          <img src={boxOfMonkeyImage} className=\"w-[24px]\" />\r\n        </span>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <div className=\"avatar\">\r\n        <div className=\"w-8 rounded-full shadow outline outline-1 outline-white/25\">\r\n          <img src={image} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TowerDisplay;\r\n","import {\r\n  towerImages,\r\n  mapImages,\r\n  relicImages,\r\n  tileImages,\r\n  gameTypeImages,\r\n} from \"util/formatters\";\r\nimport { Tile } from \"types/ct\";\r\n\r\nimport noSellingImage from \"images/modifiers/selling_disabled.webp\";\r\nimport noMkImage from \"images/modifiers/monkey_knowledge_disabled.webp\";\r\nimport { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { convertGameTypeToString, formatGameEntityName } from \"util/converters\";\r\n\r\nconst TileDisplay = ({ tileCode, tile }: { tileCode: string; tile: Tile }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"indicator w-full flex flex-col outline outline-1 outline-white/50 rounded-xl items-center my-8 py-4 pb-6 bg-no-repeat bg-top bg-cover bg-clip-border \" +\r\n        mapImages[tile.GameData.selectedMap as keyof typeof mapImages]\r\n      }\r\n    >\r\n      <div className=\"indicator-item indicator-top indicator-center badge badge-ghost font-semibold gap-1 px-5 py-3 outline outline-1 outline-white/25\">\r\n        <img\r\n          src={\r\n            gameTypeImages[\r\n              tile.GameData.subGameType as keyof typeof gameTypeImages\r\n            ]\r\n          }\r\n          className=\"w-[16px]\"\r\n        />\r\n        {formatGameEntityName(\r\n          convertGameTypeToString(tile.GameData.subGameType)\r\n        )}\r\n      </div>\r\n      <p className=\"font-bold text-2xl text-center\">{tileCode}</p>\r\n      <p className=\"font-medium text-md text-center\">\r\n        {formatGameEntityName(tile.GameData.selectedMap as string)} //{\" \"}\r\n        {formatGameEntityName(tile.GameData.selectedDifficulty as string)}\r\n      </p>\r\n      <p className=\"text-md text-center\">\r\n        {`$${tile.GameData.dcModel.startRules.cash?.toLocaleString()} // `}{\" \"}\r\n        {`Round ${tile.GameData.dcModel.startRules.round}-${tile.GameData.dcModel.startRules.endRound}`}\r\n      </p>\r\n      <div className=\"flex flex-wrap gap-2 pt-2 justify-center items-center\">\r\n        {tile.GameData.dcModel.disableSelling ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={\"Selling Disabled\"}\r\n          >\r\n            <img src={noSellingImage} className=\"w-[34px]\" />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {tile.GameData.dcModel.disableMK ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={\"Monkey Knowledge Disabled\"}\r\n          >\r\n            <img src={noMkImage} className=\"w-[34px]\" />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {tile.TileType === \"Relic\" ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={formatGameEntityName(tile.RelicType as string)}\r\n          >\r\n            <img\r\n              src={relicImages[tile.RelicType as keyof typeof relicImages]}\r\n              className=\"w-[34px]\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={formatGameEntityName(tile.TileType as string)}\r\n          >\r\n            <img src={tileImages[tile.TileType]} className=\"w-[34px]\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n      {tile.GameData.dcModel.towers._items.filter(\r\n        (x) => x.isHero && x.max !== 0\r\n      ).length ? (\r\n        <>\r\n          <div className=\"divider px-4\">\r\n            {tile.GameData.dcModel.towers._items.filter(\r\n              (x) => x.isHero && x.max !== 0\r\n            ).length >\r\n            tile.GameData.dcModel.towers._items.filter((x) => x.isHero).length /\r\n              2\r\n              ? \"Heroes Excluded\"\r\n              : \"Heroes\"}\r\n          </div>\r\n          <div className=\"flex flex-wrap gap-2 gap-y-3 justify-center\">\r\n            {tile.GameData.dcModel.towers._items.filter(\r\n              (x) => x.isHero && x.max !== 0\r\n            ).length >\r\n            tile.GameData.dcModel.towers._items.filter((x) => x.isHero).length /\r\n              2\r\n              ? tile.GameData.dcModel.towers._items\r\n                  .filter(\r\n                    (x) =>\r\n                      x.isHero && x.max === 0 && x.tower !== \"ChosenPrimaryHero\"\r\n                  )\r\n                  .map((hero) => (\r\n                    <TowerDisplay\r\n                      name={hero.tower}\r\n                      image={towerImages[hero.tower]}\r\n                      key={hero.tower}\r\n                    />\r\n                  ))\r\n              : tile.GameData.dcModel.towers._items\r\n                  .filter((x) => x.isHero && x.max !== 0)\r\n                  .map((hero) => (\r\n                    <TowerDisplay\r\n                      name={hero.tower}\r\n                      image={towerImages[hero.tower]}\r\n                      key={hero.tower}\r\n                    />\r\n                  ))}\r\n          </div>\r\n        </>\r\n      ) : null}\r\n      <div className=\"divider px-4\">Towers</div>\r\n      <div className=\"flex flex-wrap gap-2 gap-y-3 justify-center\">\r\n        {tile.GameData.dcModel.towers._items\r\n          .filter((x) => !x.isHero && x.max !== 0)\r\n          .map((tower) => (\r\n            <TowerDisplay\r\n              name={tower.tower}\r\n              image={towerImages[tower.tower]}\r\n              indicator={tower.max > 0 ? tower.max : \"∞\"}\r\n              key={tower.tower}\r\n            />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileDisplay;\r\n","import { TileDisplay } from \"components/TileDisplay\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\n\r\nimport bannerImage from \"images/ct/banner_s.webp\";\r\nimport relicImage from \"images/ct/relic_s.webp\";\r\nimport blankImage from \"images/ct/regular_s.webp\";\r\nimport { CTData, Relic, Tile, TileType } from \"types/ct\";\r\nimport { relicImages } from \"util/formatters\";\r\nimport { formatGameEntityName } from \"util/converters\";\r\n\r\nconst TileSelector = ({\r\n  data,\r\n  loading,\r\n  selectedTile,\r\n  relics,\r\n  changeTile,\r\n}: {\r\n  data: CTData;\r\n  loading: boolean;\r\n  selectedTile: string;\r\n  relics: Relic[];\r\n  changeTile: (tile: string) => void;\r\n}) => {\r\n  const [tileFilter, setTileFilter] = useState<TileType | \"All\">(\"All\");\r\n  const [filteredTileCodes, setFilteredTileCodes] = useState<{\r\n    [key: string]: Tile;\r\n  }>({});\r\n\r\n  const handleFilter = (e: any) => {\r\n    setTileFilter(e.target.value);\r\n  };\r\n\r\n  const handleSelection = (e: any) => {\r\n    const tile = e.target.value as string;\r\n    changeTile(tile);\r\n  };\r\n\r\n  const handleRelicSelection = (e: any) => {\r\n    setTileFilter(\"Relic\");\r\n    changeTile(e.target.id);\r\n    (document.getElementById(\"tile-select\") as HTMLSelectElement).value =\r\n      e.target.id;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filtered = Object.keys(data)\r\n      .sort()\r\n      .reduce((filtered: { [key: string]: Tile }, key) => {\r\n        if (\r\n          data[key].GameData.subGameType === 8 &&\r\n          (tileFilter === \"All\" || data[key].TileType === tileFilter)\r\n        ) {\r\n          filtered[key] = data[key];\r\n        }\r\n        return filtered;\r\n      }, {});\r\n    if (!Object.keys(filtered).includes(selectedTile) && selectedTile !== \"\") {\r\n      changeTile(Object.keys(filtered).at(0) as any);\r\n    }\r\n\r\n    setFilteredTileCodes(filtered);\r\n  }, [tileFilter, data]);\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"w-full justify-center\">\r\n        <p className=\"text-lg font-medium text-center\">Select a Tile</p>\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"flex gap-4 py-1 justify-center\">\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Banner\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"Banner\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={bannerImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Relic\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"Relic\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={relicImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Regular\"\r\n                  className=\"radio\"\r\n                  checked={\r\n                    tileFilter === \"Regular\" ||\r\n                    tileFilter === \"TeamFirstCapture\"\r\n                  }\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={blankImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"All\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"All\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <p className=\"text-sm py-3\">All</p>\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center justify-center gap-6\">\r\n              <select\r\n                id=\"tile-select\"\r\n                className=\"select select-bordered w-full max-w-xs\"\r\n                onChange={handleSelection}\r\n                defaultValue={\"Select a tile\"}\r\n              >\r\n                <option disabled>Select a tile</option>\r\n                {Object.entries(filteredTileCodes).map((tileCode) => (\r\n                  <option id={tileCode[0]} key={tileCode[0]}>\r\n                    {tileCode[0]}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <details className=\"dropdown dropdown-right dropdown-center\">\r\n                <summary className=\"btn w-24\">Quick Relic</summary>\r\n                <ul className=\"p-2 shadow-xl menu dropdown-content z-[1] bg-base-100 rounded-box w-52 outline outline-white/25 outline-1\">\r\n                  {Object.entries(data).map((tile) =>\r\n                    tile[1].TileType === \"Relic\" &&\r\n                    tile[1].GameData.subGameType === 8 ? (\r\n                      <li key={tile[1].RelicType as string}>\r\n                        <a id={tile[0]} onClick={handleRelicSelection}>\r\n                          <img\r\n                            className=\"w-[20px]\"\r\n                            src={\r\n                              relicImages[\r\n                                tile[1].RelicType as keyof typeof relicImages\r\n                              ]\r\n                            }\r\n                          />\r\n                          {formatGameEntityName(tile[1].RelicType as string)}\r\n                        </a>\r\n                      </li>\r\n                    ) : null\r\n                  )}\r\n                </ul>\r\n              </details>\r\n            </div>\r\n            {selectedTile ? (\r\n              <TileDisplay tileCode={selectedTile} tile={data[selectedTile]} />\r\n            ) : (\r\n              <p className=\"text-center\">No tile selected.</p>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className=\"flex flex-col gap-2 w-full py-2 items-center\">\r\n            <div className=\"skeleton h-12 w-full\" />\r\n            <div className=\"skeleton h-3 w-full\" />\r\n            <div className=\"flex gap-2\">\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileSelector;\r\n","import { Difficulty, Tower } from \"./ct\";\r\n\r\nexport type TowerCostsData = { [key in Tower]: TowerCost };\r\n\r\nexport type HeroCostsData = { [key in Tower]: HeroCost };\r\n\r\nexport type TowerCost = {\r\n  cost: number;\r\n  upgrades: {\r\n    top_path: { [key: number]: number };\r\n    middle_path: { [key: number]: number };\r\n    bottom_path: { [key: number]: number };\r\n  };\r\n};\r\n\r\nexport type HeroCost = {\r\n  cost: number;\r\n  levelModifier: number;\r\n};\r\n\r\nexport type TowerPath = {\r\n  name: Tower;\r\n  path: string;\r\n  cost: number;\r\n  boxOfMonkey?: boolean;\r\n  isHero?: boolean;\r\n};\r\n\r\nexport const emptyCost = {\r\n  cost: -1,\r\n  upgrades: {\r\n    topPath: {},\r\n    middlePath: {},\r\n    bottomPath: {},\r\n  },\r\n};\r\n\r\nexport const difficultyMultiplers: Record<Difficulty, number> = {\r\n  Easy: 0.85,\r\n  Medium: 1,\r\n  Hard: 1.08,\r\n  // Impoppable: 1.2,\r\n};\r\n","import { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { TowerPath } from \"types/costs\";\r\nimport { towerImages } from \"util/formatters\";\r\n\r\nconst SolutionRow = ({ solution }: { solution: TowerPath[] }) => {\r\n  return (\r\n    <div className=\"indicator gap-3 items-center px-12 justify-center border-b border-white/25 py-4\">\r\n      {solution\r\n        .sort((a, b) => b.cost - a.cost)\r\n        .map((tower, i) => (\r\n          <TowerDisplay\r\n            name={`${tower.name}: $${tower.cost.toLocaleString()}${\r\n              tower.boxOfMonkey ? \"*\" : \"\"\r\n            }`}\r\n            image={towerImages[tower.name as keyof typeof towerImages]}\r\n            indicator={tower.path}\r\n            boxOfMonkey={tower.boxOfMonkey}\r\n            key={i}\r\n          />\r\n        ))}\r\n      {/* <span className=\"indicator indicator-item indicator-bottom indicator-center font-light text-sm\">\r\n        $\r\n        {solution\r\n          .reduce((total, tower) => total + tower.cost, 0)\r\n          .toLocaleString()}\r\n      </span> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolutionRow;\r\n","import { SolutionRow } from \"components/SolutionRow\";\r\nimport { TowerPath } from \"types/costs\";\r\nimport { Tower } from \"types/ct\";\r\n\r\nconst SolutionManager = ({\r\n  solutions,\r\n  solutionTile,\r\n  solutionNum,\r\n  disableClear,\r\n  clearSolutions,\r\n}: {\r\n  solutions: TowerPath[][];\r\n  solutionTile: string;\r\n  solutionNum: number;\r\n  disableClear: boolean;\r\n  clearSolutions: () => void;\r\n}) => {\r\n  return (\r\n    <div className=\"w-full\">\r\n      <p className=\"text-lg font-bold text-center\">\r\n        Possible Solutions\r\n        {solutionTile ? ` for ${solutionTile} in CT${solutionNum}` : \"\"}\r\n      </p>\r\n\r\n      {solutions.length > 0 ? (\r\n        <div className=\"overflow-y-scroll max-h-96 h-96 my-4 py-4 px-12 flex flex-col items-center bg-base-200 rounded-xl\">\r\n          <p className=\"font-semibold\">Solutions</p>\r\n          <div className=\"flex flex-wrap w-full gap-x-2 px-2 items-center justify-center\">\r\n            {solutions.map((solution, index) => (\r\n              <SolutionRow solution={solution} key={index} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-center\">Solutions will appear here.</p>\r\n      )}\r\n      <p className=\"text-center italic\">\r\n        Showing {solutions.length} total solution\r\n        {solutions.length === 1 ? \"\" : \"s\"}.\r\n      </p>\r\n      <div className=\"flex gap-4 items-center justify-center py-2\">\r\n        <button\r\n          className=\"btn min-w-24 outline outline-1 outline-error text-error\"\r\n          disabled={disableClear}\r\n          onClick={clearSolutions}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolutionManager;\r\n","const ctIds = [\r\n  {\r\n    id: \"m34yd7qs\",\r\n    number: 59,\r\n  },\r\n  {\r\n    id: \"m2kwlt60\",\r\n    number: 58,\r\n  },\r\n  {\r\n    id: \"m22b3l2q\",\r\n    number: 57,\r\n  },\r\n  {\r\n    id: \"m18f2i05\",\r\n    number: 56,\r\n  },\r\n  {\r\n    id: \"m0n34q7z\",\r\n    number: 55,\r\n  },\r\n  {\r\n    id: \"m05t53n4\",\r\n    number: 54,\r\n  },\r\n  {\r\n    id: \"lzt9vnfv\",\r\n    number: 53,\r\n  },\r\n  {\r\n    id: \"lywiirac\",\r\n    number: 52,\r\n  },\r\n  {\r\n    id: \"lygltxgu\",\r\n    number: 51,\r\n  },\r\n  {\r\n    id: \"lxo2ds1k\",\r\n    number: 50,\r\n  },\r\n  {\r\n    id: \"lx9ho5f2\",\r\n    number: 49,\r\n  },\r\n  {\r\n    id: \"lwsgoq2e\",\r\n    number: 48,\r\n  },\r\n  {\r\n    id: \"lw3zptqw\",\r\n    number: 47,\r\n  },\r\n  {\r\n    id: \"lvk1it2j\",\r\n    number: 46,\r\n  },\r\n  {\r\n    id: \"luub1xz5\",\r\n    number: 45,\r\n  },\r\n  {\r\n    id: \"lug12fgd\",\r\n    number: 44,\r\n  },\r\n  {\r\n    id: \"lts2aqan\",\r\n    number: 43,\r\n  },\r\n  {\r\n    id: \"ltkys2el\",\r\n    number: 42,\r\n  },\r\n  {\r\n    id: \"lswkbyus\",\r\n    number: 41,\r\n  },\r\n  {\r\n    id: \"ls2jg6ct\",\r\n    number: 40,\r\n  },\r\n  {\r\n    id: \"lrlbwtxn\",\r\n    number: 39,\r\n  },\r\n  {\r\n    id: \"lr3uz1d8\",\r\n    number: 38,\r\n  },\r\n  {\r\n    id: \"lqa43ghl\",\r\n    number: 37,\r\n  },\r\n  {\r\n    id: \"lq63jr4t\",\r\n    number: 36,\r\n  },\r\n  {\r\n    id: \"lphkfmue\",\r\n    number: 35,\r\n  },\r\n  {\r\n    id: \"lorujl6k\",\r\n    number: 34,\r\n  },\r\n  {\r\n    id: \"lo3dbb57\",\r\n    number: 33,\r\n  },\r\n  {\r\n    id: \"lncmwv1g\",\r\n    number: 32,\r\n  },\r\n  {\r\n    id: \"lndqbo35\",\r\n    number: 31,\r\n  },\r\n  {\r\n    id: \"lmpnzhq6\",\r\n    number: 30,\r\n  },\r\n  {\r\n    id: \"lm77zack\",\r\n    number: 29,\r\n  },\r\n  {\r\n    id: \"lleh5fpm\",\r\n    number: 28,\r\n  },\r\n  {\r\n    id: \"ll1f7vl8\",\r\n    number: 27,\r\n  },\r\n  {\r\n    id: \"lkj6emus\",\r\n    number: 26,\r\n  },\r\n  {\r\n    id: \"ljxai1s8\",\r\n    number: 25,\r\n  },\r\n  {\r\n    id: \"ljetrjjf\",\r\n    number: 24,\r\n  },\r\n  {\r\n    id: \"lisaoa37\",\r\n    number: 23,\r\n  },\r\n  {\r\n    id: \"lhzbbljg\",\r\n    number: 22,\r\n  },\r\n  {\r\n    id: \"lhgt6hxj\",\r\n    number: 21,\r\n  },\r\n  {\r\n    id: \"lgzmgxif\",\r\n    number: 20,\r\n  },\r\n  {\r\n    id: \"lgli8qmt\",\r\n    number: 19,\r\n  },\r\n  {\r\n    id: \"lg1ioh3o\",\r\n    number: 18,\r\n  },\r\n  {\r\n    id: \"lfbp5rsx\",\r\n    number: 17,\r\n  },\r\n  {\r\n    id: \"lenh39dp\",\r\n    number: 16,\r\n  },\r\n  {\r\n    id: \"ledh1q44\",\r\n    number: 15,\r\n  },\r\n  {\r\n    id: \"ldkqe7g6\",\r\n    number: 14,\r\n  },\r\n  {\r\n    id: \"ld2c7egr\",\r\n    number: 13,\r\n  },\r\n  {\r\n    id: \"lcjmdijk\",\r\n    number: 12,\r\n  },\r\n  {\r\n    id: \"lbn286o5\",\r\n    number: 11,\r\n  },\r\n  {\r\n    id: \"lbei2nd1\",\r\n    number: 10,\r\n  },\r\n  {\r\n    id: \"lau3vdb5\",\r\n    number: 9,\r\n  },\r\n  {\r\n    id: \"labw9mm1\",\r\n    number: 8,\r\n  },\r\n  {\r\n    id: \"l9qakvod\",\r\n    number: 7,\r\n  },\r\n  {\r\n    id: \"l9dkq0ma\",\r\n    number: 6,\r\n  },\r\n  {\r\n    id: \"l8t9h7wa\",\r\n    number: 5,\r\n  },\r\n  {\r\n    id: \"l884uw8u\",\r\n    number: 4,\r\n  },\r\n  {\r\n    id: \"l7i90j39\",\r\n    number: 3,\r\n  },\r\n  {\r\n    id: \"l76rtr72\",\r\n    number: 2,\r\n  },\r\n  {\r\n    id: \"l6efnna0\",\r\n    number: 1,\r\n  },\r\n];\r\n\r\nexport default ctIds;\r\n","import LeastCashCalculator from \"./LeastCashCalculator\";\r\nexport default LeastCashCalculator;\r\n","import leastCashImage from \"images/misc/least_cash_s.webp\";\r\nimport { RelicList } from \"components/RelicList\";\r\nimport { TileSelector } from \"components/TileSelector\";\r\nimport { useCtData } from \"hooks/useCtData\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useTowerCostData } from \"hooks/useTowerCostData\";\r\nimport { TowerPath, difficultyMultiplers } from \"types/costs\";\r\nimport { towerImages } from \"util/formatters\";\r\nimport { Relic, Tower } from \"types/ct\";\r\nimport {\r\n  TowerType,\r\n  formatGameEntityName,\r\n  roundEven5,\r\n  towerTypes,\r\n} from \"util/converters\";\r\nimport { SolutionManager } from \"components/SolutionManager\";\r\nimport { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { useLeaderboard } from \"hooks/useLeaderboard\";\r\nimport ctIds from \"configs/ctIds.config\";\r\nimport { useCtEventRelics } from \"hooks/useCtEventRelics\";\r\nimport { useHeroCostData } from \"hooks/useHeroCostData\";\r\n\r\nconst LeastCashCalculator: React.FC = () => {\r\n  const [eventNum, setEventNum] = useState<number>(ctIds[0].number);\r\n\r\n  const { data: ctData, loading: ctLoading } = useCtData(eventNum);\r\n  const { data: eventRelics, loading: eventRelicsLoading } =\r\n    useCtEventRelics(eventNum);\r\n\r\n  const { data: costData, loading: costLoading } = useTowerCostData();\r\n  const { data: heroCostData, loading: heroCostLoading } = useHeroCostData();\r\n  const [selectedTile, setSelectedTile] = useState(\"\");\r\n  const [selectedRelics, setSelectedRelics] = useState<Relic[]>([]);\r\n\r\n  const [targetScore, setTargetScore] = useState(0);\r\n  const [towerLimit, setTowerLimit] = useState(2);\r\n  const [limitExclusive, setLimitExclusive] = useState(false);\r\n  const [hideUnaffordable, setHideUnaffordable] = useState(true);\r\n  const [showHeroSolutions, setShowHeroSolutions] = useState(false);\r\n\r\n  const [solutions, setSolutions] = useState<TowerPath[][]>([]);\r\n  const [solutionTile, setSolutionTile] = useState(\"\");\r\n  const [solutionCtNum, setSolutionCtNum] = useState(0);\r\n  const [calculating, setCalculating] = useState(false);\r\n\r\n  const [includedTowers, setIncludedTowers] = useState<Tower[]>([]);\r\n  const [excludedTowers, setExcludedTowers] = useState<Tower[]>([]);\r\n\r\n  const [includedHeroes, setIncludedHeroes] = useState<Tower[]>([]);\r\n  const [excludedHeroes, setExcludedHeroes] = useState<Tower[]>([]);\r\n\r\n  const [towerFilters, setTowerFilters] = useState<TowerPath[]>([]);\r\n\r\n  const SOLUTION_HARD_CAP = 2000;\r\n\r\n  const loading =\r\n    ctLoading || costLoading || heroCostLoading || eventRelicsLoading;\r\n\r\n  const changeTile = (tile: string) => {\r\n    setSelectedTile(tile);\r\n    console.log(ctData[tile]);\r\n    if (\r\n      ctData[tile].GameData.dcModel.towers._items\r\n        .filter((x) => !x.isHero && x.max !== 0)\r\n        .find((x) => x.tower === \"MonkeyVillage\")\r\n    ) {\r\n      console.log(\r\n        \"uh oh... a village tile! that'll cause issues with calculations\"\r\n      );\r\n    }\r\n\r\n    if (\r\n      ctData[tile].GameData.dcModel.towers._items\r\n        .filter((x) => x.isHero && x.max !== 0)\r\n        .find((x) => x.tower === \"Geraldo\")\r\n    ) {\r\n      console.log(\r\n        \"uh oh... a geraldo tile! that bozo has a bunch of items that cost cash! luckily all of his things cost the same at every level. HOWEVER, i am too lazy to implement that atm\"\r\n      );\r\n    }\r\n\r\n    setTowerFilters([]);\r\n    setIncludedTowers([]);\r\n    setExcludedTowers([]);\r\n    setIncludedHeroes([]);\r\n    setExcludedHeroes([]);\r\n  };\r\n\r\n  const handleRelicFilterClick = (relic: Relic) => {\r\n    const newRelics = [...selectedRelics];\r\n    if (newRelics.includes(relic)) {\r\n      newRelics.splice(newRelics.indexOf(relic), 1);\r\n    } else {\r\n      newRelics.push(relic);\r\n    }\r\n    console.log(newRelics);\r\n    setSelectedRelics(newRelics);\r\n  };\r\n\r\n  const addIncludedHero = (hero: Tower) => {\r\n    const newIncludedHeroes = [...includedHeroes];\r\n\r\n    if (newIncludedHeroes.includes(hero)) {\r\n      return;\r\n    }\r\n\r\n    newIncludedHeroes.push(hero);\r\n    console.log(newIncludedHeroes);\r\n    setIncludedHeroes(newIncludedHeroes);\r\n  };\r\n\r\n  const removeIncludedHero = (index: number) => {\r\n    const newIncludedHeroes = [...includedHeroes];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newIncludedHeroes.splice(index, 1);\r\n    }\r\n    console.log(newIncludedHeroes);\r\n    setIncludedHeroes(newIncludedHeroes);\r\n  };\r\n\r\n  const addExcludedHero = (hero: Tower) => {\r\n    const newExcludedHeroes = [...excludedHeroes];\r\n\r\n    if (newExcludedHeroes.includes(hero)) {\r\n      return;\r\n    }\r\n\r\n    newExcludedHeroes.push(hero);\r\n    console.log(newExcludedHeroes);\r\n    setExcludedHeroes(newExcludedHeroes);\r\n  };\r\n\r\n  const removeExcludedHero = (index: number) => {\r\n    const newExcludedHeroes = [...excludedHeroes];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newExcludedHeroes.splice(index, 1);\r\n    }\r\n    console.log(newExcludedHeroes);\r\n    setExcludedHeroes(newExcludedHeroes);\r\n  };\r\n\r\n  const addExcludedTower = (tower: Tower) => {\r\n    const newExcludedTowers = [...excludedTowers];\r\n\r\n    if (newExcludedTowers.includes(tower)) {\r\n      return;\r\n    }\r\n\r\n    newExcludedTowers.push(tower);\r\n    console.log(newExcludedTowers);\r\n    setExcludedTowers(newExcludedTowers);\r\n  };\r\n\r\n  const removeExcludedTower = (index: number) => {\r\n    const newExcludedTowers = [...excludedTowers];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newExcludedTowers.splice(index, 1);\r\n    }\r\n    console.log(newExcludedTowers);\r\n    setExcludedTowers(newExcludedTowers);\r\n  };\r\n\r\n  const addTowerFilter = (tower: Tower) => {\r\n    const newTowerFilters = [...towerFilters];\r\n    const path = (document.getElementById(`${tower}-path`) as HTMLSelectElement)\r\n      .value;\r\n\r\n    const pathNums: number[] = path.split(\"\").map(Number);\r\n\r\n    if (!path) {\r\n      const newIncludedTowers = [...includedTowers];\r\n\r\n      if (newIncludedTowers.includes(tower)) {\r\n        return;\r\n      }\r\n\r\n      newIncludedTowers.push(tower);\r\n      console.log(newIncludedTowers);\r\n      setIncludedTowers(newIncludedTowers);\r\n      return;\r\n    }\r\n\r\n    // Reject invalid paths. e.g. 530, 444, 522, etc.\r\n    const validPath = [pathNums]\r\n      .filter((ps) => ps.filter((p) => p > 2).length <= 1) // more than one primary path\r\n      .filter((ps) => ps.filter((p) => p === 0).length > 0) // all three paths upgraded\r\n      .filter((ps) => ps.filter((p) => p > 5).length === 0) // higher than tier 5\r\n      .flatMap((p) => p);\r\n\r\n    console.log(validPath);\r\n    if (validPath.length === 0) {\r\n      console.log(\"INVALID PATH\");\r\n      return;\r\n    }\r\n\r\n    newTowerFilters.push({ name: tower, path: path, cost: -1 });\r\n    console.log(newTowerFilters);\r\n    setTowerFilters(newTowerFilters);\r\n  };\r\n\r\n  const removeTowerFilter = (index: number) => {\r\n    const newTowerFilters = [...towerFilters];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newTowerFilters.splice(index, 1);\r\n    }\r\n    console.log(newTowerFilters);\r\n    setTowerFilters(newTowerFilters);\r\n  };\r\n\r\n  const removeIncludedTower = (index: number) => {\r\n    const newIncludedTowers = [...includedTowers];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newIncludedTowers.splice(index, 1);\r\n    }\r\n    console.log(newIncludedTowers);\r\n    setIncludedTowers(newIncludedTowers);\r\n  };\r\n\r\n  const handleCalculateClick = async () => {\r\n    setCalculating(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (calculating) {\r\n      setTimeout(() => {\r\n        calculateReverseCash();\r\n      }, 1);\r\n    }\r\n  }, [calculating]);\r\n\r\n  const handleScoreChange = (e: any) => {\r\n    const re = /^[0-9\\b]*$/;\r\n\r\n    // if value is not blank, then test the regex\r\n    const value: string = e.target.value;\r\n\r\n    if (value === \"\" || re.test(value)) {\r\n      setTargetScore(Number(value));\r\n    }\r\n  };\r\n\r\n  const handleLimitChange = (e: any) => {\r\n    const value: number = e.target.value;\r\n    setTowerLimit(value);\r\n  };\r\n\r\n  // Thanks Josh Cheek (Spike Factory) for assistance with this.\r\n  const calculateReverseCash = () => {\r\n    const upgradePaths = [];\r\n    const tileTowers = ctData[\r\n      selectedTile\r\n    ].GameData.dcModel.towers._items.filter((x) => !x.isHero && x.max !== 0);\r\n    const tileHeroes = ctData[\r\n      selectedTile\r\n    ].GameData.dcModel.towers._items.filter((x) => x.isHero && x.max !== 0);\r\n    console.log(tileTowers);\r\n\r\n    // Cost, upgrade, and limit count modifications.\r\n    const monkeyTycoonMod = selectedRelics.includes(\"MonkeyTycoon\") ? 1 : 0;\r\n    const marchingBootsMod = selectedRelics.includes(\"MarchingBoots\") ? 1 : 0;\r\n    const startingStashMod = selectedRelics.includes(\"StartingStash\") ? 250 : 0;\r\n\r\n    const relicMod = monkeyTycoonMod + marchingBootsMod;\r\n    // Initialize with difficulty multiplier.\r\n    const priceMults: [\r\n      { towerType: TowerType | \"all\"; costMultipiler: number }\r\n    ] = [\r\n      {\r\n        towerType: \"all\",\r\n        costMultipiler:\r\n          difficultyMultiplers[\r\n            ctData[selectedTile].GameData\r\n              .selectedDifficulty as keyof typeof difficultyMultiplers\r\n          ],\r\n      },\r\n    ];\r\n\r\n    // Relic price reductions.\r\n    if (selectedRelics.includes(\"AirAndSea\")) {\r\n      priceMults.push({ towerType: \"military\", costMultipiler: 0.95 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"MilitaryMonkeys\")) {\r\n      priceMults.push({ towerType: \"military\", costMultipiler: 0.92 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"MagicMonkeys\")) {\r\n      priceMults.push({ towerType: \"magic\", costMultipiler: 0.92 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"MonkeyTycoon\")) {\r\n      priceMults.push({ towerType: \"all\", costMultipiler: 0.96 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"PrimaryPrimates\")) {\r\n      priceMults.push({ towerType: \"primary\", costMultipiler: 0.92 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"SupportSimians\")) {\r\n      priceMults.push({ towerType: \"support\", costMultipiler: 0.92 });\r\n    }\r\n\r\n    console.log(priceMults);\r\n    console.log(heroCostData);\r\n\r\n    // Push a combination of ways to produce tower upgrades.\r\n    // Oh boy! 3 Nested for loops, I'm cooked!\r\n    for (let t = 0; t < 6; t++) {\r\n      for (let m = 0; m < 6; m++) {\r\n        for (let b = 0; b < 6; b++) {\r\n          upgradePaths.push([t, m, b]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reject the duplicates.\r\n    const uniquePaths = upgradePaths.filter((value, index, self) => {\r\n      return self.indexOf(value) === index;\r\n    });\r\n\r\n    // Reject invalid paths. e.g. 530, 444, 522, etc.\r\n    const validPaths = uniquePaths\r\n      .filter((ps) => ps.filter((p) => p > 2).length <= 1) // more than one primary path\r\n      .filter((ps) => ps.filter((p) => p === 0).length > 0) // all three paths upgraded\r\n      .sort();\r\n\r\n    if (selectedTile !== \"\") {\r\n      setSolutionTile(selectedTile);\r\n      setSolutionCtNum(eventNum);\r\n      const purchasables: TowerPath[] = validPaths\r\n        .flatMap((path) => {\r\n          return Object.entries(costData).flatMap(([name, prices]) => {\r\n            if (!tileTowers.find((tower) => name.includes(tower.tower))) {\r\n              return { name: name as Tower, path: \"\", cost: -1 };\r\n            }\r\n            const towerType = towerTypes[name as keyof typeof towerTypes];\r\n            const [top, mid, bot] = path;\r\n            // Assumed that index 0 is always difficulty multiplier.\r\n            const initialCost = roundEven5(\r\n              prices.cost * priceMults[0].costMultipiler\r\n            );\r\n            let cost =\r\n              initialCost +\r\n              Array.from({ length: top + 1 }, (_, i) => {\r\n                let total = 0;\r\n                for (let j = 0; j < priceMults.length; j++) {\r\n                  if (\r\n                    priceMults[j].towerType === \"all\" ||\r\n                    towerType === priceMults[j].towerType\r\n                  )\r\n                    total +=\r\n                      roundEven5(\r\n                        prices.upgrades.top_path[i] *\r\n                          priceMults[j].costMultipiler\r\n                      ) || 0;\r\n                }\r\n                return total;\r\n              }).reduce((a, b) => a + b, 0);\r\n            cost += Array.from({ length: mid + 1 }, (_, i) => {\r\n              let total = 0;\r\n              for (let j = 0; j < priceMults.length; j++) {\r\n                if (\r\n                  priceMults[j].towerType === \"all\" ||\r\n                  towerType === priceMults[j].towerType\r\n                )\r\n                  total +=\r\n                    roundEven5(\r\n                      prices.upgrades.middle_path[i] *\r\n                        priceMults[j].costMultipiler\r\n                    ) || 0;\r\n              }\r\n              return total;\r\n            }).reduce((a, b) => a + b, 0);\r\n            cost += Array.from({ length: bot + 1 }, (_, i) => {\r\n              let total = 0;\r\n              for (let j = 0; j < priceMults.length; j++) {\r\n                if (\r\n                  priceMults[j].towerType === \"all\" ||\r\n                  towerType === priceMults[j].towerType\r\n                )\r\n                  total +=\r\n                    roundEven5(\r\n                      prices.upgrades.bottom_path[i] *\r\n                        priceMults[j].costMultipiler\r\n                    ) || 0;\r\n              }\r\n\r\n              return total;\r\n            }).reduce((a, b) => a + b, 0);\r\n\r\n            // Apply a Box of Monkey purchasable, if selected.\r\n            // The idea here is to make a duplicate tower entry with a modified cost and add a \"boxOfMonkey\" flag to it.\r\n            // This way a designer can add a visual flag to any tower with a Box of Monkey application.\r\n            if (selectedRelics.includes(\"BoxOfMonkey\") && initialCost <= 400) {\r\n              return [\r\n                {\r\n                  name: name as Tower,\r\n                  path: path.join(\"\"),\r\n                  cost: cost,\r\n                },\r\n                {\r\n                  name: name as Tower,\r\n                  path: path.join(\"\"),\r\n                  cost: cost - initialCost,\r\n                  boxOfMonkey: true,\r\n                },\r\n              ];\r\n            } else {\r\n              return [\r\n                {\r\n                  name: name as Tower,\r\n                  path: path.join(\"\"),\r\n                  cost: cost,\r\n                },\r\n              ];\r\n            }\r\n          });\r\n        })\r\n        .concat(\r\n          tileHeroes.map((x) => {\r\n            return {\r\n              name: x.tower,\r\n              path: \"\",\r\n              cost: heroCostData[x.tower].cost,\r\n              isHero: true,\r\n            };\r\n          })\r\n        )\r\n        .filter((a) => {\r\n          // Remove any undefined towers and towers that cost more than the target score.\r\n          return a.cost > 0 && a.cost <= targetScore;\r\n        })\r\n        // Sort in descending order of cost to hopefully get high power tower combinations first.\r\n        .sort((a, b) => b.cost - a.cost);\r\n\r\n      console.log(purchasables);\r\n      const newSolutions: TowerPath[][] = [];\r\n      // Push any of the applied tower filters to the solution, then check if the price works.\r\n      // For the price, calculate the filter(s) price, subtract from the provided score, run the calculator on that subtracted score.\r\n      const startTowers: TowerPath[] = [];\r\n      towerFilters.map((tower) => {\r\n        const pathWithCost = purchasables.find(\r\n          (p) => p.name === tower.name && p.path === tower.path\r\n        );\r\n\r\n        if (pathWithCost) startTowers.push(pathWithCost);\r\n      });\r\n\r\n      const startPrice = startTowers.reduce((a, b) => a + b.cost, 0);\r\n      findTowers({\r\n        targetPrice: targetScore - startPrice,\r\n        potentialTowers: purchasables,\r\n        towerLimit:\r\n          towerLimit -\r\n          (startTowers.length > towerLimit ? towerLimit : startTowers.length),\r\n        perTowerLimits: tileTowers\r\n          .map((tileTower) => {\r\n            return {\r\n              name: tileTower.tower,\r\n              remaining:\r\n                tileTower.max +\r\n                relicMod -\r\n                startTowers.filter((x) => x.name === tileTower.tower).length,\r\n              isHero: false,\r\n            };\r\n          })\r\n          .concat(\r\n            tileHeroes.map((tileHero) => {\r\n              return {\r\n                name: tileHero.tower,\r\n                remaining: tileHero.max,\r\n                isHero: true,\r\n              };\r\n            })\r\n          ),\r\n        block: (solution: TowerPath[]) => {\r\n          if (solution.length >= 0) {\r\n            newSolutions.push(startTowers.concat(solution));\r\n          }\r\n        },\r\n      });\r\n      console.log(newSolutions);\r\n\r\n      // The filter removes any towers that cannot be afforded at the start.\r\n      // Potentially add this as a toggle for relics like SMS and Road Spikes.\r\n      if (hideUnaffordable) {\r\n        setSolutions(\r\n          newSolutions\r\n            .filter(\r\n              (x) =>\r\n                x.filter((x) => {\r\n                  const cost =\r\n                    costData[x.name]?.cost ?? heroCostData[x.name]?.cost;\r\n                  return (\r\n                    cost <\r\n                    ctData[selectedTile].GameData.dcModel.startRules.cash +\r\n                      startingStashMod\r\n                  );\r\n                }).length !== 0\r\n            )\r\n            .sort((a, b) => a.length - b.length)\r\n        );\r\n      } else {\r\n        setSolutions(newSolutions.sort((a, b) => a.length - b.length));\r\n      }\r\n      setCalculating(false);\r\n    }\r\n  };\r\n\r\n  type findTowersProps = {\r\n    targetPrice: number;\r\n    potentialTowers: TowerPath[];\r\n    towerLimit: number;\r\n    perTowerLimits: {\r\n      name: string;\r\n      remaining: number;\r\n      isHero: boolean;\r\n    }[];\r\n    block: (solution: TowerPath[]) => void;\r\n  };\r\n\r\n  let solutionsFound = 0;\r\n  const findTowers = ({\r\n    targetPrice,\r\n    potentialTowers,\r\n    towerLimit,\r\n    perTowerLimits,\r\n    block,\r\n  }: findTowersProps) => {\r\n    if (!block) {\r\n      return;\r\n    }\r\n\r\n    // End cases.\r\n    if (targetPrice === 0) {\r\n      // We found the solution.\r\n      if (limitExclusive && towerLimit !== 0) {\r\n        // Our solution had below the desired number of towers in the solution.\r\n        return;\r\n      }\r\n      solutionsFound++;\r\n      // Need to add the starter towers to this solution array.\r\n      block([]);\r\n      return;\r\n    } else if (targetPrice < 0) {\r\n      // We went too far, quit.\r\n      return;\r\n    } else if (towerLimit === 0) {\r\n      // We used too many towers, quit.\r\n      return;\r\n    } else if (potentialTowers.length === 0) {\r\n      // We ran out of towers to place, quit.\r\n      return;\r\n    } else if (solutionsFound >= SOLUTION_HARD_CAP) {\r\n      // We hit the hard cap of solutions to generate.\r\n      return;\r\n    }\r\n\r\n    const [tower, ...remainingTowers] = potentialTowers;\r\n\r\n    const { name, cost, boxOfMonkey } = tower;\r\n\r\n    // Handle tower limits.\r\n    const towerLimitIndex = perTowerLimits.findIndex((a) =>\r\n      name.includes(a.name)\r\n    );\r\n\r\n    if (\r\n      perTowerLimits[towerLimitIndex].remaining !== 0 &&\r\n      !excludedTowers.includes(name) &&\r\n      !excludedHeroes.includes(name)\r\n    ) {\r\n      findTowers({\r\n        targetPrice: targetPrice - cost,\r\n        // Once we find a Box of Monkey tower, remove it, because we don't want other\r\n        // Box of Monkey towers in the solution. That's not how the relic works :).\r\n        potentialTowers: potentialTowers.filter((x) =>\r\n          boxOfMonkey ? !x.boxOfMonkey : true\r\n        ),\r\n        towerLimit: towerLimit - 1,\r\n        perTowerLimits: perTowerLimits.map((a) =>\r\n          // No more heroes after one.\r\n          a.isHero && tower.isHero\r\n            ? { ...a, remaining: 0 }\r\n            : a.name === name\r\n            ? { ...a, remaining: a.remaining - 1 }\r\n            : a\r\n        ),\r\n        block: (solution: TowerPath[]) => {\r\n          block([tower, ...solution]);\r\n        },\r\n      });\r\n    }\r\n\r\n    findTowers({\r\n      targetPrice: targetPrice,\r\n      potentialTowers: remainingTowers,\r\n      towerLimit: towerLimit,\r\n      perTowerLimits,\r\n      block: (solution: TowerPath[]) => {\r\n        block([...solution]);\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex w-full flex-col items-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Least Cash Reverse Calculator\r\n      </p>\r\n      <div className=\"flex flex-col gap-4 items-center\">\r\n        <label className=\"input input-bordered flex items-center gap-2\">\r\n          <img src={leastCashImage} className=\"w-[24px]\" />\r\n          <input\r\n            className=\"font-semibold text-2xl max-w-40\"\r\n            type=\"text\"\r\n            inputMode=\"numeric\"\r\n            placeholder=\"Score\"\r\n            value={targetScore}\r\n            onChange={handleScoreChange}\r\n          />\r\n        </label>\r\n        <div className=\"flex items-center gap-4\">\r\n          <p className=\"text-nowrap\">Select a CT event:</p>\r\n          <select\r\n            id=\"ct-select\"\r\n            className=\"select select-bordered w-full max-w-xs\"\r\n            onChange={(e) => {\r\n              console.log(e.target.options.selectedIndex);\r\n            }}\r\n            value={eventNum}\r\n          >\r\n            {ctIds.map((x) => (\r\n              <option\r\n                key={x.number}\r\n                value={x.number}\r\n                onClick={() => setEventNum(x.number)}\r\n              >\r\n                {x.number} ({x.id})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"flex gap-4 items-center\">\r\n          {/* Open the modal using document.getElementById('ID').showModal() method */}\r\n          <button\r\n            className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n            onClick={() =>\r\n              (\r\n                document.getElementById(\"hero-modal\") as HTMLFormElement\r\n              ).showModal()\r\n            }\r\n            // disabled={\r\n            //   ctData[selectedTile].GameData.dcModel.towers._items.filter(\r\n            //     (x) => x.isHero && x.max !== 0\r\n            //   ).length === 0\r\n            // }\r\n          >\r\n            Heroes\r\n          </button>\r\n          <dialog id=\"hero-modal\" className=\"modal\">\r\n            <div className=\"modal-box max-w-3xl\">\r\n              <h3 className=\"font-bold text-lg text-primary\">Hero Filters</h3>\r\n              <p className=\"py-4\">\r\n                Add any heroes you want the calculation to <u>ALWAYS</u>{\" \"}\r\n                consider.{\" \"}\r\n                <i>Note that bought hero levels are not calculated in this.</i>\r\n              </p>\r\n              <div className=\"\">\r\n                <div className=\"flex w-full gap-4\">\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                    <p className=\"font-semibold\">Included Heroes</p>\r\n                    <div className=\"indicator items-center w-full px-12 py-4 gap-6 flex-wrap\">\r\n                      {includedHeroes.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeIncludedHero(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[tower as keyof typeof towerImages]\r\n                            }\r\n                            key={`${tower}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                    <p className=\"font-semibold\">Excluded Heroes</p>\r\n                    <div className=\"indicator items-center w-full px-12 py-4 gap-6 flex-wrap\">\r\n                      {excludedHeroes.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeExcludedHero(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[tower as keyof typeof towerImages]\r\n                            }\r\n                            key={`${tower}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"gap-y-2 flex flex-wrap my-4 w-full\">\r\n                  {selectedTile\r\n                    ? Object.entries(\r\n                        ctData[\r\n                          selectedTile\r\n                        ].GameData.dcModel.towers._items.filter(\r\n                          (x) => x.isHero && x.max !== 0\r\n                        )\r\n                      ).map((tower) => (\r\n                        <div className={\"basis-1/2 px-4\"} key={tower[0]}>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <img\r\n                              src={\r\n                                towerImages[\r\n                                  tower[1].tower as keyof typeof towerImages\r\n                                ]\r\n                              }\r\n                              className=\"w-[28px]\"\r\n                            />\r\n\r\n                            <span className=\"label-text grow\">\r\n                              {formatGameEntityName(tower[1].tower as string)}\r\n                            </span>\r\n                            <button\r\n                              className=\"btn outline outline-1\"\r\n                              onClick={() => addIncludedHero(tower[1].tower)}\r\n                              disabled={excludedHeroes.includes(tower[1].tower)}\r\n                            >\r\n                              +\r\n                            </button>\r\n                            <button\r\n                              className=\"btn outline outline-1 outline-error text-error\"\r\n                              onClick={() => addExcludedHero(tower[1].tower)}\r\n                              disabled={includedHeroes.includes(tower[1].tower)}\r\n                            >\r\n                              x\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    : null}\r\n                </div>\r\n              </div>\r\n              <div className=\"modal-action\">\r\n                <form method=\"dialog\">\r\n                  {/* if there is a button in form, it will close the modal */}\r\n                  <button className=\"btn outline outline-1 outline-error text-error\">\r\n                    Close\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <form method=\"dialog\" className=\"modal-backdrop\">\r\n              <button>close</button>\r\n            </form>\r\n          </dialog>\r\n          {/* Open the modal using document.getElementById('ID').showModal() method */}\r\n          <button\r\n            className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n            onClick={() =>\r\n              (\r\n                document.getElementById(\"tower-modal\") as HTMLFormElement\r\n              ).showModal()\r\n            }\r\n          >\r\n            Towers\r\n          </button>\r\n          <dialog id=\"tower-modal\" className=\"modal\">\r\n            <div className=\"modal-box max-w-3xl\">\r\n              <h3 className=\"font-bold text-lg text-primary\">Tower Filters</h3>\r\n              <p className=\"py-4\">\r\n                Add any towers and paths you want the calculation to{\" \"}\r\n                <u>ALWAYS</u> consider.\r\n              </p>\r\n              <div className=\"\">\r\n                <div className=\"flex w-full gap-4\">\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                    <p className=\"font-semibold\">Included Towers</p>\r\n                    <div className=\"indicator items-center w-full px-12 py-4 gap-6 flex-wrap\">\r\n                      {includedTowers.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeIncludedTower(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[tower as keyof typeof towerImages]\r\n                            }\r\n                            key={`${tower}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                      {towerFilters.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeTowerFilter(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[\r\n                                tower.name as keyof typeof towerImages\r\n                              ]\r\n                            }\r\n                            indicator={tower.path}\r\n                            key={`${tower.path} ${tower.name}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                    <p className=\"font-semibold\">Excluded Towers</p>\r\n                    <div className=\"indicator items-center w-full px-12 py-4 gap-6 flex-wrap\">\r\n                      {excludedTowers.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeExcludedTower(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[tower as keyof typeof towerImages]\r\n                            }\r\n                            key={`${tower}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"gap-y-2 flex flex-wrap my-4 w-full\">\r\n                  {selectedTile\r\n                    ? Object.entries(\r\n                        ctData[\r\n                          selectedTile\r\n                        ].GameData.dcModel.towers._items.filter(\r\n                          (x) => !x.isHero && x.max !== 0\r\n                        )\r\n                      ).map((tower) => (\r\n                        <div className={\"basis-1/2 px-4\"} key={tower[0]}>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <img\r\n                              src={\r\n                                towerImages[\r\n                                  tower[1].tower as keyof typeof towerImages\r\n                                ]\r\n                              }\r\n                              className=\"w-[28px]\"\r\n                            />\r\n\r\n                            <span className=\"label-text grow\">\r\n                              {formatGameEntityName(tower[1].tower as string)}\r\n                            </span>\r\n                            <label className=\"input input-bordered flex max-w-16\">\r\n                              <input\r\n                                className=\"font-normal w-full\"\r\n                                placeholder=\"000\"\r\n                                maxLength={3}\r\n                                id={`${tower[1].tower}-path`}\r\n                              />\r\n                            </label>\r\n                            <button\r\n                              className=\"btn outline outline-1\"\r\n                              onClick={() => addTowerFilter(tower[1].tower)}\r\n                              disabled={excludedTowers.includes(tower[1].tower)}\r\n                            >\r\n                              +\r\n                            </button>\r\n                            <button\r\n                              className=\"btn outline outline-1 outline-error text-error\"\r\n                              onClick={() => addExcludedTower(tower[1].tower)}\r\n                              disabled={\r\n                                includedTowers.includes(tower[1].tower) ||\r\n                                towerFilters.some(\r\n                                  (x) => x.name === tower[1].tower\r\n                                )\r\n                              }\r\n                            >\r\n                              x\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    : null}\r\n                </div>\r\n              </div>\r\n              <div className=\"modal-action\">\r\n                <form method=\"dialog\">\r\n                  {/* if there is a button in form, it will close the modal */}\r\n                  <button className=\"btn outline outline-1 outline-error text-error\">\r\n                    Close\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <form method=\"dialog\" className=\"modal-backdrop\">\r\n              <button>close</button>\r\n            </form>\r\n          </dialog>\r\n          <details className=\"dropdown\">\r\n            <summary\r\n              className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n            >\r\n              Filters\r\n            </summary>\r\n            <ul className=\"py-4 shadow-xl menu dropdown-content z-[51] bg-base-100 rounded-box w-64 outline outline-white/25 outline-1\">\r\n              <li className=\"pointer-events-none\">\r\n                <p className=\"justify-center font-semibold text-lg text-primary\">\r\n                  Hero\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setShowHeroSolutions((old) => !old);\r\n                  }}\r\n                >\r\n                  <p className=\"font-medium text-sm\">\r\n                    Only show solutions with heroes.\r\n                  </p>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={showHeroSolutions}\r\n                    className=\"checkbox checkbox-sm\"\r\n                    readOnly\r\n                  />\r\n                </a>\r\n              </li>\r\n              <li className=\"pointer-events-none\">\r\n                <p className=\"justify-center font-semibold text-lg text-primary\">\r\n                  Tower\r\n                </p>\r\n              </li>\r\n              <div className=\"flex flex-col gap-2 items-center justify-center mx-4\">\r\n                <div className=\"flex gap-2 items-center justify-center mx-4 w-full\">\r\n                  <p className=\"font-medium whitespace-nowrap\">Max Towers:</p>\r\n                  <input\r\n                    type=\"range\"\r\n                    min={1}\r\n                    max={10}\r\n                    value={towerLimit}\r\n                    onChange={handleLimitChange}\r\n                    className=\"range range-xs\"\r\n                  />\r\n                  <p className=\"text-lg font-medium\">{towerLimit}</p>\r\n                </div>\r\n                <i className=\"text-xs text-accent\">Requires recalculation</i>\r\n              </div>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setLimitExclusive((old) => !old);\r\n                  }}\r\n                >\r\n                  <p className=\"font-medium text-sm\">\r\n                    Show solutions with exactly {towerLimit} towers.{\" \"}\r\n                    <i className=\"text-xs text-accent\">\r\n                      Requires recalculation\r\n                    </i>\r\n                  </p>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={limitExclusive}\r\n                    className=\"checkbox checkbox-sm\"\r\n                    readOnly\r\n                  />\r\n                </a>\r\n              </li>\r\n              <li className=\"pointer-events-none\">\r\n                <p className=\"justify-center font-semibold text-lg text-primary\">\r\n                  Miscellaneous\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setHideUnaffordable((old) => !old);\r\n                  }}\r\n                >\r\n                  <p className=\"font-medium text-sm\">\r\n                    Hide initially unaffordable solutions.{\" \"}\r\n                    <i className=\"text-xs text-accent\">\r\n                      Requires recalculation\r\n                    </i>\r\n                  </p>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={hideUnaffordable}\r\n                    className=\"checkbox checkbox-sm\"\r\n                    readOnly\r\n                  />\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </details>\r\n          <button\r\n            className={\r\n              \"btn min-w-24 outline outline-1\" +\r\n              (calculating\r\n                ? \" outline-warning text-warning\"\r\n                : \" outline-success text-success\")\r\n            }\r\n            disabled={selectedTile === \"\"}\r\n            onClick={() => {\r\n              setCalculating(true);\r\n              handleCalculateClick();\r\n            }}\r\n          >\r\n            {calculating ? \"Loading...\" : \"Calculate\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {!loading ? (\r\n        <div className=\"flex gap-2 py-5 w-full\">\r\n          <TileSelector\r\n            data={ctData}\r\n            loading={loading}\r\n            selectedTile={selectedTile}\r\n            changeTile={changeTile}\r\n            relics={selectedRelics}\r\n          />\r\n          <div className=\"divider divider-horizontal\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"10.605\"\r\n              height=\"15.555\"\r\n              className=\"fill-neutral-content overflow-visible\"\r\n            >\r\n              <path d=\"m2.828 15.555 7.777-7.779L2.828 0 0 2.828l4.949 4.948L0 12.727l2.828 2.828z\" />\r\n            </svg>\r\n          </div>\r\n          <RelicList\r\n            data={ctData}\r\n            eventRelics={eventRelics}\r\n            loading={loading}\r\n            relics={selectedRelics}\r\n            handleRelicFilterClick={handleRelicFilterClick}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <span className=\"loading loading-spinner loading-lg\"></span>\r\n      )}\r\n      <div className=\"divider\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"10.605\"\r\n          height=\"15.555\"\r\n          className=\"fill-neutral-content overflow-visible rotate-90\"\r\n        >\r\n          <path d=\"m2.828 15.555 7.777-7.779L2.828 0 0 2.828l4.949 4.948L0 12.727l2.828 2.828z\" />\r\n        </svg>\r\n      </div>\r\n      <SolutionManager\r\n        solutions={solutions.filter(\r\n          (solution) =>\r\n            solution.some(\r\n              (path) =>\r\n                (includedTowers.length === 0 ||\r\n                  includedTowers.includes(path.name)) &&\r\n                (towerFilters.length === 0 ||\r\n                  towerFilters.some(\r\n                    (x) => x.name === path.name && x.path === path.path\r\n                  ))\r\n            ) &&\r\n            solution.every(\r\n              (path) =>\r\n                !excludedTowers.includes(path.name) &&\r\n                !excludedHeroes.includes(path.name)\r\n            ) &&\r\n            solution.some(\r\n              (path) =>\r\n                includedHeroes.length === 0 ||\r\n                includedHeroes.includes(path.name)\r\n            ) &&\r\n            (!showHeroSolutions || solution.some((path) => path.isHero))\r\n        )}\r\n        solutionTile={solutionTile}\r\n        solutionNum={solutionCtNum}\r\n        disableClear={selectedTile === \"\"}\r\n        clearSolutions={() => {\r\n          setSolutionTile(\"\");\r\n          setSolutions([]);\r\n        }}\r\n      />\r\n      <div className=\"divider font-display\">Notes</div>\r\n      <p className=\"text-center\">\r\n        This calculator is experimental! It's not guaranteed to work and things\r\n        could be broken.\r\n        <br />\r\n        Thanks Josh Cheek (Spike Factory) for the base algorithm. Originally\r\n        written in Ruby, then converted to TypeScript by me.\r\n        <br />\r\n        It's possible that the site crashes while doing calculations. All I can\r\n        say right now is be nice with your parameters.\r\n        <br />\r\n        There is a hard cap of 2000 solutions.\r\n        <br />\r\n      </p>\r\n      <div className=\"divider font-display\">Nerdy Stuff</div>\r\n      <p className=\"text-center\"></p>\r\n      <p className=\"font-semibold\">The algorithm works as follows:</p>\r\n      <ul>\r\n        <li>\r\n          - Build data structure (an array) with all possible upgrade paths\r\n          (000, 203, 051, etc.)\r\n        </li>\r\n        <li>\r\n          - Apply prices of available towers to possible upgrade paths, removing\r\n          ones greater than the target score (user input)\r\n        </li>\r\n        <li>- Apply any relic modifers and tower count restrictions</li>\r\n        <li>\r\n          - Generate a ton of combinations (the computation heavy portion)\r\n        </li>\r\n        <li>\r\n          - Display solutions; hopefully ones with 1 or more high power towers\r\n          (tiers 4-5; if applicable)\r\n        </li>\r\n      </ul>\r\n      <div className=\"divider font-display\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeastCashCalculator;\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { CTData, Tile } from \"types/ct\";\r\n\r\nexport const useCtData = (eventId: number) => {\r\n  const url =\r\n    \"https://storage.googleapis.com/btd6-ct-map/events/\" +\r\n    eventId +\r\n    \"/tiles.json\";\r\n\r\n  const [data, setData] = useState<CTData>({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: CTData = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [eventId]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { Relic } from \"types/ct\";\r\n\r\nexport const useCtEventRelics = (eventId: number) => {\r\n  const url =\r\n    \"https://storage.googleapis.com/btd6-ct-map/events/\" +\r\n    eventId +\r\n    \"/event_relics.json\";\r\n  const [data, setData] = useState<Relic[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: Relic[] = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [eventId]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { HeroCostsData, TowerCostsData } from \"types/costs\";\r\n\r\nexport const useTowerCostData = () => {\r\n  const url =\r\n    \"https://raw.githubusercontent.com/hemisemidemipresent/cyberquincy/master/jsons/costs.json\";\r\n  const [data, setData] = useState<TowerCostsData>({} as TowerCostsData);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        Object.entries(jsonData).forEach((obj) => {\r\n          jsonData[\r\n            obj[0]\r\n              .replace(\"druid_monkey\", \"Druid\")\r\n              .replace(/(_\\w)/g, (match) => match[1].toUpperCase()) // Capitalize letters after underscores\r\n              .replace(/^./, (match) => match.toUpperCase())\r\n          ] = jsonData[obj[0]];\r\n          delete jsonData[obj[0]];\r\n        });\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { HeroCostsData } from \"types/costs\";\r\n\r\nexport const useHeroCostData = () => {\r\n  const url =\r\n    \"https://raw.githubusercontent.com/hemisemidemipresent/cyberquincy/master/jsons/heroes.json\";\r\n  const [data, setData] = useState<HeroCostsData>({} as HeroCostsData);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        Object.entries(jsonData).forEach((obj) => {\r\n          jsonData[\r\n            obj[0]\r\n              .replace(\"brickell\", \"AdmiralBrickell\")\r\n              .replace(\"churchill\", \"CaptainChurchill\")\r\n              .replace(\"gwen\", \"Gwendolin\")\r\n              .replace(\"jones\", \"StrikerJones\")\r\n              .replace(\"obyn\", \"ObynGreenfoot\")\r\n              .replace(\"pat\", \"PatFusty\")\r\n              .replace(/(_\\w)/g, (match) => match[1].toUpperCase()) // Capitalize letters after underscores\r\n              .replace(/^./, (match) => match.toUpperCase())\r\n          ] = jsonData[obj[0]];\r\n          delete jsonData[obj[0]];\r\n        });\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { Tower } from \"types/ct\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  ctTeamMedalImages,\r\n  raceMedalImages,\r\n} from \"./formatters\";\r\nimport { EventType } from \"types/events\";\r\nimport ctIds from \"configs/ctIds.config\";\r\n\r\nexport type TowerType = \"primary\" | \"military\" | \"magic\" | \"support\" | \"hero\";\r\n\r\nexport const roundEven5 = (num: number) => {\r\n  if (num % 5 === 2.5) {\r\n    return Math.floor(num / 5) * 5;\r\n  }\r\n  return Math.round(num / 5) * 5;\r\n};\r\n\r\nexport const convertMsToTimeFormat = (ms: number): string => {\r\n  // Calculate the hours, minutes, seconds, and milliseconds\r\n  const hours = Math.floor(ms / 3600000);\r\n  const minutes = Math.floor((ms % 3600000) / 60000);\r\n  const seconds = Math.floor((ms % 60000) / 1000);\r\n  const milliseconds = Math.floor((ms % 1000) / 10); // Extract two digits of milliseconds\r\n\r\n  // Format each part to ensure two digits\r\n  const formattedHours = hours > 0 ? hours.toString().padStart(2, \"0\") : \"\";\r\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\r\n  const formattedSeconds = seconds.toString().padStart(2, \"0\");\r\n  const formattedMilliseconds = milliseconds.toString().padStart(2, \"0\");\r\n\r\n  // Combine and return the formatted string\r\n  return formattedHours\r\n    ? `${formattedHours}:${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`\r\n    : `${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`;\r\n};\r\n\r\nexport const timeAgo = (timestamp: number): string => {\r\n  const now = Date.now();\r\n  const elapsed = now - timestamp;\r\n\r\n  const msPerSecond = 1000;\r\n  const msPerMinute = msPerSecond * 60;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    const seconds = Math.floor(elapsed / msPerSecond);\r\n    return `${seconds} second${seconds !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerHour) {\r\n    const minutes = Math.floor(elapsed / msPerMinute);\r\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerDay) {\r\n    const hours = Math.floor(elapsed / msPerHour);\r\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\r\n  } else {\r\n    const days = Math.floor(elapsed / msPerDay);\r\n    return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\r\n  }\r\n};\r\n\r\nexport const formatGameEntityName = (entity: string): string => {\r\n  const wordsToExclude = [\"or\", \"the\", \"a\", \"of\"];\r\n\r\n  return entity\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space before capitals\r\n    .replace(/\\b(Or|The|A|Of)\\b/g, (match) => match.toLowerCase()); // Lowercase specific words\r\n};\r\n\r\nexport const formatToUpperCase = (entity: string): string => {\r\n  return entity\r\n    .split(\"_\")\r\n    .map((word) => {\r\n      return word.charAt(0).toUpperCase() + word.slice(1);\r\n    })\r\n    .join(\"\");\r\n};\r\n\r\nexport const placeToRaceMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return raceMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return raceMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return raceMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return raceMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return raceMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return raceMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return raceMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return raceMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return raceMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossNormalMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossNormalMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossNormalMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossNormalMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossNormalMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossNormalMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossNormalMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossNormalMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossNormalMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossNormalMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossEliteMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossEliteMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossEliteMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossEliteMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossEliteMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossEliteMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossEliteMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossEliteMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossEliteMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossEliteMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtPlayerMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place <= 25) {\r\n    return ctPlayerMedalImages.diamond;\r\n  } else if (place <= 100) {\r\n    return ctPlayerMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return ctPlayerMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return ctPlayerMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctPlayerMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return ctPlayerMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctPlayerMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtTeamMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return ctTeamMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return ctTeamMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return ctTeamMedalImages.diamond;\r\n  } else if (place <= 25) {\r\n    return ctTeamMedalImages.gold_diamond;\r\n  } else if (place <= 100) {\r\n    return ctTeamMedalImages.double_gold;\r\n  } else if (percentile <= 1) {\r\n    return ctTeamMedalImages.gold_silver;\r\n  } else if (percentile <= 10) {\r\n    return ctTeamMedalImages.double_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctTeamMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctTeamMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const appendOrdinalSuffix = (number: number): string => {\r\n  const j = number % 10;\r\n  const k = number % 100;\r\n  if (j === 1 && k !== 11) {\r\n    return number + \"st\";\r\n  }\r\n  if (j === 2 && k !== 12) {\r\n    return number + \"nd\";\r\n  }\r\n  if (j === 3 && k !== 13) {\r\n    return number + \"rd\";\r\n  }\r\n  return number + \"th\";\r\n};\r\n\r\nexport const convertGameTypeToString = (gameType: number): string => {\r\n  switch (gameType) {\r\n    case 2:\r\n      return \"Race\";\r\n    case 4:\r\n      return \"Boss\";\r\n    case 8:\r\n      return \"LeastCash\";\r\n    case 9:\r\n      return \"LeastTiers\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const towerTypes: { [key in Tower]: TowerType } = {\r\n  Alchemist: \"magic\",\r\n  BananaFarm: \"support\",\r\n  BeastHandler: \"support\",\r\n  BoomerangMonkey: \"primary\",\r\n  BombShooter: \"primary\",\r\n  DartMonkey: \"primary\",\r\n  DartlingGunner: \"military\",\r\n  Druid: \"magic\",\r\n  EngineerMonkey: \"support\",\r\n  GlueGunner: \"primary\",\r\n  HeliPilot: \"military\",\r\n  IceMonkey: \"primary\",\r\n  Mermonkey: \"magic\",\r\n  MonkeyAce: \"military\",\r\n  MonkeyBuccaneer: \"military\",\r\n  MonkeySub: \"military\",\r\n  MonkeyVillage: \"support\",\r\n  MortarMonkey: \"military\",\r\n  NinjaMonkey: \"magic\",\r\n  SniperMonkey: \"military\",\r\n  SpikeFactory: \"support\",\r\n  SuperMonkey: \"magic\",\r\n  TackShooter: \"primary\",\r\n  WizardMonkey: \"magic\",\r\n  // Heroes\r\n  AdmiralBrickell: \"hero\",\r\n  Adora: \"hero\",\r\n  Benjamin: \"hero\",\r\n  CaptainChurchill: \"hero\",\r\n  Corvus: \"hero\",\r\n  Etienne: \"hero\",\r\n  Ezili: \"hero\",\r\n  Geraldo: \"hero\",\r\n  Gwendolin: \"hero\",\r\n  ObynGreenfoot: \"hero\",\r\n  PatFusty: \"hero\",\r\n  Psi: \"hero\",\r\n  Quincy: \"hero\",\r\n  Rosalia: \"hero\",\r\n  Sauda: \"hero\",\r\n  StrikerJones: \"hero\",\r\n  ChosenPrimaryHero: \"hero\",\r\n};\r\n\r\nexport const prettyEventNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Boss\",\r\n  Boss2: \"Boss\",\r\n  Boss3: \"Boss\",\r\n  Boss4: \"Boss\",\r\n  CtPlayer: \"Contested Territory\",\r\n  CtTeam: \"Contested Territory\",\r\n};\r\n\r\nexport const prettyNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Solo\",\r\n  Boss2: \"Duo\",\r\n  Boss3: \"Trio\",\r\n  Boss4: \"Quad\",\r\n  CtPlayer: \"Player\",\r\n  CtTeam: \"Team\",\r\n};\r\n"],"names":["name","id","image","airAndSeaImage","description","boxOfMonkeyImage","magicMonkeysImage","marchingBootsImage","militaryMonkeysImage","monkeyTycoonImage","primaryPrimatesImage","supportSimiansImages","startingStashImage","_ref","data","eventRelics","loading","relics","handleRelicFilterClick","relicList","setRelicList","useState","handleCheck","e","target","useEffect","Object","entries","map","tile","RelicType","push","concat","_jsxs","className","children","_jsx","costInfluencingRelics","relic","includes","src","type","checked","disabled","onChange","indicator","boxOfMonkey","formatGameEntityName","_Fragment","_tile$GameData$dcMode","tileCode","mapImages","GameData","selectedMap","gameTypeImages","subGameType","convertGameTypeToString","selectedDifficulty","dcModel","startRules","cash","toLocaleString","round","endRound","disableSelling","noSellingImage","disableMK","noMkImage","TileType","relicImages","tileImages","towers","_items","filter","x","isHero","max","length","tower","hero","TowerDisplay","towerImages","selectedTile","changeTile","tileFilter","setTileFilter","filteredTileCodes","setFilteredTileCodes","handleFilter","value","handleRelicSelection","document","getElementById","filtered","keys","sort","reduce","key","at","bannerImage","relicImage","blankImage","defaultValue","onClick","TileDisplay","difficultyMultiplers","Easy","Medium","Hard","solution","a","b","cost","i","path","solutions","solutionTile","solutionNum","disableClear","clearSolutions","index","SolutionRow","number","LeastCashCalculator","eventNum","setEventNum","ctIds","ctData","ctLoading","eventId","url","setData","setLoading","useMemo","async","response","fetch","ok","Error","jsonData","json","console","log","error","fetchData","useCtData","eventRelicsLoading","useCtEventRelics","costData","costLoading","useTowerCostData","forEach","obj","replace","match","toUpperCase","heroCostData","heroCostLoading","useHeroCostData","setSelectedTile","selectedRelics","setSelectedRelics","targetScore","setTargetScore","towerLimit","setTowerLimit","limitExclusive","setLimitExclusive","hideUnaffordable","setHideUnaffordable","showHeroSolutions","setShowHeroSolutions","setSolutions","setSolutionTile","solutionCtNum","setSolutionCtNum","calculating","setCalculating","includedTowers","setIncludedTowers","excludedTowers","setExcludedTowers","includedHeroes","setIncludedHeroes","excludedHeroes","setExcludedHeroes","towerFilters","setTowerFilters","setTimeout","calculateReverseCash","upgradePaths","tileTowers","tileHeroes","monkeyTycoonMod","marchingBootsMod","startingStashMod","relicMod","priceMults","towerType","costMultipiler","t","m","validPaths","self","indexOf","ps","p","purchasables","flatMap","prices","find","towerTypes","top","mid","bot","initialCost","roundEven5","Array","from","_","total","j","upgrades","top_path","middle_path","bottom_path","join","newSolutions","startTowers","pathWithCost","startPrice","findTowers","targetPrice","potentialTowers","perTowerLimits","tileTower","remaining","tileHero","block","_costData$x$name$cost","_costData$x$name","_heroCostData$x$name","solutionsFound","_ref2","remainingTowers","towerLimitIndex","findIndex","leastCashImage","inputMode","placeholder","test","Number","options","selectedIndex","showModal","newIncludedHeroes","splice","removeIncludedHero","newExcludedHeroes","removeExcludedHero","addIncludedHero","addExcludedHero","method","newIncludedTowers","removeIncludedTower","newTowerFilters","removeTowerFilter","newExcludedTowers","removeExcludedTower","maxLength","pathNums","split","validPath","addTowerFilter","addExcludedTower","some","old","readOnly","min","handleCalculateClick","TileSelector","xmlns","width","height","d","RelicList","newRelics","SolutionManager","every","num","Math","floor","convertMsToTimeFormat","ms","hours","minutes","seconds","milliseconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","formattedMilliseconds","timeAgo","timestamp","elapsed","Date","now","msPerMinute","msPerSecond","msPerHour","msPerDay","days","entity","toLowerCase","formatToUpperCase","word","charAt","slice","placeToRaceMedal","place","totalEntries","percentile","raceMedalImages","black_diamond","red_diamond","diamond","gold_diamond","double_gold","gold_silver","double_silver","silver","bronze","placeToBossNormalMedal","bossNormalMedalImages","placeToBossEliteMedal","bossEliteMedalImages","placeToCtPlayerMedal","ctPlayerMedalImages","placeToCtTeamMedal","ctTeamMedalImages","appendOrdinalSuffix","k","gameType","Alchemist","BananaFarm","BeastHandler","BoomerangMonkey","BombShooter","DartMonkey","DartlingGunner","Druid","EngineerMonkey","GlueGunner","HeliPilot","IceMonkey","Mermonkey","MonkeyAce","MonkeyBuccaneer","MonkeySub","MonkeyVillage","MortarMonkey","NinjaMonkey","SniperMonkey","SpikeFactory","SuperMonkey","TackShooter","WizardMonkey","AdmiralBrickell","Adora","Benjamin","CaptainChurchill","Corvus","Etienne","Ezili","Geraldo","Gwendolin","ObynGreenfoot","PatFusty","Psi","Quincy","Rosalia","Sauda","StrikerJones","ChosenPrimaryHero","prettyEventNames","Race","Boss","Boss2","Boss3","Boss4","CtPlayer","CtTeam"],"sourceRoot":""}