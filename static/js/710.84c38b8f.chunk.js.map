{"version":3,"file":"static/js/710.84c38b8f.chunk.js","mappings":"oUAyBA,MA2XA,EA3XwBA,IAgBjB,IAADC,EAAA,IAhBmB,YACvBC,EAAW,MACXC,EAAK,MACLC,EAAK,MACLC,EAAK,UACLC,EAAS,MACTC,EAAK,SACLC,GASDR,EACC,MAqFMS,EAAcA,KAClB,IAAIC,EAAc,GACdC,GAAa,EAEjB,OAAQL,GACN,IAAK,OACHI,GAAcE,EAAAA,EAAAA,IAAsBL,GACpC,MACF,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,GACO,aADCF,EAAMQ,YAEVH,GAAcE,EAAAA,EAAAA,IAAsBL,QASpCG,EAAcH,EAAMO,iBAGxB,MACF,IAAK,WACL,IAAK,SACHH,GAAa,EACbD,EACY,IAAVH,IAAwB,EAATA,GAAYO,iBAAmBP,EAAMO,iBAG1D,OACEC,EAAAA,EAAAA,MAAA,KACEC,UACE,kEACEL,EAAaJ,GAAS,EAAIA,GAAS,GACjC,gBACA,eACLU,SAAA,CAEAV,GAAS,EAAI,IAAM,IACnBG,IACC,EAsCR,OACEK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sCAAqCC,SAAA,EAClDF,EAAAA,EAAAA,MAAA,OAEEC,UAAU,6HACVE,MAAO,CACLC,qBACkBC,IAAhBlB,EAAyB,+EAAAmB,OAC0DnB,EAAYoB,UAAS,KACpG,oMAERC,QAASA,KACPC,QAAQC,IAAI,WAADJ,OAAYlB,EAAMuB,SAAU,EACvCT,SAAA,EAEFF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,CAlDjCU,MAClB,IAAIC,EAAQ,GACZ,OAAQtB,GACN,IAAK,OACHsB,GAAQC,EAAAA,EAAAA,IAAiBzB,EAAQ,EAAGC,EAAMyB,aAC1C,MACF,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,QAEDF,EADe,aAAbpB,GACMuB,EAAAA,EAAAA,IACN3B,EAAQ,EACRC,EAAM2B,uBAGAC,EAAAA,EAAAA,IACN7B,EAAQ,EACRC,EAAM2B,sBAGV,MACF,IAAK,SACHJ,GAAQM,EAAAA,EAAAA,IAAmB9B,EAAQ,EAAGC,EAAM8B,kBAC5C,MACF,IAAK,WACHP,GAAQQ,EAAAA,EAAAA,IACNhC,EAAQ,EACRC,EAAMgC,oBAIZ,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,IAAKX,EAAOZ,UAAU,YAAa,EAmBtCW,IACDW,EAAAA,EAAAA,KAAA,KAAGtB,UAAU,cAAaC,UAAEuB,EAAAA,EAAAA,IAAoBpC,EAAQ,SAG1DW,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gCAA+BC,SAAA,EAC5CqB,EAAAA,EAAAA,KAAA,OACEC,SACkBnB,IAAhBlB,EACIA,EAAYuC,UACZ,iHAENzB,UAAU,cAGZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCqB,EAAAA,EAAAA,KAAA,KAAGtB,UAAU,oCAAmCC,SAC7Cd,EAAMuC,cAGT,2FADCvC,EAAMuB,SAELY,EAAAA,EAAAA,KAAA,OACEtB,UAAU,yEACV,iCAAgCC,SACjC,eAIDqB,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,cAMR5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0CAAyCC,SAAA,MACrCG,IAAhBlB,GACCoC,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,0BAAyBC,SACrC2B,OAAOC,KAAKC,EAAAA,IACVC,QACEnB,GACC1B,EAAY8C,aACVC,EAAAA,EAAAA,IAAkBrB,IACf,IAERsB,MAAM,EAAG,GACTC,KAAKvB,IAAK,IAAAwB,EAAA,OACTlD,EAAY8C,aACVC,EAAAA,EAAAA,IAAkBrB,IACf,GACHb,EAAAA,EAAAA,MAAA,OACEC,UAAU,+DACV,cAAAK,OAAagC,EAAAA,GAAgBzB,IAAsBX,SAAA,EAEnDqB,EAAAA,EAAAA,KAAA,OACEC,IACEO,EAAAA,GAAgBlB,GAElBZ,UAAU,cAEZsB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,uEAAsEC,SAGlF,QAHkFmC,EAClFlD,EAAY8C,aACXC,EAAAA,EAAAA,IAAkBrB,WACnB,IAAAwB,EAAAA,EAAI,QAITd,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,GACD,OAIPL,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,oCAKjBD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sDAAqDC,SAAA,CApQpDqC,MACtB,IAAI5C,EAAc,GACd6C,EAAQ,GAEZ,OAAQjD,GACN,IAAK,OACHI,GAAcE,EAAAA,EAAAA,IAAsBT,EAAMqD,OAC1C,MACF,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,OAAQrD,EAAMsD,WAAW,GAAGC,MAC1B,IAAK,YACHhD,GAAcE,EAAAA,EAAAA,IAAsBT,EAAMqD,OAC1C,MACF,IAAK,aACHD,EAAQI,EACRjD,EAAcP,EAAMqD,MAAM1C,iBAC1B,MACF,IAAK,QACHyC,EAAQK,EACRlD,EAAcP,EAAMqD,MAAM1C,iBAC1B,MACF,QACEJ,EAAcP,EAAMqD,MAAM1C,iBAG9B,MACF,IAAK,WACL,IAAK,SACHyC,EAAQM,EACRnD,EAAcP,EAAMqD,MAAM1C,iBAG9B,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0FAAyFC,SAAA,EACtGqB,EAAAA,EAAAA,KAAA,OAAKC,IAAKgB,EAAOvC,UAAU,cAC3BsB,EAAAA,EAAAA,KAAA,QAAMtB,UAAU,0CAAyCC,SACtDP,IAEFD,MACG,EA2NC6C,GAvNkBQ,MAC3B,IAAIpD,EAAc,GACdqD,EAAU,GACd,GAAK5D,EAAMsD,WAAX,CAEA,OAAQpD,EAAMQ,aACZ,UAAKO,EACL,IAAK,WACHV,GAAcsD,EAAAA,EAAAA,IACZ3D,EAAM4D,MACJ9D,EAAMsD,WAAWV,QACdmB,GAAuB,2BAAdA,EAAKR,OACf,GAAGF,OAETO,EAAU,IAAII,KACZ9D,EAAM4D,MACJ9D,EAAMsD,WAAWV,QACdmB,GAAuB,2BAAdA,EAAKR,OACf,GAAGF,OACP1C,iBACF,MACF,QACEJ,GAAcE,EAAAA,EAAAA,IACZT,EAAMsD,WAAWV,QAAQmB,GAAuB,cAAdA,EAAKR,OAAsB,GAAGF,OAElEO,EAAU,YAId,OACEzB,EAAAA,EAAAA,KAAA,QACEtB,UAAU,mGACV,WAAU+C,EAAQ9C,SAEjBP,GA/BwB,CAgCpB,EAqLAoD,WA3FA3D,EAAMuB,SA+FM,QADbzB,EACLE,EAAMiE,oBAAY,IAAAnE,OAAA,EAAlBA,EAAoBkD,KAAKkB,IACxBtD,EAAAA,EAAAA,MAAA,OAEEC,UAAU,6HACVE,MAAO,CACLC,qBACkBC,IAAhBlB,EAAyB,+EAAAmB,OAC0DnB,EAAYoB,UAAS,KACpG,oMAERC,QAASA,KACPC,QAAQC,IAAI,WAADJ,OAAYgD,EAAO3C,SAAU,EACxCT,SAAA,EAEFF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCqB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,kCAEfD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gCAA+BC,SAAA,EAC5CqB,EAAAA,EAAAA,KAAA,OACEC,SACkBnB,IAAhBlB,EACIA,EAAYuC,UACZ,iHAENzB,UAAU,cAGZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCqB,EAAAA,EAAAA,KAAA,KAAGtB,UAAU,oCAAmCC,SAC7CoD,EAAO3B,cAGV,2FADC2B,EAAO3C,SAENY,EAAAA,EAAAA,KAAA,OACEtB,UAAU,yEACV,iCAAgCC,SACjC,eAIDqB,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,cAKR5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCC,SAAA,MACnCG,IAAhBlB,GACCoC,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,0BAAyBC,SACrC2B,OAAOC,KAAKC,EAAAA,IACVC,QACEnB,GACC1B,EAAY8C,aACVC,EAAAA,EAAAA,IAAkBrB,IACf,IAERsB,MAAM,EAAG,GACTC,KAAKvB,IAAK,IAAA0C,EAAA,OACTpE,EAAY8C,aACVC,EAAAA,EAAAA,IAAkBrB,IACf,GACHb,EAAAA,EAAAA,MAAA,OACEC,UAAU,+DACV,cAAAK,OAAagC,EAAAA,GAAgBzB,IAAsBX,SAAA,EAEnDqB,EAAAA,EAAAA,KAAA,OACEC,IACEO,EAAAA,GACElB,GAGJZ,UAAU,cAEZsB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,uEAAsEC,SAGlF,QAHkFqD,EAClFpE,EAAY8C,aACXC,EAAAA,EAAAA,IAAkBrB,WACnB,IAAA0C,EAAAA,EAAI,QAIThC,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,GACD,OAIPL,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,oCAIjBsB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,4DAtFZqD,EAAO3C,aA0FZ,EC/WV,EA/BqB1B,IAQd,IARe,cACpBuE,EAAa,YACbC,EAAW,WACXC,GAKDzE,EACC,OACEsC,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,aAAYC,SACxBwD,EAAWtB,KAAKuB,IACfpC,EAAAA,EAAAA,KAAA,KACEtB,UACE,kIACC0D,EAAUC,IAAIC,SAASJ,GACpB,kDACA,iBAENjD,QAASA,KACPmD,EAAUG,iBAAiB,EAC3B5D,SAGDyD,EAAUhB,MAFNgB,EAAUhB,SAKf,E,cCpBH,MCRP,ECW8BoB,KAC5B,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAgB,CACxCC,UAAW,QACXC,QAAS,MAGJC,EAAiBC,IAAsBJ,EAAAA,EAAAA,UAAoB,SAC3DK,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,IAClCO,EAAMC,IAAWR,EAAAA,EAAAA,UAAS,IAC1BzE,EAAUkF,IAAeT,EAAAA,EAAAA,UAAmB,aAC5CU,EAAiBC,IAAsBX,EAAAA,EAAAA,WAAkB,IAG9DY,KAAMC,EACNC,OAAQC,EAAS,YACjB9F,EAAW,QACX+F,EAAO,MACPC,GFpB0BC,EAC5B7F,EACAgF,EACAE,EACAhF,KAEA,MAAOqF,EAAMO,IAAWnB,EAAAA,EAAAA,UACtB,CAAC,IAEIc,EAAQM,IAAapB,EAAAA,EAAAA,UAAkB,KACvCgB,EAASK,IAAcrB,EAAAA,EAAAA,WAAS,IAChCiB,EAAOK,IAAYtB,EAAAA,EAAAA,WAAS,IAC5B/E,EAAasG,IAAkBvB,EAAAA,EAAAA,UAEnC,CAAC,GA8OJ,OA5OAwB,EAAAA,EAAAA,UAAQ,KACN,MACMC,EAAU,0CACVC,EAAQ,sCAERC,EAAuB,CAAEC,KAAM,QAEnBC,WAChBR,GAAW,GACXC,GAAS,GACT,IACE,IAAIQ,EAAW,KACf,GAAkB,SAAdzG,EAAsB,CACxB,MAAM0G,QAAsBC,MAZlB,0CAaJC,QAAiBF,EAAcG,OACrCd,EAAUa,EAASE,MAEnBL,QAAiBE,MACfC,EAASE,KAAK9B,GAAU+B,YAAc,SAAW7B,EACjDoB,EAEJ,MAAO,GAAkB,SAAdtG,EAAsB,CAC/B,MAAMgH,QAAuBL,MAAMP,GAC7Ba,QAAiBD,EAAeH,OACtCd,EAAUkB,EAASH,MAGjBL,EADe,UAAbvG,QACeyG,MACfM,EAASH,KAAK9B,GAAUkC,4BACtB,SACAhC,EACFoB,SAGeK,MACfM,EAASH,KAAK9B,GAAUmC,+BACtB,SACAjC,EACFoB,EAGN,MAAO,GAAkB,UAAdtG,EAAuB,CAChC,MAAMgH,QAAuBL,MAAMP,GAC7Ba,QAAiBD,EAAeH,OACtCd,EAAUkB,EAASH,MAGjBL,EADe,UAAbvG,QACeyG,MACfM,EAASH,KAAK9B,GAAUkC,4BAA4BtE,MAAM,GAAI,GAA9DqE,UAGE/B,EACFoB,SAGeK,MACfM,EAASH,KAAK9B,GAAUmC,+BAA+BvE,MACrD,GACC,GAFHqE,UAME/B,EACFoB,EAGN,MAAO,GAAkB,UAAdtG,EAAuB,CAChC,MAAMgH,QAAuBL,MAAMP,GAC7Ba,QAAiBD,EAAeH,OACtCd,EAAUkB,EAASH,MAGjBL,EADe,UAAbvG,QACeyG,MACfM,EAASH,KAAK9B,GAAUkC,4BAA4BtE,MAAM,GAAI,GAA9DqE,UAGE/B,EACFoB,SAGeK,MACfM,EAASH,KAAK9B,GAAUmC,+BAA+BvE,MACrD,GACC,GAFHqE,UAME/B,EACFoB,EAGN,MAAO,GAAkB,UAAdtG,EAAuB,CAChC,MAAMgH,QAAuBL,MAAMP,GAC7Ba,QAAiBD,EAAeH,OACtCd,EAAUkB,EAASH,MAGjBL,EADe,UAAbvG,QACeyG,MACfM,EAASH,KAAK9B,GAAUkC,4BAA4BtE,MAAM,GAAI,GAA9DqE,UAGE/B,EACFoB,SAGeK,MACfM,EAASH,KAAK9B,GAAUmC,+BAA+BvE,MACrD,GACC,GAFHqE,UAME/B,EACFoB,EAGN,MAAO,GAAkB,WAAdtG,EAAwB,CACjC,MAAMoH,QAAmBT,MAAMN,GACzBgB,QAAeD,EAAWP,OAChCd,EAAUsB,EAAOP,MAEjBL,QAAiBE,MACfU,EAAOP,KAAK9B,GAAUsC,iBAAmB,SAAWpC,EACpDoB,EAEJ,KAAO,CACL,MAAMc,QAAmBT,MAAMN,GACzBgB,QAAeD,EAAWP,OAChCd,EAAUsB,EAAOP,MACjB5F,QAAQC,IAAIkG,GAEZZ,QAAiBE,MACfU,EAAOP,KAAK9B,GAAUuC,mBAAqB,SAAWrC,EACtDoB,EAEJ,CAEA,IAAKG,EAASe,GACZ,MAAM,IAAIC,MAAM,wBAElB,MAAMC,QACEjB,EAASI,OAEjB,IAAKa,EAASC,QACZ,MAAM,IAAIF,MAAM,iBAAmBC,EAAS9B,OAwB9C,GAFAM,EAnBoD,CAAC,GAsBrC,UAAdlG,GACc,UAAdA,GACc,UAAdA,EACA,CACA,IAAI4H,EAAqB,EACzB,OAAQ5H,GACN,IAAK,QACH4H,EAAqB,EACrB,MACF,IAAK,QACHA,EAAqB,EACrB,MACF,IAAK,QACHA,EAAqB,EAKzB,MAAMC,EAAwD,GACxDC,EAA4B,GAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAASZ,KAAKkB,OAAQD,IAAK,CAC7C,MAAME,EAA2D,GAK3DC,EAAqBH,EAC3B,IACE,IAAII,EAAID,EAAqB,EAC7BC,GAAKD,EAAqBN,KAGtBO,GAAKT,EAASZ,KAAKkB,QAFvBG,IAMET,EAASZ,KAAKiB,GAAG5E,WAAW,GAAGD,QAC/BwE,EAASZ,KAAKqB,GAAGhF,WAAW,GAAGD,QAE/B+E,EAAaG,KAAK,CAChBhG,YAAasF,EAASZ,KAAKqB,GAAG/F,YAC9BhB,QAASsG,EAASZ,KAAKqB,GAAG/G,UAE5B0G,EAAgBM,KAAKD,GACrBJ,KAEFF,EAAQO,KAAKH,GACbP,EAASZ,KAAKoB,GAAoBpE,aAAemE,CAErD,CACAH,EAAgBO,UAAUxF,KAAKyF,IAC7BZ,EAASZ,KAAKyB,OAAOD,EAAG,EAAE,GAE9B,CAEAxC,EAAQ4B,EACV,CAAE,MAAO9B,GACPK,GAAS,GACT/E,QAAQC,IAAIyE,EACd,CAAC,QACCI,GAAW,EACb,GAGFwC,EAAW,GACV,CAACxI,EAAWgF,EAAUE,EAAMhF,IAExB,CAAEqF,OAAME,SAAQ7F,cAAa+F,UAASC,QAAO,EEvOhDC,CAAef,EAAiBE,EAAUE,EAAMhF,GAyCpD,OANAuI,EAAAA,EAAAA,YAAU,KACH9C,GAAoB,IAATT,GACdI,EAAmBE,EAAgBsB,KAAK,GAAG5D,MAC7C,GACC,CAACyC,KAGFlF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0CAAyCC,SAAA,EACtDF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oEAAmEC,SAAA,CAC7E+H,EAAAA,GAAiB5D,GAAiB,mBAGrCrE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCC,SAAA,EAC/CqB,EAAAA,EAAAA,KAAC2G,EAAY,CACXzE,YAAaY,EACbb,cAAea,EACfX,WAAY,CACV,CACEE,IAAK,CAAC,QACNjB,KAAM,OACNmB,gBAAiBA,KACfQ,EAAmB,QACnBE,EAAY,GACZP,EAAS,CACPE,UAAW,QACXC,QAAS,KAEXM,EAAQ,EAAE,GAGd,CACEd,IAAK,CAAC,OAAQ,QAAS,QAAS,SAChCjB,KAAM,OACNmB,gBAAiBA,KACfQ,EAAmB,QACnBE,EAAY,GACZP,EAAS,CACPE,UAAW,QACXC,QAAS,KAEXM,EAAQ,EAAE,GAGd,CACEd,IAAK,CAAC,SAAU,YAChBjB,KAAM,sBACNmB,gBAAiBA,KACfQ,EAAmB,UACnBE,EAAY,GACZP,EAAS,CACPE,UAAW,QACXC,QAAS,KAEXM,EAAQ,EAAE,MAMG,WAApBL,GAAoD,aAApBA,GAC/B9C,EAAAA,EAAAA,KAAC2G,EAAY,CACXzE,YAAaY,EACbb,cAAea,EACfX,WAAY,CACV,CACEE,IAAK,CAAC,UACNjB,KAAM,OACNmB,gBAAiBA,KACfQ,EAAmB,UACnBI,EAAQ,EAAE,GAGd,CACEd,IAAK,CAAC,YACNjB,KAAM,SACNmB,gBAAiBA,KACfQ,EAAmB,YACnBI,EAAQ,EAAE,OAMlBnD,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,IAGmB,SAApByC,GACmB,UAApBA,GACoB,UAApBA,GACoB,UAApBA,GACErE,EAAAA,EAAAA,MAAA4B,EAAAA,SAAA,CAAA1B,SAAA,EACEqB,EAAAA,EAAAA,KAAC2G,EAAY,CACXzE,YAAahE,EACb+D,cAAe/D,EACfiE,WAAY,CACV,CACEE,IAAK,CAAC,YACNjB,KAAM,WACNmB,gBAAiBA,KACfa,EAAY,YACZD,EAAQ,EAAE,GAGd,CACEd,IAAK,CAAC,SACNjB,KAAM,QACNmB,gBAAiBA,KACfa,EAAY,SACZD,EAAQ,EAAE,OAKlBnD,EAAAA,EAAAA,KAAC2G,EAAY,CACXzE,YAAaY,EACbb,cAAea,EACfX,WAAY,CACV,CACEE,IAAK,CAAC,QACNjB,KAAM,OACNmB,gBAAiBA,KACfQ,EAAmB,QACnBL,EAAS,CACPE,UAAW,QACXC,QAAS,KAEXM,EAAQ,EAAE,GAGd,CACEd,IAAK,CAAC,SACNjB,KAAM,MACNmB,gBAAiBA,KACfQ,EAAmB,SACnBL,EAAS,CACPE,UAAW,gBACXC,QACE,oGAEJM,EAAQ,EAAE,GAGd,CACEd,IAAK,CAAC,SACNjB,KAAM,OACNmB,gBAAiBA,KACfQ,EAAmB,SACnBL,EAAS,CACPE,UAAW,gBACXC,QACE,oGAEJM,EAAQ,EAAE,GAGd,CACEd,IAAK,CAAC,SACNjB,KAAM,OACNmB,gBAAiBA,KACfQ,EAAmB,SACnBL,EAAS,CACPE,UAAW,gBACXC,QACE,oGAEJM,EAAQ,EAAE,UAOpBnD,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,QAIJL,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,+BACbiF,GAwBA3D,EAAAA,EAAAA,KAAA,QAAMtB,UAAU,wCAvBhBD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyBC,SAAA,EACtCF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,cAAaC,SAAA,CAAC,YACf+H,EAAAA,GAAiB5D,GAAiB,cAE9C9C,EAAAA,EAAAA,KAAA,UACE4G,GAAG,cACHlI,UAAU,yCACVmI,SAAWC,IACT5H,QAAQC,IAAI2H,EAAEC,OAAOC,QAAQC,eAC7BhE,EAAY6D,EAAEC,OAAOC,QAAQC,cAAc,EAE7CC,MACExD,EAAUV,GAAU5B,KAChBsC,EAAUV,GAAU5B,KACpBsC,EAAUV,GAAU4D,GACzBjI,SAEA+E,EAAU7C,KAAI,CAACyF,EAAGxI,KACjBkC,EAAAA,EAAAA,KAAA,UAAArB,SAAqB2H,EAAElF,KAAOkF,EAAElF,KAAOkF,EAAEM,IAA5B9I,aASrB6F,GA0DA3D,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,KAzDA5B,EAAAA,EAAAA,MAAA4B,EAAAA,SAAA,CAAA1B,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBqB,EAAAA,EAAAA,KAAA,UACEtB,UACE,iBAAoB8E,EAAgB2D,KAAyB,GAAlB,iBAE7ClI,QAASA,IAAMkE,EAAQ,GAAGxE,SAC3B,UAGDqB,EAAAA,EAAAA,KAAA,UACEtB,UACE,iBAAoB8E,EAAgB2D,KAAyB,GAAlB,iBAE7ClI,QAASA,IAAMkE,GAASgE,GAASA,EAAO,IAAGxI,SAC5C,YAGDqB,EAAAA,EAAAA,KAAA,SAAOtB,UAAU,6EAA4EC,UAE3FqB,EAAAA,EAAAA,KAAA,SACEtB,UAAU,2CACV0I,KAAK,OACLC,UAAU,UACVC,YAAY,QACZJ,MAAOhE,EACP2D,SA1QWC,IACvB,MAGMI,EAAgBJ,EAAEC,OAAOG,MAE/B,GAAc,KAAVA,GALO,aAKYK,KAAKL,GAAQ,CAClC,MAAMM,EAASC,OAAOP,GAAS,EAAI,EAAIO,OAAOP,GAC9C/D,EAAQqE,EACV,QAoQQxH,EAAAA,EAAAA,KAAA,UACEtB,UACE,iBAAoB8E,EAAgBkE,KAAyB,GAAlB,iBAE7CzI,QAASA,IAAMkE,GAASgE,GAASA,EAAO,IAAGxI,SAC5C,YAGDqB,EAAAA,EAAAA,KAAA,UACEtB,UACE,sCACE8E,EAAgBkE,KAAyB,GAAlB,iBAE3BzI,QAASA,IAAMkE,EAAQ,IACvB,WAAS,6CAA4CxE,SACtD,aAKHF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,kBACe,KACfuB,EAAAA,EAAAA,KAAqBgD,EAAO,GAAKM,EAAgBsB,KAAKkB,OAAS,GAAG,KAClE9F,EAAAA,EAAAA,IAAoBgD,EAAOM,EAAgBsB,KAAKkB,QAAQ,MAAI,IAxRhD2B,MACrB,OAAQ7E,GACN,IAAK,OACH,YAAoDhE,IAA7C4E,EAAUV,GAAUtD,qBACtBgE,EAAUV,GAAUtD,qBACrB,EACN,IAAK,WACH,YAAkDZ,IAA3C4E,EAAUV,GAAUjD,mBACtB2D,EAAUV,GAAUjD,mBACrB,EACN,IAAK,SACH,YAAgDjB,IAAzC4E,EAAUV,GAAUnD,iBACtB6D,EAAUV,GAAUnD,iBACrB,EACN,QACE,YAA2Cf,IAApC4E,EAAUV,GAAUxD,YACtBkE,EAAUV,GAAUxD,YACrB,EACR,EAuQSmI,GAAiBnJ,iBAAiB,kBAOxCiE,EAAMI,QAAQmD,OAAS,GACtBvH,EAAAA,EAAAA,MAAA,OAAKmJ,KAAK,QAAQlJ,UAAW,eAAiB+D,EAAMG,UAAUjE,SAAA,EAC5DqB,EAAAA,EAAAA,KAAA,OACE6H,MAAM,6BACNnJ,UAAU,kCACVoJ,KAAK,OACLC,QAAQ,YAAWpJ,UAEnBqB,EAAAA,EAAAA,KAAA,QACEgI,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,4EAGNnI,EAAAA,EAAAA,KAAA,QAAArB,SAAO8D,EAAMI,cAGf7C,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,IAGDuD,GACC5D,EAAAA,EAAAA,KAAA,KAAArB,SAAG,0BAEHqB,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,CAAA1B,SACIgF,GAcAlF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+CAA8CC,SAAA,EAC3DqB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,yBACfsB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,yBACfsB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,yBACfsB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,yBACfsB,EAAAA,EAAAA,KAAA,OAAKtB,UAAU,2BAlBjB8E,EAAgBsB,KAAKjE,KAAI,CAAChD,EAAOC,KAC/BkC,EAAAA,EAAAA,KAACoI,EAAe,CACdxK,YAAaA,EAAYC,EAAMuB,SAC/BvB,MAAOA,EACPC,MAAOA,GAASoF,EAAO,GAAKM,EAAgBsB,KAAKkB,OACjDjI,MAAO2F,EAAUV,GACjBhF,UAAW8E,EACX7E,MAAOJ,EAAMqD,MAAQmC,EAErBnF,SAAUA,GADLJ,SAeX,C,qKChXH,MAAMuK,EAAcC,GACrBA,EAAM,IAAM,IACe,EAAtBC,KAAKC,MAAMF,EAAM,GAEG,EAAtBC,KAAKE,MAAMH,EAAM,GAGbhK,EAAyBoK,IAEpC,MAAMC,EAAQJ,KAAKC,MAAME,EAAK,MACxBE,EAAUL,KAAKC,MAAOE,EAAK,KAAW,KACtCG,EAAUN,KAAKC,MAAOE,EAAK,IAAS,KACpCI,EAAeP,KAAKC,MAAOE,EAAK,IAAQ,IAGxCK,EAAiBJ,EAAQ,EAAIA,EAAMK,WAAWC,SAAS,EAAG,KAAO,GACjEC,EAAmBN,EAAQI,WAAWC,SAAS,EAAG,KAClDE,EAAmBN,EAAQG,WAAWC,SAAS,EAAG,KAClDG,EAAwBN,EAAaE,WAAWC,SAAS,EAAG,KAGlE,OAAOF,EAAc,GAAAhK,OACdgK,EAAc,KAAAhK,OAAImK,EAAgB,KAAAnK,OAAIoK,EAAgB,KAAApK,OAAIqK,GAAqB,GAAArK,OAC/EmK,EAAgB,KAAAnK,OAAIoK,EAAgB,KAAApK,OAAIqK,EAAuB,EAG3D1H,EAAW2H,IACtB,MACMC,EADMzH,KAAK0H,MACKF,EAGhBG,EAAcC,IACdC,EAAYF,KACZG,EAAWD,MAEjB,GAAIJ,EAAUE,EAAa,CACzB,MAAMX,EAAUN,KAAKC,MAAMc,EANT,KAOlB,MAAM,GAANvK,OAAU8J,EAAO,WAAA9J,OAAsB,IAAZ8J,EAAgB,IAAM,GAAE,OACrD,CAAO,GAAIS,EAAUI,EAAW,CAC9B,MAAMd,EAAUL,KAAKC,MAAMc,EAAUE,GACrC,MAAM,GAANzK,OAAU6J,EAAO,WAAA7J,OAAsB,IAAZ6J,EAAgB,IAAM,GAAE,OACrD,CAAO,GAAIU,EAAUK,EAAU,CAC7B,MAAMhB,EAAQJ,KAAKC,MAAMc,EAAUI,GACnC,MAAM,GAAN3K,OAAU4J,EAAK,SAAA5J,OAAkB,IAAV4J,EAAc,IAAM,GAAE,OAC/C,CAAO,CACL,MAAMiB,EAAOrB,KAAKC,MAAMc,EAAUK,GAClC,MAAM,GAAN5K,OAAU6K,EAAI,QAAA7K,OAAgB,IAAT6K,EAAa,IAAM,GAAE,OAC5C,GAGWC,EAAwBC,GAG5BA,EACJC,QAAQ,kBAAmB,SAC3BA,QAAQ,sBAAuBC,GAAUA,EAAMC,gBAGvCtJ,EAAqBmJ,GACzBA,EACJI,MAAM,KACNrJ,KAAKsJ,GACGA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKvJ,MAAM,KAElD0J,KAAK,IAGG/K,EAAmBA,CAC9BgL,EACAC,KAEA,MAAMC,EAAcF,EAAQC,EAAgB,IAE5C,OAAc,IAAVD,EACK/J,EAAAA,GAAgBkK,cACJ,IAAVH,EACF/J,EAAAA,GAAgBmK,YACJ,IAAVJ,EACF/J,EAAAA,GAAgBoK,QACdL,GAAS,GACX/J,EAAAA,GAAgBqK,aACdJ,GAAc,EAChBjK,EAAAA,GAAgBsK,YACdL,GAAc,GAChBjK,EAAAA,GAAgBuK,YACdN,GAAc,GAChBjK,EAAAA,GAAgBwK,cACdP,GAAc,GAChBjK,EAAAA,GAAgByK,OACdR,GAAc,GAChBjK,EAAAA,GAAgB0K,OAEhB,EACT,EAGWzL,EAAyBA,CACpC8K,EACAC,KAEA,MAAMC,EAAcF,EAAQC,EAAgB,IAE5C,OAAc,IAAVD,EACKY,EAAAA,GAAsBT,cACV,IAAVH,EACFY,EAAAA,GAAsBR,YACV,IAAVJ,EACFY,EAAAA,GAAsBP,QACpBL,GAAS,GACXY,EAAAA,GAAsBN,aACpBJ,GAAc,EAChBU,EAAAA,GAAsBL,YACpBL,GAAc,GAChBU,EAAAA,GAAsBJ,YACpBN,GAAc,GAChBU,EAAAA,GAAsBH,cACpBP,GAAc,GAChBU,EAAAA,GAAsBF,OACpBR,GAAc,GAChBU,EAAAA,GAAsBD,OAEtB,EACT,EAGWvL,EAAwBA,CACnC4K,EACAC,KAEA,MAAMC,EAAcF,EAAQC,EAAgB,IAE5C,OAAc,IAAVD,EACKa,EAAAA,GAAqBV,cACT,IAAVH,EACFa,EAAAA,GAAqBT,YACT,IAAVJ,EACFa,EAAAA,GAAqBR,QACnBL,GAAS,GACXa,EAAAA,GAAqBP,aACnBJ,GAAc,EAChBW,EAAAA,GAAqBN,YACnBL,GAAc,GAChBW,EAAAA,GAAqBL,YACnBN,GAAc,GAChBW,EAAAA,GAAqBJ,cACnBP,GAAc,GAChBW,EAAAA,GAAqBH,OACnBR,GAAc,GAChBW,EAAAA,GAAqBF,OAErB,EACT,EAGWpL,EAAuBA,CAClCyK,EACAC,KAEA,MAAMC,EAAcF,EAAQC,EAAgB,IAE5C,OAAID,GAAS,GACJc,EAAAA,GAAoBT,QAClBL,GAAS,IACXc,EAAAA,GAAoBR,aAClBJ,GAAc,EAChBY,EAAAA,GAAoBP,YAClBL,GAAc,GAChBY,EAAAA,GAAoBN,YAClBN,GAAc,GAChBY,EAAAA,GAAoBL,cAClBP,GAAc,GAChBY,EAAAA,GAAoBJ,OAClBR,GAAc,GAChBY,EAAAA,GAAoBH,OAEpB,EACT,EAGWtL,EAAqBA,CAChC2K,EACAC,KAEA,MAAMC,EAAcF,EAAQC,EAAgB,IAE5C,OAAc,IAAVD,EACKe,EAAAA,GAAkBZ,cACN,IAAVH,EACFe,EAAAA,GAAkBX,YACN,IAAVJ,EACFe,EAAAA,GAAkBV,QAChBL,GAAS,GACXe,EAAAA,GAAkBT,aAChBN,GAAS,IACXe,EAAAA,GAAkBR,YAChBL,GAAc,EAChBa,EAAAA,GAAkBP,YAChBN,GAAc,GAChBa,EAAAA,GAAkBN,cAChBP,GAAc,GAChBa,EAAAA,GAAkBL,OAChBR,GAAc,GAChBa,EAAAA,GAAkBJ,OAElB,EACT,EAGWhL,EAAuBqL,IAClC,MAAMpF,EAAIoF,EAAS,GACbC,EAAID,EAAS,IACnB,OAAU,IAANpF,GAAiB,KAANqF,EACND,EAAS,KAER,IAANpF,GAAiB,KAANqF,EACND,EAAS,KAER,IAANpF,GAAiB,KAANqF,EACND,EAAS,KAEXA,EAAS,IAAI,EAGTE,EAA2BC,IACtC,OAAQA,GACN,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,YACT,KAAK,EACH,MAAO,aACT,QACE,MAAO,GACX,EAGWC,EAA4C,CACvDC,UAAW,QACXC,WAAY,UACZC,aAAc,UACdC,gBAAiB,UACjBC,YAAa,UACbC,WAAY,UACZC,eAAgB,WAChBC,MAAO,QACPC,eAAgB,UAChBC,WAAY,UACZC,UAAW,WACXC,UAAW,UACXC,UAAW,QACXC,UAAW,WACXC,gBAAiB,WACjBC,UAAW,WACXC,cAAe,UACfC,aAAc,WACdC,YAAa,QACbC,aAAc,WACdC,aAAc,UACdC,YAAa,QACbC,YAAa,UACbC,aAAc,QAEdC,gBAAiB,OACjBC,MAAO,OACPC,SAAU,OACVC,iBAAkB,OAClBC,OAAQ,OACRC,QAAS,OACTC,MAAO,OACPC,QAAS,OACTC,UAAW,OACXC,cAAe,OACfC,SAAU,OACVC,IAAK,OACLC,OAAQ,OACRC,QAAS,OACTC,MAAO,OACPC,aAAc,OACdC,kBAAmB,QAGR1H,EAAmD,CAC9D2H,KAAM,OACNC,KAAM,OACNC,MAAO,OACPC,MAAO,OACPC,MAAO,OACPC,SAAU,sBACVC,OAAQ,sB","sources":["components/LeaderboardCard/LeaderboardCard.tsx","components/SelectionRow/SelectionRow.tsx","hooks/useLeaderboard.tsx","pages/Leaderboard/index.tsx","pages/Leaderboard/Leaderboard.tsx","util/converters.ts"],"sourcesContent":["import { useLeaderboard } from \"hooks/useLeaderboard\";\r\nimport { useEffect, useState } from \"react\";\r\nimport leastCashImage from \"images/misc/least_cash_s.webp\";\r\nimport leastTiersImage from \"images/misc/least_tiers_s.webp\";\r\nimport ctPointsImage from \"images/ct/ct_points_s.webp\";\r\nimport {\r\n  LeaderboardEntry,\r\n  ProfileData,\r\n  RaceMedal,\r\n  RaceMedals,\r\n} from \"types/leaderboards\";\r\nimport {\r\n  appendOrdinalSuffix,\r\n  convertMsToTimeFormat,\r\n  formatToUpperCase,\r\n  placeToBossEliteMedal,\r\n  placeToBossNormalMedal,\r\n  placeToCtPlayerMedal,\r\n  placeToCtTeamMedal,\r\n  placeToRaceMedal,\r\n  timeAgo,\r\n} from \"util/converters\";\r\nimport { raceMedalImages, raceMedalReward } from \"util/formatters\";\r\nimport { BossMode, Event, EventType } from \"types/events\";\r\n\r\nconst LeaderboardCard = ({\r\n  profileData,\r\n  entry,\r\n  index,\r\n  event,\r\n  eventType,\r\n  delta,\r\n  bossMode,\r\n}: {\r\n  profileData: ProfileData;\r\n  entry: LeaderboardEntry;\r\n  index: number;\r\n  event: Event;\r\n  eventType: EventType;\r\n  delta: number;\r\n  bossMode: BossMode;\r\n}) => {\r\n  const handleMainScore = () => {\r\n    let scoreString = \"\";\r\n    let image = \"\";\r\n\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        scoreString = convertMsToTimeFormat(entry.score);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        switch (entry.scoreParts[0].name) {\r\n          case \"Game Time\":\r\n            scoreString = convertMsToTimeFormat(entry.score);\r\n            break;\r\n          case \"Cash Spent\":\r\n            image = leastCashImage;\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n          case \"Tiers\":\r\n            image = leastTiersImage;\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n          default:\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n        }\r\n        break;\r\n      case \"CtPlayer\":\r\n      case \"CtTeam\":\r\n        image = ctPointsImage;\r\n        scoreString = entry.score.toLocaleString();\r\n        break;\r\n    }\r\n    return (\r\n      <div className=\"text-right text-lg flex gap-1 justify-end items-center font-semibold text-nowrap -mt-1 \">\r\n        <img src={image} className=\"w-[18px]\" />\r\n        <span className=\"drop-shadow-[0_2px_0px_rgba(0,0,0,0.4)]\">\r\n          {scoreString}\r\n        </span>\r\n        {handleDelta()}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleSecondaryScore = () => {\r\n    let scoreString = \"\";\r\n    let dataTip = \"\";\r\n    if (!entry.scoreParts) return;\r\n\r\n    switch (event.scoringType) {\r\n      case undefined:\r\n      case \"GameTime\":\r\n        scoreString = timeAgo(\r\n          event.start +\r\n            entry.scoreParts.filter(\r\n              (part) => part.name === \"Time after event start\"\r\n            )[0].score\r\n        );\r\n        dataTip = new Date(\r\n          event.start +\r\n            entry.scoreParts.filter(\r\n              (part) => part.name === \"Time after event start\"\r\n            )[0].score\r\n        ).toLocaleString();\r\n        break;\r\n      default:\r\n        scoreString = convertMsToTimeFormat(\r\n          entry.scoreParts.filter((part) => part.name === \"Game Time\")[0].score\r\n        );\r\n        dataTip = \"Game Time\";\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <span\r\n        className=\"text-right text-sm tooltip font-normal text-nowrap -mt-1 drop-shadow-[0_1px_0px_rgba(0,0,0,0.3)]\"\r\n        data-tip={dataTip}\r\n      >\r\n        {scoreString}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const handleDelta = () => {\r\n    let scoreString = \"\";\r\n    let isLowerBad = false;\r\n\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        scoreString = convertMsToTimeFormat(delta);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        switch (event.scoringType) {\r\n          case \"GameTime\":\r\n            scoreString = convertMsToTimeFormat(delta);\r\n            break;\r\n          case \"LeastCash\":\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n          case \"LeastTiers\":\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n          default:\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n        }\r\n        break;\r\n      case \"CtPlayer\":\r\n      case \"CtTeam\":\r\n        isLowerBad = true;\r\n        scoreString =\r\n          delta !== 0 ? (delta * -1).toLocaleString() : delta.toLocaleString();\r\n        break;\r\n    }\r\n    return (\r\n      <p\r\n        className={\r\n          \"font-semibold text-sm drop-shadow-[0_1px_0px_rgba(0,0,0,0.4)]\" +\r\n          ((isLowerBad ? delta >= 0 : delta <= 0)\r\n            ? \" text-success\"\r\n            : \" text-error\")\r\n        }\r\n      >\r\n        {delta <= 0 ? \"-\" : \"+\"}\r\n        {scoreString}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const handleMedal = () => {\r\n    let medal = \"\";\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        medal = placeToRaceMedal(index + 1, event.totalScores as number);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        if (bossMode === \"Standard\") {\r\n          medal = placeToBossNormalMedal(\r\n            index + 1,\r\n            event.totalScores_standard as number\r\n          );\r\n        } else {\r\n          medal = placeToBossEliteMedal(\r\n            index + 1,\r\n            event.totalScores_standard as number\r\n          );\r\n        }\r\n        break;\r\n      case \"CtTeam\":\r\n        medal = placeToCtTeamMedal(index + 1, event.totalScores_team as number);\r\n        break;\r\n      case \"CtPlayer\":\r\n        medal = placeToCtPlayerMedal(\r\n          index + 1,\r\n          event.totalScores_player as number\r\n        );\r\n        break;\r\n    }\r\n    return <img src={medal} className=\"w-[26px]\" />;\r\n  };\r\n  return (\r\n    <div className=\"flex flex-col gap-1 w-2/3 items-end\">\r\n      <div\r\n        key={entry.profile}\r\n        className=\"indicator w-full flex outline outline-2 outline-white/30 hover:cursor-pointer justify-between px-6 py-1 bg-center bg-cover\"\r\n        style={{\r\n          backgroundImage:\r\n            profileData !== undefined\r\n              ? `linear-gradient(to bottom, rgba(17, 17, 23, 0.4), rgba(17, 17, 23, 1)), url(${profileData.bannerURL})`\r\n              : \"linear-gradient(to bottom, rgba(17, 17, 23, 0.2), rgba(17, 17, 23, 0.6)), url(https://static-api.nkstatic.com/appdocs/4/assets/opendata/bbd8e1412f656b91db7df7aabbc1598b_TeamsBannerDeafult.png)\",\r\n        }}\r\n        onClick={() => {\r\n          console.log(`clicked ${entry.profile}`);\r\n        }}\r\n      >\r\n        <div className=\"flex justify-start w-1/2\">\r\n          <div className=\"flex items-center gap-2 w-20\">\r\n            {handleMedal()}\r\n            <p className=\"font-medium\">{appendOrdinalSuffix(index + 1)}</p>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2 w-1/4\">\r\n            <img\r\n              src={\r\n                profileData !== undefined\r\n                  ? profileData.avatarURL\r\n                  : \"https://static-api.nkstatic.com/appdocs/4/assets/opendata/db32af61df5646951a18c60fe0013a31_ProfileAvatar01.png\"\r\n              }\r\n              className=\"w-[38px]\"\r\n            />\r\n\r\n            <div className=\"flex flex-col flex-nowrap\">\r\n              <p className=\"font-semibold text-lg text-nowrap\">\r\n                {entry.displayName}\r\n              </p>\r\n              {entry.profile ===\r\n              \"https://data.ninjakiwi.com/btd6/users/9fbf128f8cc5fcf61c14894f5a25e5259a521fbf9743d96e\" ? (\r\n                <div\r\n                  className=\"badge badge-neutral tooltip bg-opacity-50 badge-sm -mt-[0.3rem] pb-0.5\"\r\n                  data-tip={`Developed this site`}\r\n                >\r\n                  Developer\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-between w-1/2 gap-[1.2rem]\">\r\n          {profileData !== undefined ? (\r\n            <div className=\"flex gap-3 items-center\">\r\n              {Object.keys(raceMedalImages)\r\n                .filter(\r\n                  (medal) =>\r\n                    profileData._medalsRace[\r\n                      formatToUpperCase(medal) as keyof RaceMedals\r\n                    ]! > 0\r\n                )\r\n                .slice(0, 5)\r\n                .map((medal) =>\r\n                  profileData._medalsRace[\r\n                    formatToUpperCase(medal) as keyof RaceMedals\r\n                  ]! > 0 ? (\r\n                    <div\r\n                      className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                      data-tip={`${raceMedalReward[medal as RaceMedal]}`}\r\n                    >\r\n                      <img\r\n                        src={\r\n                          raceMedalImages[medal as keyof typeof raceMedalImages]\r\n                        }\r\n                        className=\"h-[28px]\"\r\n                      />\r\n                      <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                        {profileData._medalsRace[\r\n                          formatToUpperCase(medal) as keyof RaceMedals\r\n                        ] ?? 0}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )\r\n                )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex flex-col h-full w-1/4 justify-center items-end\">\r\n            {handleMainScore()}\r\n            {handleSecondaryScore()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {entry.otherPlayers?.map((player) => (\r\n        <div\r\n          key={player.profile}\r\n          className=\"indicator w-full flex outline outline-1 outline-white/30 hover:cursor-pointer justify-between px-6 py-1 bg-center bg-cover\"\r\n          style={{\r\n            backgroundImage:\r\n              profileData !== undefined\r\n                ? `linear-gradient(to bottom, rgba(17, 17, 23, 0.4), rgba(17, 17, 23, 1)), url(${profileData.bannerURL})`\r\n                : \"linear-gradient(to bottom, rgba(17, 17, 23, 0.2), rgba(17, 17, 23, 0.6)), url(https://static-api.nkstatic.com/appdocs/4/assets/opendata/bbd8e1412f656b91db7df7aabbc1598b_TeamsBannerDeafult.png)\",\r\n          }}\r\n          onClick={() => {\r\n            console.log(`clicked ${player.profile}`);\r\n          }}\r\n        >\r\n          <div className=\"flex justify-start w-1/2\">\r\n            <div className=\"flex items-center gap-2 w-20\"></div>\r\n\r\n            <div className=\"flex items-center gap-2 w-1/4\">\r\n              <img\r\n                src={\r\n                  profileData !== undefined\r\n                    ? profileData.avatarURL\r\n                    : \"https://static-api.nkstatic.com/appdocs/4/assets/opendata/db32af61df5646951a18c60fe0013a31_ProfileAvatar01.png\"\r\n                }\r\n                className=\"w-[38px]\"\r\n              />\r\n\r\n              <div className=\"flex flex-col flex-nowrap\">\r\n                <p className=\"font-semibold text-lg text-nowrap\">\r\n                  {player.displayName}\r\n                </p>\r\n                {player.profile ===\r\n                \"https://data.ninjakiwi.com/btd6/users/9fbf128f8cc5fcf61c14894f5a25e5259a521fbf9743d96e\" ? (\r\n                  <div\r\n                    className=\"badge badge-neutral tooltip bg-opacity-50 badge-sm -mt-[0.3rem] pb-0.5\"\r\n                    data-tip={`Developed this site`}\r\n                  >\r\n                    Developer\r\n                  </div>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-start w-1/2 gap-[1.2rem]\">\r\n            {profileData !== undefined ? (\r\n              <div className=\"flex gap-3 items-center\">\r\n                {Object.keys(raceMedalImages)\r\n                  .filter(\r\n                    (medal) =>\r\n                      profileData._medalsRace[\r\n                        formatToUpperCase(medal) as keyof RaceMedals\r\n                      ]! > 0\r\n                  )\r\n                  .slice(0, 5)\r\n                  .map((medal) =>\r\n                    profileData._medalsRace[\r\n                      formatToUpperCase(medal) as keyof RaceMedals\r\n                    ]! > 0 ? (\r\n                      <div\r\n                        className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                        data-tip={`${raceMedalReward[medal as RaceMedal]}`}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            raceMedalImages[\r\n                              medal as keyof typeof raceMedalImages\r\n                            ]\r\n                          }\r\n                          className=\"h-[28px]\"\r\n                        />\r\n                        <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                          {profileData._medalsRace[\r\n                            formatToUpperCase(medal) as keyof RaceMedals\r\n                          ] ?? 0}\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <></>\r\n                    )\r\n                  )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex h-full gap-3 items-center\">\r\n                {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n              </div>\r\n            )}\r\n            <div className=\"flex flex-col h-full w-16 justify-center items-end\"></div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderboardCard;\r\n","import { EventType } from \"types/events\";\r\n\r\nconst SelectionRow = ({\r\n  selectionName,\r\n  selectionId,\r\n  selections,\r\n}: {\r\n  selectionName: string;\r\n  selectionId: string;\r\n  selections: { ids: string[]; name: string; onClickFunction: () => void }[];\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      {selections.map((selection) => (\r\n        <a\r\n          className={\r\n            \"py-2 px-2 transition ease-in-out border-b bg-black hover:bg-opacity-70 hover:cursor-pointer hover:text-accent hover:border-b-2\" +\r\n            (selection.ids.includes(selectionId)\r\n              ? \" bg-black bg-opacity-30 text-primary border-b-2\"\r\n              : \" bg-opacity-0\")\r\n          }\r\n          onClick={() => {\r\n            selection.onClickFunction();\r\n          }}\r\n          key={selection.name}\r\n        >\r\n          {selection.name}\r\n        </a>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectionRow;\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { BossMode, EventType } from \"types/events\";\r\nimport {\r\n  LeaderboardData,\r\n  LeaderboardEntry,\r\n  ProfileData,\r\n} from \"types/leaderboards\";\r\nimport { Event } from \"types/events\";\r\n\r\nexport const useLeaderboard = (\r\n  eventType: EventType,\r\n  eventPos: number,\r\n  page: number,\r\n  bossMode?: BossMode\r\n) => {\r\n  const [data, setData] = useState<LeaderboardData<LeaderboardEntry[]>>(\r\n    {} as LeaderboardData<LeaderboardEntry[]>\r\n  );\r\n  const [events, setEvents] = useState<Event[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const [profileData, setProfileData] = useState<{\r\n    [key: string]: ProfileData;\r\n  }>({});\r\n\r\n  useMemo(() => {\r\n    const raceUrl = \"https://data.ninjakiwi.com/btd6/races/\";\r\n    const bossUrl = \"https://data.ninjakiwi.com/btd6/bosses/\";\r\n    const ctUrl = \"https://data.ninjakiwi.com/btd6/ct/\";\r\n\r\n    const headers: RequestInit = { mode: \"cors\" };\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(false);\r\n      try {\r\n        let response = null;\r\n        if (eventType === \"Race\") {\r\n          const racesResponse = await fetch(raceUrl);\r\n          const raceData = await racesResponse.json();\r\n          setEvents(raceData.body);\r\n\r\n          response = await fetch(\r\n            raceData.body[eventPos].leaderboard + \"?page=\" + page,\r\n            headers\r\n          );\r\n        } else if (eventType === \"Boss\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_elite_players_1 +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          } else {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_standard_players_1 +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          }\r\n        } else if (eventType === \"Boss2\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n                \"2\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          } else {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) +\r\n                \"2\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          }\r\n        } else if (eventType === \"Boss3\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n                \"3\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          } else {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) +\r\n                \"3\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          }\r\n        } else if (eventType === \"Boss4\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n                \"4\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          } else {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) +\r\n                \"4\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          }\r\n        } else if (eventType === \"CtTeam\") {\r\n          const ctResponse = await fetch(ctUrl);\r\n          const ctData = await ctResponse.json();\r\n          setEvents(ctData.body);\r\n\r\n          response = await fetch(\r\n            ctData.body[eventPos].leaderboard_team + \"?page=\" + page,\r\n            headers\r\n          );\r\n        } else {\r\n          const ctResponse = await fetch(ctUrl);\r\n          const ctData = await ctResponse.json();\r\n          setEvents(ctData.body);\r\n          console.log(ctData);\r\n\r\n          response = await fetch(\r\n            ctData.body[eventPos].leaderboard_player + \"?page=\" + page,\r\n            headers\r\n          );\r\n        }\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: LeaderboardData<LeaderboardEntry[]> =\r\n          await response.json();\r\n\r\n        if (!jsonData.success) {\r\n          throw new Error(\"Unsuccessful: \" + jsonData.error);\r\n        }\r\n\r\n        const newProfiles: { [key: string]: ProfileData } = {};\r\n\r\n        // for (var entry of jsonData.body) {\r\n        //   console.log(entry);\r\n        //   try {\r\n        //     const response = await fetch(entry.profile);\r\n        //     if (!response.ok) {\r\n        //       throw new Error(\"Failed to fetch data\");\r\n        //     }\r\n        //     const jsonData: LeaderboardData<ProfileData> =\r\n        //       await response.json();\r\n\r\n        //     newProfiles[entry.profile] = jsonData.body;\r\n        //     console.log(jsonData);\r\n        //   } catch (error) {\r\n        //     console.log(error);\r\n        //   }\r\n        // }\r\n\r\n        setProfileData(newProfiles);\r\n\r\n        if (\r\n          eventType === \"Boss2\" ||\r\n          eventType === \"Boss3\" ||\r\n          eventType === \"Boss4\"\r\n        ) {\r\n          let nextPlayersToCheck = 0;\r\n          switch (eventType) {\r\n            case \"Boss2\":\r\n              nextPlayersToCheck = 1;\r\n              break;\r\n            case \"Boss3\":\r\n              nextPlayersToCheck = 2;\r\n              break;\r\n            case \"Boss4\":\r\n              nextPlayersToCheck = 3;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          const players: { displayName: string; profile: string }[][] = [];\r\n          const indecesToSplice: number[] = [];\r\n          for (let i = 0; i < jsonData.body.length; i++) {\r\n            const playersEntry: { displayName: string; profile: string }[] = [];\r\n            // playersEntry.push({\r\n            //   displayName: jsonData.body[i].displayName,\r\n            //   profile: jsonData.body[i].profile,\r\n            // });\r\n            const currentPlayerIndex = i;\r\n            for (\r\n              let j = currentPlayerIndex + 1;\r\n              j <= currentPlayerIndex + nextPlayersToCheck;\r\n              j++\r\n            ) {\r\n              if (j >= jsonData.body.length) {\r\n                break;\r\n              }\r\n              if (\r\n                jsonData.body[i].scoreParts[0].score ===\r\n                jsonData.body[j].scoreParts[0].score\r\n              ) {\r\n                playersEntry.push({\r\n                  displayName: jsonData.body[j].displayName,\r\n                  profile: jsonData.body[j].profile,\r\n                });\r\n                indecesToSplice.push(j);\r\n                i++;\r\n              }\r\n              players.push(playersEntry);\r\n              jsonData.body[currentPlayerIndex].otherPlayers = playersEntry;\r\n            }\r\n          }\r\n          indecesToSplice.reverse().map((x) => {\r\n            jsonData.body.splice(x, 1);\r\n          });\r\n        }\r\n\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        setError(true);\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [eventType, eventPos, page, bossMode]);\r\n\r\n  return { data, events, profileData, loading, error };\r\n};\r\n","import Leaderboard from \"./Leaderboard\";\r\nexport default Leaderboard;\r\n","import { LeaderboardCard } from \"components/LeaderboardCard\";\r\nimport { SelectionRow } from \"components/SelectionRow\";\r\nimport { useLeaderboard } from \"hooks/useLeaderboard\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { BossMode, EventType } from \"types/events\";\r\nimport { Alert } from \"types/util\";\r\nimport {\r\n  appendOrdinalSuffix,\r\n  placeToRaceMedal,\r\n  prettyEventNames,\r\n} from \"util/converters\";\r\n\r\nconst Leaderboard: React.FC = () => {\r\n  const [alert, setAlert] = useState<Alert>({\r\n    alertType: \"alert\",\r\n    message: \"\",\r\n  });\r\n\r\n  const [leaderboardType, setLeaderboardType] = useState<EventType>(\"Race\");\r\n  const [eventPos, setEventPos] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [bossMode, setBossMode] = useState<BossMode>(\"Standard\");\r\n  const [firstPlaceScore, setFirstPlaceScore] = useState<number>(-1);\r\n\r\n  const {\r\n    data: leaderboardData,\r\n    events: eventData,\r\n    profileData,\r\n    loading,\r\n    error,\r\n  } = useLeaderboard(leaderboardType, eventPos, page, bossMode);\r\n\r\n  const handlePageInput = (e: any) => {\r\n    const re = /^[0-9\\b]*$/;\r\n\r\n    // if value is not blank, then test the regex\r\n    const value: string = e.target.value;\r\n\r\n    if (value === \"\" || re.test(value)) {\r\n      const numVal = Number(value) < 1 ? 1 : Number(value);\r\n      setPage(numVal);\r\n    }\r\n  };\r\n\r\n  const getTotalScores = (): number => {\r\n    switch (leaderboardType) {\r\n      case \"Boss\":\r\n        return eventData[eventPos].totalScores_standard !== undefined\r\n          ? (eventData[eventPos].totalScores_standard as number)\r\n          : 0;\r\n      case \"CtPlayer\":\r\n        return eventData[eventPos].totalScores_player !== undefined\r\n          ? (eventData[eventPos].totalScores_player as number)\r\n          : 0;\r\n      case \"CtTeam\":\r\n        return eventData[eventPos].totalScores_team !== undefined\r\n          ? (eventData[eventPos].totalScores_team as number)\r\n          : 0;\r\n      default:\r\n        return eventData[eventPos].totalScores !== undefined\r\n          ? (eventData[eventPos].totalScores as number)\r\n          : 0;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!loading && page === 1) {\r\n      setFirstPlaceScore(leaderboardData.body[0].score);\r\n    }\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div className=\"flex w-full flex-col items-center gap-4\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        {prettyEventNames[leaderboardType]} Leaderboard\r\n      </p>\r\n\r\n      <div className=\"flex gap-4\">\r\n        <div className=\"flex flex-col gap-2 items-center\">\r\n          <SelectionRow\r\n            selectionId={leaderboardType}\r\n            selectionName={leaderboardType}\r\n            selections={[\r\n              {\r\n                ids: [\"Race\"],\r\n                name: \"Race\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"Race\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n              {\r\n                ids: [\"Boss\", \"Boss2\", \"Boss3\", \"Boss4\"],\r\n                name: \"Boss\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"Boss\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n              {\r\n                ids: [\"CtTeam\", \"CtPlayer\"],\r\n                name: \"Contested Territory\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"CtTeam\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n            ]}\r\n          />\r\n\r\n          {leaderboardType === \"CtTeam\" || leaderboardType === \"CtPlayer\" ? (\r\n            <SelectionRow\r\n              selectionId={leaderboardType}\r\n              selectionName={leaderboardType}\r\n              selections={[\r\n                {\r\n                  ids: [\"CtTeam\"],\r\n                  name: \"Team\",\r\n                  onClickFunction: () => {\r\n                    setLeaderboardType(\"CtTeam\");\r\n                    setPage(1);\r\n                  },\r\n                },\r\n                {\r\n                  ids: [\"CtPlayer\"],\r\n                  name: \"Player\",\r\n                  onClickFunction: () => {\r\n                    setLeaderboardType(\"CtPlayer\");\r\n                    setPage(1);\r\n                  },\r\n                },\r\n              ]}\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n\r\n          {leaderboardType === \"Boss\" ||\r\n          leaderboardType === \"Boss2\" ||\r\n          leaderboardType === \"Boss3\" ||\r\n          leaderboardType === \"Boss4\" ? (\r\n            <>\r\n              <SelectionRow\r\n                selectionId={bossMode}\r\n                selectionName={bossMode}\r\n                selections={[\r\n                  {\r\n                    ids: [\"Standard\"],\r\n                    name: \"Standard\",\r\n                    onClickFunction: () => {\r\n                      setBossMode(\"Standard\");\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Elite\"],\r\n                    name: \"Elite\",\r\n                    onClickFunction: () => {\r\n                      setBossMode(\"Elite\");\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n              <SelectionRow\r\n                selectionId={leaderboardType}\r\n                selectionName={leaderboardType}\r\n                selections={[\r\n                  {\r\n                    ids: [\"Boss\"],\r\n                    name: \"Solo\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss\");\r\n                      setAlert({\r\n                        alertType: \"alert\",\r\n                        message: \"\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss2\"],\r\n                    name: \"Duo\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss2\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported yet. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss3\"],\r\n                    name: \"Trio\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss3\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported yet. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss4\"],\r\n                    name: \"Quad\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss4\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported yet. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"divider divider-horizontal\" />\r\n        {!loading ? (\r\n          <div className=\"flex items-center gap-4\">\r\n            <p className=\"text-nowrap\">\r\n              Select a {prettyEventNames[leaderboardType]} event:\r\n            </p>\r\n            <select\r\n              id=\"tile-select\"\r\n              className=\"select select-bordered w-full max-w-xs\"\r\n              onChange={(e) => {\r\n                console.log(e.target.options.selectedIndex);\r\n                setEventPos(e.target.options.selectedIndex);\r\n              }}\r\n              value={\r\n                eventData[eventPos].name\r\n                  ? eventData[eventPos].name\r\n                  : eventData[eventPos].id\r\n              }\r\n            >\r\n              {eventData.map((x, index) => (\r\n                <option key={index}>{x.name ? x.name : x.id}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        ) : (\r\n          <span className=\"loading loading-spinner loading-lg\"></span>\r\n        )}\r\n      </div>\r\n\r\n      {!loading ? (\r\n        <>\r\n          <div className=\"join\">\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(1)}\r\n            >\r\n              «\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev - 1)}\r\n            >\r\n              ‹\r\n            </button>\r\n            <label className=\"input join-item bg-base-200 hover:bg-base-300 flex items-center gap-2 z-50\">\r\n              {/* <img src={leastCashImage} className=\"w-[28px]\" /> */}\r\n              <input\r\n                className=\"font-medium text-lg max-w-40 text-center\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"Score\"\r\n                value={page}\r\n                onChange={handlePageInput}\r\n              />\r\n            </label>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev + 1)}\r\n            >\r\n              ›\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn btn-disabled tooltip\" +\r\n                (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(25)}\r\n              data-tip=\"I don't know the max pages for this event.\"\r\n            >\r\n              »\r\n            </button>\r\n          </div>\r\n\r\n          <p>\r\n            Showing players{\" \"}\r\n            {appendOrdinalSuffix((page - 1) * leaderboardData.body.length + 1)}-\r\n            {appendOrdinalSuffix(page * leaderboardData.body.length)} of{\" \"}\r\n            {getTotalScores().toLocaleString()} entries.\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {alert.message.length > 0 ? (\r\n        <div role=\"alert\" className={\"alert w-2/3 \" + alert.alertType}>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"stroke-current shrink-0 h-6 w-6\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2\"\r\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n            />\r\n          </svg>\r\n          <span>{alert.message}</span>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {error ? (\r\n        <p>Failed to grab data.</p>\r\n      ) : (\r\n        <>\r\n          {!loading ? (\r\n            leaderboardData.body.map((entry, index) => (\r\n              <LeaderboardCard\r\n                profileData={profileData[entry.profile]}\r\n                entry={entry}\r\n                index={index + (page - 1) * leaderboardData.body.length}\r\n                event={eventData[eventPos]}\r\n                eventType={leaderboardType}\r\n                delta={entry.score - firstPlaceScore}\r\n                key={index}\r\n                bossMode={bossMode}\r\n              />\r\n            ))\r\n          ) : (\r\n            <div className=\"flex flex-col gap-4 w-full py-2 items-center\">\r\n              <div className=\"skeleton h-14 w-2/3\" />\r\n              <div className=\"skeleton h-14 w-2/3\" />\r\n              <div className=\"skeleton h-14 w-2/3\" />\r\n              <div className=\"skeleton h-14 w-2/3\" />\r\n              <div className=\"skeleton h-14 w-2/3\" />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n","import { Tower } from \"types/ct\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  ctTeamMedalImages,\r\n  raceMedalImages,\r\n} from \"./formatters\";\r\nimport { EventType } from \"types/events\";\r\nimport ctIds from \"configs/ctIds.config\";\r\n\r\nexport type TowerType = \"primary\" | \"military\" | \"magic\" | \"support\" | \"hero\";\r\n\r\nexport const roundEven5 = (num: number) => {\r\n  if (num % 5 === 2.5) {\r\n    return Math.floor(num / 5) * 5;\r\n  }\r\n  return Math.round(num / 5) * 5;\r\n};\r\n\r\nexport const convertMsToTimeFormat = (ms: number): string => {\r\n  // Calculate the hours, minutes, seconds, and milliseconds\r\n  const hours = Math.floor(ms / 3600000);\r\n  const minutes = Math.floor((ms % 3600000) / 60000);\r\n  const seconds = Math.floor((ms % 60000) / 1000);\r\n  const milliseconds = Math.floor((ms % 1000) / 10); // Extract two digits of milliseconds\r\n\r\n  // Format each part to ensure two digits\r\n  const formattedHours = hours > 0 ? hours.toString().padStart(2, \"0\") : \"\";\r\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\r\n  const formattedSeconds = seconds.toString().padStart(2, \"0\");\r\n  const formattedMilliseconds = milliseconds.toString().padStart(2, \"0\");\r\n\r\n  // Combine and return the formatted string\r\n  return formattedHours\r\n    ? `${formattedHours}:${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`\r\n    : `${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`;\r\n};\r\n\r\nexport const timeAgo = (timestamp: number): string => {\r\n  const now = Date.now();\r\n  const elapsed = now - timestamp;\r\n\r\n  const msPerSecond = 1000;\r\n  const msPerMinute = msPerSecond * 60;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    const seconds = Math.floor(elapsed / msPerSecond);\r\n    return `${seconds} second${seconds !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerHour) {\r\n    const minutes = Math.floor(elapsed / msPerMinute);\r\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerDay) {\r\n    const hours = Math.floor(elapsed / msPerHour);\r\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\r\n  } else {\r\n    const days = Math.floor(elapsed / msPerDay);\r\n    return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\r\n  }\r\n};\r\n\r\nexport const formatGameEntityName = (entity: string): string => {\r\n  const wordsToExclude = [\"or\", \"the\", \"a\", \"of\"];\r\n\r\n  return entity\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space before capitals\r\n    .replace(/\\b(Or|The|A|Of)\\b/g, (match) => match.toLowerCase()); // Lowercase specific words\r\n};\r\n\r\nexport const formatToUpperCase = (entity: string): string => {\r\n  return entity\r\n    .split(\"_\")\r\n    .map((word) => {\r\n      return word.charAt(0).toUpperCase() + word.slice(1);\r\n    })\r\n    .join(\"\");\r\n};\r\n\r\nexport const placeToRaceMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return raceMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return raceMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return raceMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return raceMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return raceMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return raceMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return raceMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return raceMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return raceMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossNormalMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossNormalMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossNormalMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossNormalMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossNormalMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossNormalMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossNormalMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossNormalMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossNormalMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossNormalMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossEliteMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossEliteMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossEliteMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossEliteMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossEliteMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossEliteMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossEliteMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossEliteMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossEliteMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossEliteMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtPlayerMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place <= 25) {\r\n    return ctPlayerMedalImages.diamond;\r\n  } else if (place <= 100) {\r\n    return ctPlayerMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return ctPlayerMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return ctPlayerMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctPlayerMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return ctPlayerMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctPlayerMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtTeamMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return ctTeamMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return ctTeamMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return ctTeamMedalImages.diamond;\r\n  } else if (place <= 25) {\r\n    return ctTeamMedalImages.gold_diamond;\r\n  } else if (place <= 100) {\r\n    return ctTeamMedalImages.double_gold;\r\n  } else if (percentile <= 1) {\r\n    return ctTeamMedalImages.gold_silver;\r\n  } else if (percentile <= 10) {\r\n    return ctTeamMedalImages.double_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctTeamMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctTeamMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const appendOrdinalSuffix = (number: number): string => {\r\n  const j = number % 10;\r\n  const k = number % 100;\r\n  if (j === 1 && k !== 11) {\r\n    return number + \"st\";\r\n  }\r\n  if (j === 2 && k !== 12) {\r\n    return number + \"nd\";\r\n  }\r\n  if (j === 3 && k !== 13) {\r\n    return number + \"rd\";\r\n  }\r\n  return number + \"th\";\r\n};\r\n\r\nexport const convertGameTypeToString = (gameType: number): string => {\r\n  switch (gameType) {\r\n    case 2:\r\n      return \"Race\";\r\n    case 4:\r\n      return \"Boss\";\r\n    case 8:\r\n      return \"LeastCash\";\r\n    case 9:\r\n      return \"LeastTiers\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const towerTypes: { [key in Tower]: TowerType } = {\r\n  Alchemist: \"magic\",\r\n  BananaFarm: \"support\",\r\n  BeastHandler: \"support\",\r\n  BoomerangMonkey: \"primary\",\r\n  BombShooter: \"primary\",\r\n  DartMonkey: \"primary\",\r\n  DartlingGunner: \"military\",\r\n  Druid: \"magic\",\r\n  EngineerMonkey: \"support\",\r\n  GlueGunner: \"primary\",\r\n  HeliPilot: \"military\",\r\n  IceMonkey: \"primary\",\r\n  Mermonkey: \"magic\",\r\n  MonkeyAce: \"military\",\r\n  MonkeyBuccaneer: \"military\",\r\n  MonkeySub: \"military\",\r\n  MonkeyVillage: \"support\",\r\n  MortarMonkey: \"military\",\r\n  NinjaMonkey: \"magic\",\r\n  SniperMonkey: \"military\",\r\n  SpikeFactory: \"support\",\r\n  SuperMonkey: \"magic\",\r\n  TackShooter: \"primary\",\r\n  WizardMonkey: \"magic\",\r\n  // Heroes\r\n  AdmiralBrickell: \"hero\",\r\n  Adora: \"hero\",\r\n  Benjamin: \"hero\",\r\n  CaptainChurchill: \"hero\",\r\n  Corvus: \"hero\",\r\n  Etienne: \"hero\",\r\n  Ezili: \"hero\",\r\n  Geraldo: \"hero\",\r\n  Gwendolin: \"hero\",\r\n  ObynGreenfoot: \"hero\",\r\n  PatFusty: \"hero\",\r\n  Psi: \"hero\",\r\n  Quincy: \"hero\",\r\n  Rosalia: \"hero\",\r\n  Sauda: \"hero\",\r\n  StrikerJones: \"hero\",\r\n  ChosenPrimaryHero: \"hero\",\r\n};\r\n\r\nexport const prettyEventNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Boss\",\r\n  Boss2: \"Boss\",\r\n  Boss3: \"Boss\",\r\n  Boss4: \"Boss\",\r\n  CtPlayer: \"Contested Territory\",\r\n  CtTeam: \"Contested Territory\",\r\n};\r\n\r\nexport const prettyNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Solo\",\r\n  Boss2: \"Duo\",\r\n  Boss3: \"Trio\",\r\n  Boss4: \"Quad\",\r\n  CtPlayer: \"Player\",\r\n  CtTeam: \"Team\",\r\n};\r\n"],"names":["_ref","_entry$otherPlayers","profileData","entry","index","event","eventType","delta","bossMode","handleDelta","scoreString","isLowerBad","convertMsToTimeFormat","scoringType","toLocaleString","_jsxs","className","children","style","backgroundImage","undefined","concat","bannerURL","onClick","console","log","profile","handleMedal","medal","placeToRaceMedal","totalScores","placeToBossNormalMedal","totalScores_standard","placeToBossEliteMedal","placeToCtTeamMedal","totalScores_team","placeToCtPlayerMedal","totalScores_player","_jsx","src","appendOrdinalSuffix","avatarURL","displayName","_Fragment","Object","keys","raceMedalImages","filter","_medalsRace","formatToUpperCase","slice","map","_profileData$_medalsR","raceMedalReward","handleMainScore","image","score","scoreParts","name","leastCashImage","leastTiersImage","ctPointsImage","handleSecondaryScore","dataTip","timeAgo","start","part","Date","otherPlayers","player","_profileData$_medalsR2","selectionName","selectionId","selections","selection","ids","includes","onClickFunction","Leaderboard","alert","setAlert","useState","alertType","message","leaderboardType","setLeaderboardType","eventPos","setEventPos","page","setPage","setBossMode","firstPlaceScore","setFirstPlaceScore","data","leaderboardData","events","eventData","loading","error","useLeaderboard","setData","setEvents","setLoading","setError","setProfileData","useMemo","bossUrl","ctUrl","headers","mode","async","response","racesResponse","fetch","raceData","json","body","leaderboard","bossesResponse","bossData","leaderboard_elite_players_1","leaderboard_standard_players_1","ctResponse","ctData","leaderboard_team","leaderboard_player","ok","Error","jsonData","success","nextPlayersToCheck","players","indecesToSplice","i","length","playersEntry","currentPlayerIndex","j","push","reverse","x","splice","fetchData","useEffect","prettyEventNames","SelectionRow","id","onChange","e","target","options","selectedIndex","value","prev","type","inputMode","placeholder","test","numVal","Number","next","getTotalScores","role","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","LeaderboardCard","roundEven5","num","Math","floor","round","ms","hours","minutes","seconds","milliseconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","formattedMilliseconds","timestamp","elapsed","now","msPerMinute","msPerSecond","msPerHour","msPerDay","days","formatGameEntityName","entity","replace","match","toLowerCase","split","word","charAt","toUpperCase","join","place","totalEntries","percentile","black_diamond","red_diamond","diamond","gold_diamond","double_gold","gold_silver","double_silver","silver","bronze","bossNormalMedalImages","bossEliteMedalImages","ctPlayerMedalImages","ctTeamMedalImages","number","k","convertGameTypeToString","gameType","towerTypes","Alchemist","BananaFarm","BeastHandler","BoomerangMonkey","BombShooter","DartMonkey","DartlingGunner","Druid","EngineerMonkey","GlueGunner","HeliPilot","IceMonkey","Mermonkey","MonkeyAce","MonkeyBuccaneer","MonkeySub","MonkeyVillage","MortarMonkey","NinjaMonkey","SniperMonkey","SpikeFactory","SuperMonkey","TackShooter","WizardMonkey","AdmiralBrickell","Adora","Benjamin","CaptainChurchill","Corvus","Etienne","Ezili","Geraldo","Gwendolin","ObynGreenfoot","PatFusty","Psi","Quincy","Rosalia","Sauda","StrikerJones","ChosenPrimaryHero","Race","Boss","Boss2","Boss3","Boss4","CtPlayer","CtTeam"],"sourceRoot":""}