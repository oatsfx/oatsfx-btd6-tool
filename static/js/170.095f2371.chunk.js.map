{"version":3,"file":"static/js/170.095f2371.chunk.js","mappings":"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","sources":["hooks/useLocalRoundData.tsx","pages/Rounds/Rounds.tsx","pages/Rounds/index.tsx","types/roundSet.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Bloon, RoundSet, RoundSetDef } from \"types/roundSet\";\r\n\r\nexport const useLocalRoundData = (pos: number) => {\r\n  const [data, setData] = useState<RoundSet>({} as RoundSet);\r\n\r\n  const roundSetsDefs: RoundSetDef[] = [\r\n    { name: \"Regular\", path: \"data/OriginalRounds.json\", isComplete: true },\r\n    {\r\n      name: \"Alternate Bloons Rounds\",\r\n      path: \"data/alternateRound140.json\",\r\n      isComplete: true,\r\n    },\r\n    { name: \"Bloonarius\", path: \"data/bloonarius.json\", isComplete: true },\r\n    { name: \"Lych\", path: \"data/lych.json\", isComplete: true },\r\n    { name: \"Vortex\", path: \"data/vortex.json\", isComplete: true },\r\n    { name: \"Dreadbloon\", path: \"data/dreadbloon.json\", isComplete: true },\r\n    { name: \"Phayze\", path: \"data/phayze.json\", isComplete: true },\r\n    {\r\n      name: \"Race #291: Density Insanity\",\r\n      path: \"data/raceExperiment.json\",\r\n      isComplete: true,\r\n    },\r\n  ];\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(roundSetsDefs[pos].path);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        jsonData.rounds = jsonData.rounds.filter(\r\n          (x: any) => x.roundNumber !== 0\r\n        );\r\n        const uniqueBloons: Bloon[] = [];\r\n        for (let round of jsonData.rounds) {\r\n          for (let group of round.bloonGroups) {\r\n            if (!uniqueBloons.includes(group.bloon)) {\r\n              uniqueBloons.push(group.bloon);\r\n            }\r\n          }\r\n        }\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [pos]);\r\n\r\n  return { data, roundSetsDefs, loading };\r\n};\r\n","import { group } from \"console\";\r\nimport { useLocalRoundData } from \"hooks/useLocalRoundData\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Bloon,\r\n  bloonArray,\r\n  getRoundDurationFrameMs,\r\n  getRoundDurationMs,\r\n  Round,\r\n} from \"types/roundSet\";\r\nimport {\r\n  convertMsToSecondsFormat,\r\n  convertMsToTimeFormat,\r\n} from \"util/converters\";\r\nimport { bloonImage, bloonStyle } from \"util/formatters\";\r\nimport { FaFilter } from \"react-icons/fa\";\r\nimport { Loading } from \"components/Loading\";\r\n\r\nconst Rounds: React.FC = () => {\r\n  const [roundSetPos, setRoundSetPos] = useState(0);\r\n\r\n  const [selectedBloons, setSelectedBloons] = useState<Bloon[]>([]);\r\n  const [ignoredBloons, setIgnoredBloons] = useState<Bloon[]>([]);\r\n\r\n  const [showMissing, setShowMissing] = useState(false);\r\n\r\n  const {\r\n    data: roundData,\r\n    roundSetsDefs: roundSets,\r\n    loading: roundLoading,\r\n  } = useLocalRoundData(roundSetPos);\r\n\r\n  const handleSelection = (bloon: Bloon) => {\r\n    const newSelectedBloons = [...selectedBloons];\r\n    const newIgnoredBloons = [...ignoredBloons];\r\n\r\n    if (newSelectedBloons.includes(bloon)) {\r\n      const index = newSelectedBloons.indexOf(bloon);\r\n      newSelectedBloons.splice(index, 1);\r\n      newIgnoredBloons.push(bloon);\r\n    } else if (newIgnoredBloons.includes(bloon)) {\r\n      const index = newIgnoredBloons.indexOf(bloon);\r\n      newIgnoredBloons.splice(index, 1);\r\n    } else {\r\n      newSelectedBloons.push(bloon);\r\n    }\r\n    setSelectedBloons(newSelectedBloons);\r\n    setIgnoredBloons(newIgnoredBloons);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const newSelectedBloons = selectedBloons.reduce((acc: Bloon[], bloon) => {\r\n      console.log(bloon);\r\n      if (\r\n        roundData.rounds.some((round) => {\r\n          return round.bloonGroups.some((group) => {\r\n            return group.bloon === bloon;\r\n          });\r\n        })\r\n      ) {\r\n        acc.push(bloon);\r\n      }\r\n      return acc;\r\n    }, []);\r\n    const newIgnoredBloons = ignoredBloons.reduce((acc: Bloon[], bloon) => {\r\n      console.log(bloon);\r\n      if (\r\n        roundData.rounds.some((round) => {\r\n          return round.bloonGroups.some((group) => {\r\n            return group.bloon === bloon;\r\n          });\r\n        })\r\n      ) {\r\n        acc.push(bloon);\r\n      }\r\n      return acc;\r\n    }, []);\r\n    setSelectedBloons(newSelectedBloons);\r\n    setIgnoredBloons(newIgnoredBloons);\r\n  }, [roundData]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center align-center justify-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Rounds Utility\r\n      </p>\r\n\r\n      {roundLoading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div className=\"flex flex-col w-5/6 items-center justify-center align-center gap-2\">\r\n          <div className=\"flex items-center justify-center gap-6 w-full\">\r\n            <div className=\"flex items-center justify-center gap-6\">\r\n              <p>Round Set: </p>\r\n              <select\r\n                id=\"tile-select\"\r\n                className=\"select select-bordered max-w-xs\"\r\n                onChange={(e) => {\r\n                  setRoundSetPos(e.target.options.selectedIndex);\r\n                }}\r\n                value={roundSets[roundSetPos].name}\r\n              >\r\n                {roundSets.map((x, index) => (\r\n                  <option key={index}>{x.name}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <button\r\n              className={\"btn\"}\r\n              onClick={() =>\r\n                (\r\n                  document.getElementById(\"tower-modal\") as HTMLFormElement\r\n                ).showModal()\r\n              }\r\n            >\r\n              <FaFilter size={18} />\r\n              Filters\r\n            </button>\r\n          </div>\r\n          <dialog id=\"tower-modal\" className=\"modal\">\r\n            <div className=\"modal-box max-w-3xl\">\r\n              <h3 className=\"font-bold text-lg flex gap-2 items-center\">\r\n                <FaFilter size={14} />\r\n                Filters\r\n              </h3>\r\n              <p className=\"py-4\">\r\n                Add or remove Bloon types when displaying Rounds.\r\n              </p>\r\n\r\n              <div className=\"flex items-center justify-center gap-6\">\r\n                <p>Show Missing Bloons: </p>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"checkbox\"\r\n                  onClick={() => setShowMissing((x) => !x)}\r\n                />\r\n                <button\r\n                  className=\"btn btn-sm outline outline-1 outline-error text-error\"\r\n                  onClick={() => {\r\n                    setIgnoredBloons([]);\r\n                    setSelectedBloons([]);\r\n                  }}\r\n                >\r\n                  Reset Filters\r\n                </button>\r\n              </div>\r\n              <div className=\"flex flex-col items-center\">\r\n                <div className=\"flex w-full gap-4\">\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200\">\r\n                    <p className=\"font-semibold\">Included Bloons</p>\r\n                    <div className=\"flex w-full px-12 py-4 gap-2 flex-wrap items-center justify-center\">\r\n                      {selectedBloons.map((bloon) => (\r\n                        <button\r\n                          className={\r\n                            \"py-2 px-2 transition outline outline-0 ease-in-out bg-opacity-20 border-b\" +\r\n                            (selectedBloons.includes(bloon)\r\n                              ? \" bg-success bg-opacity-25 border-success outline-success\"\r\n                              : ignoredBloons.includes(bloon)\r\n                              ? \" bg-error bg-opacity-25 border-error outline-error\"\r\n                              : \" bg-black\") +\r\n                            (!roundData.rounds.some((round) => {\r\n                              return round.bloonGroups.some((group) => {\r\n                                return group.bloon === bloon;\r\n                              });\r\n                            })\r\n                              ? \" cursor-not-allowed hover:outline-white/25 hover:border-b\"\r\n                              : \" hover:cursor-pointer hover:bg-opacity-70 hover:outline-1\")\r\n                          }\r\n                          onClick={() => {\r\n                            handleSelection(bloon);\r\n                          }}\r\n                          disabled={\r\n                            !roundData.rounds.some((round) => {\r\n                              return round.bloonGroups.some((group) => {\r\n                                return group.bloon === bloon;\r\n                              });\r\n                            })\r\n                          }\r\n                          key={bloon}\r\n                        >\r\n                          <img\r\n                            className={\r\n                              \"h-7\" +\r\n                              (roundData.rounds.some((round) => {\r\n                                return round.bloonGroups.some((group) => {\r\n                                  return group.bloon === bloon;\r\n                                });\r\n                              })\r\n                                ? \"\"\r\n                                : \" opacity-25\")\r\n                            }\r\n                            src={bloonImage[bloon]}\r\n                          />\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200\">\r\n                    <p className=\"font-semibold\">Excluded Bloons</p>\r\n                    <div className=\"flex w-full px-12 py-4 gap-2 flex-wrap items-center justify-center\">\r\n                      {ignoredBloons.map((bloon) => (\r\n                        <button\r\n                          className={\r\n                            \"py-2 px-2 transition outline outline-0 ease-in-out bg-opacity-20 border-b\" +\r\n                            (selectedBloons.includes(bloon)\r\n                              ? \" bg-success bg-opacity-25 border-success outline-success\"\r\n                              : ignoredBloons.includes(bloon)\r\n                              ? \" bg-error bg-opacity-25 border-error outline-error\"\r\n                              : \" bg-black\") +\r\n                            (!roundData.rounds.some((round) => {\r\n                              return round.bloonGroups.some((group) => {\r\n                                return group.bloon === bloon;\r\n                              });\r\n                            })\r\n                              ? \" cursor-not-allowed hover:outline-white/25 hover:border-b\"\r\n                              : \" hover:cursor-pointer hover:bg-opacity-70 hover:outline-1\")\r\n                          }\r\n                          onClick={(e) => {\r\n                            handleSelection(bloon);\r\n                          }}\r\n                          disabled={\r\n                            !roundData.rounds.some((round) => {\r\n                              return round.bloonGroups.some((group) => {\r\n                                return group.bloon === bloon;\r\n                              });\r\n                            })\r\n                          }\r\n                          key={bloon}\r\n                        >\r\n                          <img\r\n                            className={\r\n                              \"h-7\" +\r\n                              (roundData.rounds.some((round) => {\r\n                                return round.bloonGroups.some((group) => {\r\n                                  return group.bloon === bloon;\r\n                                });\r\n                              })\r\n                                ? \"\"\r\n                                : \" opacity-25\")\r\n                            }\r\n                            src={bloonImage[bloon]}\r\n                          />\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex flex-wrap items-center justify-center gap-2\">\r\n                  {bloonArray\r\n                    .filter((x) =>\r\n                      !showMissing\r\n                        ? roundData.rounds.some((round) => {\r\n                            return round.bloonGroups.some((group) => {\r\n                              return group.bloon === x;\r\n                            });\r\n                          })\r\n                        : true\r\n                    )\r\n                    .filter(\r\n                      (x) =>\r\n                        !selectedBloons.includes(x) &&\r\n                        !ignoredBloons.includes(x)\r\n                    )\r\n                    .map((bloon) => (\r\n                      <button\r\n                        className={\r\n                          \"py-2 px-2 transition outline outline-0 ease-in-out bg-opacity-20 border-b\" +\r\n                          (selectedBloons.includes(bloon)\r\n                            ? \" bg-success bg-opacity-25 border-success outline-success\"\r\n                            : ignoredBloons.includes(bloon)\r\n                            ? \" bg-error bg-opacity-25 border-error outline-error\"\r\n                            : \" bg-black\") +\r\n                          (!roundData.rounds.some((round) => {\r\n                            return round.bloonGroups.some((group) => {\r\n                              return group.bloon === bloon;\r\n                            });\r\n                          })\r\n                            ? \" cursor-not-allowed hover:outline-white/25 hover:border-b\"\r\n                            : \" hover:cursor-pointer hover:bg-opacity-70 hover:outline-1\")\r\n                        }\r\n                        onClick={(e) => {\r\n                          handleSelection(bloon);\r\n                        }}\r\n                        disabled={\r\n                          !roundData.rounds.some((round) => {\r\n                            return round.bloonGroups.some((group) => {\r\n                              return group.bloon === bloon;\r\n                            });\r\n                          })\r\n                        }\r\n                        key={bloon}\r\n                      >\r\n                        <img\r\n                          className={\r\n                            \"h-7\" +\r\n                            (roundData.rounds.some((round) => {\r\n                              return round.bloonGroups.some((group) => {\r\n                                return group.bloon === bloon;\r\n                              });\r\n                            })\r\n                              ? \"\"\r\n                              : \" opacity-25\")\r\n                          }\r\n                          src={bloonImage[bloon]}\r\n                        />\r\n                      </button>\r\n                    ))}\r\n                </div>\r\n                <i>\r\n                  Clicking a bloon includes it. Click it again to exclude it.\r\n                </i>\r\n              </div>\r\n\r\n              <div className=\"modal-action\">\r\n                <form method=\"dialog\">\r\n                  {/* if there is a button in form, it will close the modal */}\r\n                  <button className=\"btn outline outline-1 outline-error text-error\">\r\n                    Close\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <form method=\"dialog\" className=\"modal-backdrop\">\r\n              <button>close</button>\r\n            </form>\r\n          </dialog>\r\n          <p>\r\n            Showing{\" \"}\r\n            {\r\n              roundData.rounds.filter((round) => {\r\n                if (\r\n                  ignoredBloons.some((bloon) =>\r\n                    round.bloonGroups.some((group) => group.bloon === bloon)\r\n                  )\r\n                ) {\r\n                  return false;\r\n                }\r\n                if (\r\n                  selectedBloons.every((bloon) =>\r\n                    round.bloonGroups.some((group) => group.bloon === bloon)\r\n                  )\r\n                ) {\r\n                  return true;\r\n                }\r\n              }).length\r\n            }{\" \"}\r\n            round\r\n            {roundData.rounds.filter((round) => {\r\n              if (\r\n                ignoredBloons.some((bloon) =>\r\n                  round.bloonGroups.some((group) => group.bloon === bloon)\r\n                )\r\n              ) {\r\n                return false;\r\n              }\r\n              if (\r\n                selectedBloons.every((bloon) =>\r\n                  round.bloonGroups.some((group) => group.bloon === bloon)\r\n                )\r\n              ) {\r\n                return true;\r\n              }\r\n            }).length === 1\r\n              ? \"\"\r\n              : \"s\"}{\" \"}\r\n            of {roundData.rounds.length}\r\n          </p>\r\n          {roundData.rounds\r\n            .filter((round) => {\r\n              if (\r\n                ignoredBloons.some((bloon) =>\r\n                  round.bloonGroups.some((group) => group.bloon === bloon)\r\n                )\r\n              ) {\r\n                return false;\r\n              }\r\n              if (\r\n                selectedBloons.every((bloon) =>\r\n                  round.bloonGroups.some((group) => group.bloon === bloon)\r\n                )\r\n              ) {\r\n                return true;\r\n              }\r\n            })\r\n            .map((round) => (\r\n              <div\r\n                className=\"flex flex-col bg-black/25 p-4 gap-2 w-full\"\r\n                id={\"round-\" + round.roundNumber}\r\n                key={round.roundNumber}\r\n              >\r\n                <div className=\"flex justify-between gap-4 bg-black/25 px-2\">\r\n                  <p className=\"text-xl font-semibold\">\r\n                    Round {round.roundNumber}\r\n                  </p>\r\n                  <p className=\"text-lg font-semibold\">\r\n                    {convertMsToSecondsFormat(getRoundDurationMs(round))}s\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex flex-col gap-2\">\r\n                  {round.bloonGroups\r\n                    .sort((x, y) =>\r\n                      x.start !== y.start\r\n                        ? x.start - y.start\r\n                        : x.start + x.duration - (y.start + y.duration)\r\n                    )\r\n                    .map((group, i) => (\r\n                      <div className=\"flex gap-4\" key={i}>\r\n                        <div\r\n                          className=\"flex items-center justify-center gap-2 text-nowrap w-[5rem] tooltip\"\r\n                          data-tip={group.bloon}\r\n                        >\r\n                          <img\r\n                            className=\"h-6\"\r\n                            style={{\r\n                              left: `${\r\n                                ((group.start * 1000) /\r\n                                  getRoundDurationMs(round)) *\r\n                                100\r\n                              }%`,\r\n                            }}\r\n                            src={bloonImage[group.bloon]}\r\n                          />\r\n                          <p className=\"text-sm\">x{group.count}</p>\r\n                        </div>\r\n                        <div className=\"flex w-full\">\r\n                          <div\r\n                            className={\r\n                              \"flex rounded-sm items-center justify-center relative tooltip \" +\r\n                              bloonStyle[group.bloon]\r\n                            }\r\n                            style={{\r\n                              width: `${\r\n                                ((group.duration * 1000) /\r\n                                  getRoundDurationMs(round)) *\r\n                                100\r\n                              }%`,\r\n                              left: `${\r\n                                ((group.start * 1000) /\r\n                                  getRoundDurationMs(round)) *\r\n                                100\r\n                              }%`,\r\n                            }}\r\n                            data-tip={group.bloon}\r\n                          >\r\n                            <p className=\"text-nowrap text-sm text-white font-semibold drop-shadow-[0_1px_1px_rgba(0,0,0,1)]\">\r\n                              {Math.round(group.start * 100) / 100}s -{\" \"}\r\n                              {Math.round(\r\n                                (group.start + group.duration) * 100\r\n                              ) / 100}\r\n                              s\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      )}\r\n      <div className=\"divider\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rounds;\r\n","import Rounds from \"./Rounds\";\r\nexport default Rounds;\r\n","export type RoundSet = {\r\n  rounds: Round[];\r\n  scale?: number;\r\n};\r\n\r\nexport type Round = {\r\n  bloonGroups: BloonGroup[];\r\n  roundNumber: number;\r\n  addToRound: boolean;\r\n};\r\n\r\nexport type BloonGroup = {\r\n  bloon: Bloon;\r\n  count: number;\r\n  start: number;\r\n  duration: number;\r\n};\r\n\r\nexport type RoundSetDef = {\r\n  name: string;\r\n  path: string;\r\n  isComplete: boolean;\r\n};\r\n\r\nexport type Bloon =\r\n  | \"Bad\"\r\n  | \"BadFortified\"\r\n  | \"Bfb\"\r\n  | \"BfbFortified\"\r\n  | \"Black\"\r\n  | \"BlackCamo\"\r\n  | \"BlackRegrow\"\r\n  | \"BlackRegrowCamo\"\r\n  | \"Blue\"\r\n  | \"BlueCamo\"\r\n  | \"BlueRegrow\"\r\n  | \"BlueRegrowCamo\"\r\n  | \"Ceramic\"\r\n  | \"CeramicCamo\"\r\n  | \"CeramicFortified\"\r\n  | \"CeramicFortifiedCamo\"\r\n  | \"CeramicRegrow\"\r\n  | \"CeramicRegrowCamo\"\r\n  | \"CeramicRegrowFortified\"\r\n  | \"CeramicRegrowFortifiedCamo\"\r\n  | \"DdtCamo\"\r\n  | \"DdtFortifiedCamo\"\r\n  | \"Green\"\r\n  | \"GreenCamo\"\r\n  | \"GreenRegrow\"\r\n  | \"GreenRegrowCamo\"\r\n  | \"Lead\"\r\n  | \"LeadCamo\"\r\n  | \"LeadFortified\"\r\n  | \"LeadFortifiedCamo\"\r\n  | \"LeadRegrow\"\r\n  | \"LeadRegrowCamo\"\r\n  | \"LeadRegrowFortified\"\r\n  | \"LeadRegrowFortifiedCamo\"\r\n  | \"Moab\"\r\n  | \"MoabFortified\"\r\n  | \"Pink\"\r\n  | \"PinkCamo\"\r\n  | \"PinkRegrow\"\r\n  | \"PinkRegrowCamo\"\r\n  | \"Purple\"\r\n  | \"PurpleCamo\"\r\n  | \"PurpleRegrow\"\r\n  | \"PurpleRegrowCamo\"\r\n  | \"Rainbow\"\r\n  | \"RainbowCamo\"\r\n  | \"RainbowRegrow\"\r\n  | \"RainbowRegrowCamo\"\r\n  | \"Red\"\r\n  | \"RedCamo\"\r\n  | \"RedRegrow\"\r\n  | \"RedRegrowCamo\"\r\n  | \"White\"\r\n  | \"WhiteCamo\"\r\n  | \"WhiteRegrow\"\r\n  | \"WhiteRegrowCamo\"\r\n  | \"Yellow\"\r\n  | \"YellowCamo\"\r\n  | \"YellowRegrow\"\r\n  | \"YellowRegrowCamo\"\r\n  | \"Zebra\"\r\n  | \"ZebraCamo\"\r\n  | \"ZebraRegrow\"\r\n  | \"ZebraRegrowCamo\"\r\n  | \"Zomg\"\r\n  | \"ZomgFortified\";\r\n\r\nexport const bloonArray: Bloon[] = [\r\n  \"Red\",\r\n  \"RedCamo\",\r\n  \"RedRegrow\",\r\n  \"RedRegrowCamo\",\r\n  \"Blue\",\r\n  \"BlueCamo\",\r\n  \"BlueRegrow\",\r\n  \"BlueRegrowCamo\",\r\n  \"Green\",\r\n  \"GreenCamo\",\r\n  \"GreenRegrow\",\r\n  \"GreenRegrowCamo\",\r\n  \"Yellow\",\r\n  \"YellowCamo\",\r\n  \"YellowRegrow\",\r\n  \"YellowRegrowCamo\",\r\n  \"Pink\",\r\n  \"PinkCamo\",\r\n  \"PinkRegrow\",\r\n  \"PinkRegrowCamo\",\r\n  \"Black\",\r\n  \"BlackCamo\",\r\n  \"BlackRegrow\",\r\n  \"BlackRegrowCamo\",\r\n  \"White\",\r\n  \"WhiteCamo\",\r\n  \"WhiteRegrow\",\r\n  \"WhiteRegrowCamo\",\r\n  \"Purple\",\r\n  \"PurpleCamo\",\r\n  \"PurpleRegrow\",\r\n  \"PurpleRegrowCamo\",\r\n  \"Zebra\",\r\n  \"ZebraCamo\",\r\n  \"ZebraRegrow\",\r\n  \"ZebraRegrowCamo\",\r\n  \"Lead\",\r\n  \"LeadCamo\",\r\n  \"LeadFortified\",\r\n  \"LeadFortifiedCamo\",\r\n  \"LeadRegrow\",\r\n  \"LeadRegrowCamo\",\r\n  \"LeadRegrowFortified\",\r\n  \"LeadRegrowFortifiedCamo\",\r\n  \"Rainbow\",\r\n  \"RainbowCamo\",\r\n  \"RainbowRegrow\",\r\n  \"RainbowRegrowCamo\",\r\n  \"Ceramic\",\r\n  \"CeramicCamo\",\r\n  \"CeramicFortified\",\r\n  \"CeramicFortifiedCamo\",\r\n  \"CeramicRegrow\",\r\n  \"CeramicRegrowCamo\",\r\n  \"CeramicRegrowFortified\",\r\n  \"CeramicRegrowFortifiedCamo\",\r\n  \"Moab\",\r\n  \"MoabFortified\",\r\n  \"Bfb\",\r\n  \"BfbFortified\",\r\n  \"Zomg\",\r\n  \"ZomgFortified\",\r\n  \"DdtCamo\",\r\n  \"DdtFortifiedCamo\",\r\n  \"Bad\",\r\n  \"BadFortified\",\r\n];\r\n\r\nexport const getRoundDurationMs = (round: Round): number => {\r\n  const rawDuration = round.bloonGroups.reduce((maxEnd, group) => {\r\n    const endTime = group.start + group.duration;\r\n    return Math.max(maxEnd, endTime);\r\n  }, 0);\r\n\r\n  return Math.round(rawDuration * 100) * 10;\r\n};\r\n\r\nexport const getRoundDurationFrameMs = (round: Round): number => {\r\n  const rawDuration = round.bloonGroups.reduce((maxEnd, group) => {\r\n    const endTime = group.start + group.duration;\r\n    return Math.max(maxEnd, endTime);\r\n  }, 0);\r\n\r\n  return (Math.ceil(rawDuration * 60) / 60) * 1000;\r\n};\r\n"],"names":["useLocalRoundData","pos","data","setData","useState","roundSetsDefs","name","path","isComplete","loading","setLoading","useEffect","async","response","fetch","ok","Error","jsonData","json","rounds","filter","x","roundNumber","uniqueBloons","round","group","bloonGroups","includes","bloon","push","error","console","log","fetchData","Rounds","roundSetPos","setRoundSetPos","selectedBloons","setSelectedBloons","ignoredBloons","setIgnoredBloons","showMissing","setShowMissing","roundData","roundSets","roundLoading","handleSelection","newSelectedBloons","newIgnoredBloons","index","indexOf","splice","reduce","acc","some","_jsxs","className","children","_jsx","Loading","id","onChange","e","target","options","selectedIndex","value","map","onClick","document","getElementById","showModal","FaFilter","size","type","disabled","src","bloonImage","bloonArray","method","every","length","convertMsToSecondsFormat","getRoundDurationMs","sort","y","start","duration","i","style","left","concat","count","bloonStyle","width","Math","rawDuration","maxEnd","endTime","max","getRoundDurationFrameMs","ceil"],"sourceRoot":""}