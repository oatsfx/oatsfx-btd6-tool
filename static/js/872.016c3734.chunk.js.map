{"version":3,"file":"static/js/872.016c3734.chunk.js","mappings":"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","sources":["components/SelectionRow/SelectionRow.tsx","hooks/useCtEvents.tsx","hooks/useLeaderboard.tsx","configs/badges.config.ts","configs/verifiedUsers.config.ts","components/Badges/Badges.tsx","hooks/useProfileData.tsx","components/ProfileModal/ProfileModal.tsx","components/LeaderboardCard/LeaderboardCard.tsx","pages/Leaderboard/Leaderboard.tsx","pages/Leaderboard/index.tsx"],"sourcesContent":["import { EventType } from \"types/events\";\r\n\r\nconst SelectionRow = ({\r\n  selectionName,\r\n  selectionId,\r\n  selections,\r\n}: {\r\n  selectionName: string;\r\n  selectionId: string;\r\n  selections: { ids: string[]; name: string; onClickFunction: () => void }[];\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      {selections.map((selection) => (\r\n        <a\r\n          className={\r\n            \"py-2 px-2 transition ease-in-out border-b bg-black hover:bg-opacity-70 hover:cursor-pointer hover:text-accent hover:border-b-2\" +\r\n            (selection.ids.includes(selectionId)\r\n              ? \" bg-black bg-opacity-30 text-primary border-b-2\"\r\n              : \" bg-opacity-0\")\r\n          }\r\n          onClick={() => {\r\n            selection.onClickFunction();\r\n          }}\r\n          key={selection.name}\r\n        >\r\n          {selection.name}\r\n        </a>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectionRow;\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { CTData, CTSeed, Tile } from \"types/ct\";\r\n\r\nexport const useCtEvents = () => {\r\n  const url = \"https://storage.googleapis.com/btd6-ct-map/event-seeds.json\";\r\n\r\n  const [data, setData] = useState<CTSeed[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: string[] = await response.json();\r\n        //jsonData.reverse();\r\n        const newData: CTSeed[] = jsonData.flatMap((x, i) =>\r\n          x ? [{ id: x, number: i }] : []\r\n        );\r\n        newData.reverse();\r\n        setData(newData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { BossMode, EventType } from \"types/events\";\r\nimport { LeaderboardData, LeaderboardEntry } from \"types/leaderboards\";\r\nimport { Event } from \"types/events\";\r\n\r\nexport const useLeaderboard = (\r\n  eventType: EventType,\r\n  eventPos: number,\r\n  page: number,\r\n  bossMode?: BossMode,\r\n  numOfPages: number = 1\r\n) => {\r\n  const [data, setData] = useState<LeaderboardData<LeaderboardEntry[]>>(\r\n    {} as LeaderboardData<LeaderboardEntry[]>\r\n  );\r\n  const [events, setEvents] = useState<Event[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useMemo(() => {\r\n    const raceUrl = \"https://data.ninjakiwi.com/btd6/races/\";\r\n    const bossUrl = \"https://data.ninjakiwi.com/btd6/bosses/\";\r\n    const ctUrl = \"https://data.ninjakiwi.com/btd6/ct/\";\r\n\r\n    const headers: RequestInit = { mode: \"cors\" };\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(false);\r\n      console.log(\"fetching leaderboards\");\r\n      try {\r\n        let url = \"\";\r\n        if (eventType === \"Race\") {\r\n          const racesResponse = await fetch(raceUrl);\r\n          const raceData = await racesResponse.json();\r\n          setEvents(raceData.body);\r\n\r\n          url = raceData.body[eventPos].leaderboard;\r\n        } else if (eventType === \"Boss\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            url = bossData.body[eventPos].leaderboard_elite_players_1;\r\n          } else {\r\n            url = bossData.body[eventPos].leaderboard_standard_players_1;\r\n          }\r\n        } else if (eventType === \"Boss2\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n              \"2\";\r\n          } else {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) + \"2\";\r\n          }\r\n        } else if (eventType === \"Boss3\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n              \"3\";\r\n          } else {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) + \"3\";\r\n          }\r\n        } else if (eventType === \"Boss4\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n              \"4\";\r\n          } else {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) + \"4\";\r\n          }\r\n        } else if (eventType === \"CtTeam\") {\r\n          const ctResponse = await fetch(ctUrl);\r\n          const ctData = await ctResponse.json();\r\n          setEvents(ctData.body);\r\n\r\n          url = ctData.body[eventPos].leaderboard_team;\r\n        } else {\r\n          const ctResponse = await fetch(ctUrl);\r\n          const ctData = await ctResponse.json();\r\n          setEvents(ctData.body);\r\n          console.log(ctData);\r\n\r\n          url = ctData.body[eventPos].leaderboard_player;\r\n        }\r\n\r\n        const response = await fetch(url + \"?page=\" + page, headers);\r\n\r\n        const jsonData: LeaderboardData<LeaderboardEntry[]> =\r\n          await response.json();\r\n\r\n        if (!jsonData.success) {\r\n          throw new Error(\"Unsuccessful: \" + jsonData.error);\r\n        }\r\n\r\n        // Add additional pages to the original JSON.\r\n        // Start at 1 since we already did the 1st page.\r\n        // This starts us at page 2, assuming page = 1.\r\n        console.log(numOfPages);\r\n        for (let i = 1; i < numOfPages; i++) {\r\n          const response = await fetch(url + \"?page=\" + (page + i), headers);\r\n\r\n          if (!response.ok) {\r\n            throw new Error(\"Failed to fetch data\");\r\n          }\r\n\r\n          const newJsonData: LeaderboardData<LeaderboardEntry[]> =\r\n            await response.json();\r\n\r\n          jsonData.body = jsonData.body.concat(newJsonData.body);\r\n          console.log(\"got page: \", i);\r\n        }\r\n\r\n        if (\r\n          eventType === \"Boss2\" ||\r\n          eventType === \"Boss3\" ||\r\n          eventType === \"Boss4\"\r\n        ) {\r\n          let nextPlayersToCheck = 0;\r\n          switch (eventType) {\r\n            case \"Boss2\":\r\n              nextPlayersToCheck = 1;\r\n              break;\r\n            case \"Boss3\":\r\n              nextPlayersToCheck = 2;\r\n              break;\r\n            case \"Boss4\":\r\n              nextPlayersToCheck = 3;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          const players: { displayName: string; profile: string }[][] = [];\r\n          const indecesToSplice: number[] = [];\r\n          for (let i = 0; i < jsonData.body.length; i++) {\r\n            const playersEntry: { displayName: string; profile: string }[] = [];\r\n            // playersEntry.push({\r\n            //   displayName: jsonData.body[i].displayName,\r\n            //   profile: jsonData.body[i].profile,\r\n            // });\r\n            const currentPlayerIndex = i;\r\n            for (\r\n              let j = currentPlayerIndex + 1;\r\n              j <= currentPlayerIndex + nextPlayersToCheck;\r\n              j++\r\n            ) {\r\n              if (j >= jsonData.body.length) {\r\n                break;\r\n              }\r\n              if (\r\n                jsonData.body[i].scoreParts[0].score ===\r\n                jsonData.body[j].scoreParts[0].score\r\n              ) {\r\n                playersEntry.push({\r\n                  displayName: jsonData.body[j].displayName,\r\n                  profile: jsonData.body[j].profile,\r\n                });\r\n                indecesToSplice.push(j);\r\n                i++;\r\n              }\r\n              players.push(playersEntry);\r\n              jsonData.body[currentPlayerIndex].otherPlayers = playersEntry;\r\n            }\r\n          }\r\n          indecesToSplice.reverse().map((x) => {\r\n            jsonData.body.splice(x, 1);\r\n          });\r\n        }\r\n\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        setError(true);\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [eventType, eventPos, page, bossMode]);\r\n\r\n  return { data, events, loading, error };\r\n};\r\n","const badges = [\r\n  {\r\n    profileUrl:\r\n      \"https://data.ninjakiwi.com/btd6/users/9fbf128f8cc5fcf61c14894f5a25e5259a521fbf9743d96e\",\r\n    badgeName: \"Developer\",\r\n    badgeTip: \"Developed this site.\",\r\n  },\r\n  // {\r\n  //   profileUrl:\r\n  //     \"https://data.ninjakiwi.com/btd6/users/9fbf128f8cc5fcf61c14894f5a25e5259a521fbf9743d96e\",\r\n  //   badgeName: \"Supporter\",\r\n  //   badgeTip: \"Supported the developer.\",\r\n  // },\r\n];\r\n\r\nexport default badges;\r\n","const verifiedUsers = [\r\n  {\r\n    profileUrl:\r\n      \"https://data.ninjakiwi.com/btd6/users/9fbf128f8cc5fcf61c14894f5a25e5259a521fbf9743d96e\",\r\n    name: \"OatsFX\",\r\n  },\r\n  {\r\n    profileUrl:\r\n      \"https://data.ninjakiwi.com/btd6/users/9cb91089ddc5fea31f468c195e70b426cc0d1abe9d44da69\",\r\n    name: \"ISAB\",\r\n  },\r\n];\r\nexport default verifiedUsers;\r\n","import badges from \"configs/badges.config\";\r\nimport verifiedUsers from \"configs/verifiedUsers.config\";\r\nimport { LeaderboardEntry } from \"types/leaderboards\";\r\n\r\nconst Badges = ({ name, profileUrl }: { name: string; profileUrl: string }) => {\r\n  const matchedUser = verifiedUsers.find(\r\n    (x) => x.name.toLowerCase() === name.toLowerCase()\r\n  );\r\n\r\n  return (\r\n    <div className=\"flex gap-1\">\r\n      {badges.some((x) => x.profileUrl === profileUrl) ? (\r\n        badges\r\n          .filter((x) => x.profileUrl === profileUrl)\r\n          .map((badge) => (\r\n            <div\r\n              className=\"badge badge-neutral tooltip bg-opacity-50 badge-sm -mt-[0.3rem] pb-0.5 hover:text-accent\"\r\n              data-tip={badge.badgeTip}\r\n              key={badge.badgeName}\r\n            >\r\n              <p className=\"pointer-events-none\">{badge.badgeName}</p>\r\n            </div>\r\n          ))\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {matchedUser ? (\r\n        <div\r\n          className=\"badge badge-neutral tooltip bg-opacity-50 badge-sm -mt-[0.3rem] pb-0.5 hover:text-accent\"\r\n          data-tip={`This is ${\r\n            matchedUser.profileUrl !== profileUrl ? \"not\" : \"\"\r\n          } the real ${matchedUser.name}.`}\r\n          key={\"verify\"}\r\n        >\r\n          <p className=\"pointer-events-none\">\r\n            {matchedUser.profileUrl !== profileUrl\r\n              ? \"Impersonation\"\r\n              : \"Verified\"}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Badges;\r\n","import { useState } from \"react\";\r\nimport { GuildProfileData, PlayerProfileData } from \"types/leaderboards\";\r\n\r\nexport const useProfileData = (url: string) => {\r\n  const [data, setData] = useState<PlayerProfileData | GuildProfileData>(\r\n    {} as PlayerProfileData\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n  const [fetched, setFetched] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch data\");\r\n      }\r\n      const jsonData = await response.json();\r\n      console.log(url);\r\n      if (jsonData.model.name === \"_btd6userprofile\") {\r\n        setData(jsonData.body as PlayerProfileData);\r\n      } else {\r\n        setData(jsonData.body as GuildProfileData);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n    setFetched(true);\r\n  };\r\n\r\n  return { data, loading, fetchData, fetched };\r\n};\r\n","import rankImage from \"images/misc/rank.webp\";\r\nimport vetRankImage from \"images/misc/rank_veteran.webp\";\r\nimport {\r\n  PlayerProfileData,\r\n  PlayerMedal,\r\n  PlayerEventMedals,\r\n  PlayerCtMedals,\r\n  GuildProfileData,\r\n} from \"types/leaderboards\";\r\nimport { formatToUpperCase } from \"util/converters\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  raceMedalImages,\r\n  raceMedalReward,\r\n} from \"util/formatters\";\r\nimport { Loading } from \"components/Loading\";\r\nimport { Badges } from \"components/Badges\";\r\nimport { useProfileData } from \"hooks/useProfileData\";\r\n\r\nconst ProfileModal = ({\r\n  profileUrl,\r\n  fetched,\r\n  profileData,\r\n  profileLoading,\r\n  isPlayer,\r\n}: {\r\n  profileUrl: string;\r\n  fetched: boolean;\r\n  profileData: PlayerProfileData | GuildProfileData;\r\n  profileLoading: boolean;\r\n  isPlayer: boolean;\r\n}) => {\r\n  const guildData = profileData as GuildProfileData;\r\n  const playerData = profileData as PlayerProfileData;\r\n\r\n  const {\r\n    data: ownerData,\r\n    loading: ownerLoading,\r\n    fetchData,\r\n    fetched: ownerFetched,\r\n  } = useProfileData(guildData.owner);\r\n\r\n  const displayMedals = () => {\r\n    if (isPlayer) {\r\n      return (\r\n        <div className=\"indicator items-center w-full px-12 py-4 gap-2 flex-wrap\">\r\n          {Object.keys(raceMedalImages)\r\n            .filter(\r\n              (medal) =>\r\n                playerData._medalsRace[\r\n                  formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                ]! > 0\r\n            )\r\n            .map((medal) => (\r\n              <div\r\n                className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n              >\r\n                <img\r\n                  src={raceMedalImages[medal as keyof typeof raceMedalImages]}\r\n                  className=\"h-[28px]\"\r\n                />\r\n                <div className=\"indicator-item indicator-bottom indicator-center badge badge-sm bg-opacity-90\">\r\n                  {playerData._medalsRace[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ] ?? 0}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {Object.keys(bossNormalMedalImages)\r\n            .filter(\r\n              (medal) =>\r\n                playerData._medalsBoss[\r\n                  formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                ]! > 0\r\n            )\r\n            .map((medal) => (\r\n              <div\r\n                className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n              >\r\n                <img\r\n                  src={\r\n                    bossNormalMedalImages[medal as keyof typeof raceMedalImages]\r\n                  }\r\n                  className=\"h-[28px]\"\r\n                />\r\n                <div className=\"indicator-item indicator-bottom indicator-center badge badge-sm bg-opacity-90\">\r\n                  {playerData._medalsBoss[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ] ?? 0}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {Object.keys(bossEliteMedalImages)\r\n            .filter(\r\n              (medal) =>\r\n                playerData._medalsBossElite[\r\n                  formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                ]! > 0\r\n            )\r\n            .map((medal) => (\r\n              <div\r\n                className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n              >\r\n                <img\r\n                  src={\r\n                    bossEliteMedalImages[medal as keyof typeof raceMedalImages]\r\n                  }\r\n                  className=\"h-[28px]\"\r\n                />\r\n                <div className=\"indicator-item indicator-bottom indicator-center badge badge-sm bg-opacity-90\">\r\n                  {playerData._medalsBossElite[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ] ?? 0}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {Object.keys(ctPlayerMedalImages)\r\n            .filter(\r\n              (medal) =>\r\n                playerData._medalsCTGlobal[\r\n                  formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                ]! > 0\r\n            )\r\n            .map((medal) =>\r\n              playerData._medalsCTGlobal[\r\n                formatToUpperCase(medal) as keyof PlayerCtMedals\r\n              ]! > 0 ? (\r\n                <div\r\n                  className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                  data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                >\r\n                  <img\r\n                    src={\r\n                      ctPlayerMedalImages[\r\n                        medal as keyof typeof ctPlayerMedalImages\r\n                      ]\r\n                    }\r\n                    className=\"h-[28px]\"\r\n                  />\r\n                  <div className=\"indicator-item indicator-bottom indicator-center badge badge-sm bg-opacity-90\">\r\n                    {playerData._medalsCTGlobal[\r\n                      formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                    ] ?? 0}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )\r\n            )}\r\n        </div>\r\n      );\r\n    } else {\r\n      // We are displaying a team's information. Now, I wish we could display players, but NK can't do that for us...\r\n      return <i className=\"text-xs\">Nothing to see here... Literally</i>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <dialog id={`${profileUrl}`} className=\"modal\">\r\n      <div\r\n        className=\"modal-box max-w-3xl bg-top bg-no-repeat bg-contain outline outline-1 outline-white/25\"\r\n        style={{\r\n          backgroundImage: `linear-gradient(to bottom, rgba(17, 17, 23, 0), rgba(17, 17, 23, 0.5)), url(${profileData.bannerURL})`,\r\n        }}\r\n      >\r\n        <div className=\"modal-action\">\r\n          <form method=\"dialog\">\r\n            {/* if there is a button in form, it will close the modal */}\r\n            <button className=\"btn bg-opacity-80 btn-circle btn-sm outline outline-1 absolute right-6 top-6 outline-error text-error\">\r\n              X\r\n            </button>\r\n          </form>\r\n        </div>\r\n        {fetched && !profileLoading ? (\r\n          <>\r\n            <div className=\"flex gap-4 items-end pt-8\">\r\n              <img\r\n                src={isPlayer ? playerData.avatarURL : guildData.frameURL}\r\n                className=\"w-[80px] h-[80px] rounded-xs\"\r\n              />\r\n              {!isPlayer ? (\r\n                <img\r\n                  src={guildData.iconURL}\r\n                  className=\"w-[80px] h-[80px] rounded-xs absolute\"\r\n                />\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <div className=\"flex flex-col\">\r\n                <div className=\"flex gap-2 items-center\">\r\n                  <p className=\"font-bold font-btd6 text-2xl drop-shadow-[0_1.2px_1.2px_rgba(0,0,0,0.8)]\">\r\n                    {isPlayer ? playerData.displayName : guildData.name}\r\n                  </p>\r\n                  <Badges\r\n                    name={isPlayer ? playerData.displayName : guildData.name}\r\n                    profileUrl={profileUrl}\r\n                  />\r\n                </div>\r\n                {isPlayer ? (\r\n                  <div className=\"flex gap-2\">\r\n                    <div className=\"flex gap-2 tooltip\" data-tip={\"Rank\"}>\r\n                      <img\r\n                        src={rankImage}\r\n                        className=\"h-[32px] drop-shadow-xl\"\r\n                      />\r\n                      <p className=\"absolute pt-1 font-black drop-shadow-[0_1.2px_1.2px_rgba(0,0,0,0.8)] text-center w-[32px] pointer-events-none\">\r\n                        {playerData.rank}\r\n                      </p>\r\n                    </div>\r\n                    {playerData.veteranRank !== 0 ? (\r\n                      <div\r\n                        className=\"flex gap-2 tooltip\"\r\n                        data-tip={\"Veteran Rank\"}\r\n                      >\r\n                        <img\r\n                          src={vetRankImage}\r\n                          className=\"h-[32px] drop-shadow-xl\"\r\n                        />\r\n                        <p className=\"absolute pt-1 font-black drop-shadow-[0_1.2px_1.2px_rgba(0,0,0,0.8)] text-center w-[32px] pointer-events-none\">\r\n                          {playerData.veteranRank}\r\n                        </p>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"flex gap-2\"></div>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex gap-2\">\r\n                    <img className=\"h-[32px] drop-shadow-xl\" />\r\n                    <p className=\"absolute pt-1 font-black drop-shadow-[0_1.2px_1.2px_rgba(0,0,0,0.8)] text-center w-[32px]\">\r\n                      {guildData.status}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            {!isPlayer ? (\r\n              <div className=\"overflow-x-hidden w-full max-h-56 h-32 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                <p className=\"font-semibold text-lg\">\r\n                  Players: {guildData.numMembers}\r\n                </p>\r\n                <ProfileModal\r\n                  profileUrl={guildData.owner}\r\n                  fetched={ownerFetched}\r\n                  profileData={ownerData}\r\n                  profileLoading={ownerLoading}\r\n                  isPlayer={true}\r\n                />\r\n                <button\r\n                  className=\"btn\"\r\n                  onClick={() => {\r\n                    (\r\n                      document.getElementById(\r\n                        `${guildData.owner}`\r\n                      ) as HTMLFormElement\r\n                    ).showModal();\r\n                    fetchData();\r\n                  }}\r\n                >\r\n                  View Owner\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n              <p className=\"font-semibold text-lg\">Medals</p>\r\n\r\n              {displayMedals()}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"flex justify-center\">\r\n            <Loading />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <form method=\"dialog\" className=\"modal-backdrop\">\r\n        <button>close</button>\r\n      </form>\r\n    </dialog>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import leastCashImage from \"images/misc/least_cash_s.webp\";\r\nimport leastTiersImage from \"images/misc/least_tiers_s.webp\";\r\nimport ctPointsImage from \"images/ct/ct_points_s.webp\";\r\nimport {\r\n  LeaderboardEntry,\r\n  PlayerMedal,\r\n  PlayerEventMedals,\r\n  PlayerCtMedals,\r\n  PlayerProfileData,\r\n  GuildProfileData,\r\n} from \"types/leaderboards\";\r\nimport {\r\n  appendOrdinalSuffix,\r\n  convertMsToTimeFormat,\r\n  formatToUpperCase,\r\n  placeToBossEliteMedal,\r\n  placeToBossNormalMedal,\r\n  placeToCtPlayerMedal,\r\n  placeToCtTeamMedal,\r\n  placeToRaceMedal,\r\n  timeAgo,\r\n} from \"util/converters\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  raceMedalImages,\r\n  raceMedalReward,\r\n} from \"util/formatters\";\r\nimport { BossMode, Event, EventType } from \"types/events\";\r\nimport { Badges } from \"components/Badges\";\r\nimport { ProfileModal } from \"components/ProfileModal\";\r\nimport { useProfileData } from \"hooks/useProfileData\";\r\n\r\nconst LeaderboardCard = ({\r\n  entry,\r\n  index,\r\n  event,\r\n  eventType,\r\n  delta,\r\n  showDelta,\r\n  bossMode,\r\n}: {\r\n  entry: LeaderboardEntry;\r\n  index: number;\r\n  event: Event;\r\n  eventType: EventType;\r\n  delta: number;\r\n  showDelta: boolean;\r\n  bossMode: BossMode;\r\n}) => {\r\n  const isPlayer = eventType !== \"CtTeam\";\r\n\r\n  const {\r\n    data: profileData,\r\n    loading: profileLoading,\r\n    fetchData,\r\n    fetched,\r\n  } = useProfileData(entry.profile);\r\n\r\n  const guildData = profileData as GuildProfileData;\r\n  const playerData = profileData as PlayerProfileData;\r\n\r\n  const handleMainScore = () => {\r\n    let scoreString = \"\";\r\n    let image = \"\";\r\n\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        scoreString = convertMsToTimeFormat(entry.score);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        switch (entry.scoreParts[0].name) {\r\n          case \"Game Time\":\r\n            scoreString = convertMsToTimeFormat(entry.score);\r\n            break;\r\n          case \"Cash Spent\":\r\n            image = leastCashImage;\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n          case \"Tiers\":\r\n            image = leastTiersImage;\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n          default:\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n        }\r\n        break;\r\n      case \"CtPlayer\":\r\n      case \"CtTeam\":\r\n        image = ctPointsImage;\r\n        scoreString = entry.score.toLocaleString();\r\n        break;\r\n    }\r\n    return (\r\n      <div className=\"text-right text-lg flex gap-1 justify-end items-center font-semibold text-nowrap -mt-1 \">\r\n        <img src={image} className=\"w-[18px]\" />\r\n        <span className=\"font-btd6 drop-shadow-[0_2px_0px_rgba(0,0,0,0.4)]\">\r\n          {scoreString}\r\n        </span>\r\n        {handleDelta()}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleSecondaryScore = () => {\r\n    let scoreString = \"\";\r\n    let dataTip = \"\";\r\n    if (!entry.scoreParts) return;\r\n\r\n    switch (event.scoringType) {\r\n      case undefined:\r\n      case \"GameTime\":\r\n        scoreString = timeAgo(\r\n          event.start +\r\n            entry.scoreParts.filter(\r\n              (part) => part.name === \"Time after event start\"\r\n            )[0].score\r\n        );\r\n        dataTip = new Date(\r\n          event.start +\r\n            entry.scoreParts.filter(\r\n              (part) => part.name === \"Time after event start\"\r\n            )[0].score\r\n        ).toLocaleString();\r\n        break;\r\n      default:\r\n        scoreString = convertMsToTimeFormat(\r\n          entry.scoreParts.filter((part) => part.name === \"Game Time\")[0].score\r\n        );\r\n        dataTip = \"Game Time\";\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <span\r\n        className=\"text-right text-sm tooltip font-normal text-nowrap -mt-1 drop-shadow-[0_1px_0px_rgba(0,0,0,0.3)]\"\r\n        data-tip={dataTip}\r\n      >\r\n        {scoreString}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const handleDelta = () => {\r\n    if (!showDelta) {\r\n      return <></>;\r\n    }\r\n    let scoreString = \"\";\r\n    let isLowerBad = false;\r\n\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        scoreString = convertMsToTimeFormat(delta);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        switch (event.scoringType) {\r\n          case \"GameTime\":\r\n            scoreString = convertMsToTimeFormat(delta);\r\n            break;\r\n          case \"LeastCash\":\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n          case \"LeastTiers\":\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n          default:\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n        }\r\n        break;\r\n      case \"CtPlayer\":\r\n      case \"CtTeam\":\r\n        isLowerBad = true;\r\n        scoreString =\r\n          delta !== 0 ? (delta * -1).toLocaleString() : delta.toLocaleString();\r\n        break;\r\n    }\r\n    return (\r\n      <p\r\n        className={\r\n          \"font-semibold text-sm drop-shadow-[0_1px_0px_rgba(0,0,0,0.4)]\" +\r\n          ((isLowerBad ? delta >= 0 : delta <= 0)\r\n            ? \" text-success\"\r\n            : \" text-error\")\r\n        }\r\n      >\r\n        {delta <= 0 ? \"-\" : \"+\"}\r\n        {scoreString}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const handleMedal = () => {\r\n    let medal = \"\";\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        medal = placeToRaceMedal(index + 1, event.totalScores as number);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        if (bossMode === \"Standard\") {\r\n          medal = placeToBossNormalMedal(\r\n            index + 1,\r\n            event.totalScores_standard as number\r\n          );\r\n        } else {\r\n          medal = placeToBossEliteMedal(\r\n            index + 1,\r\n            event.totalScores_standard as number\r\n          );\r\n        }\r\n        break;\r\n      case \"CtTeam\":\r\n        medal = placeToCtTeamMedal(index + 1, event.totalScores_team as number);\r\n        break;\r\n      case \"CtPlayer\":\r\n        medal = placeToCtPlayerMedal(\r\n          index + 1,\r\n          event.totalScores_player as number\r\n        );\r\n        break;\r\n    }\r\n    return <img src={medal} className=\"w-[34px]\" />;\r\n  };\r\n\r\n  const handleDisplayMedals = () => {\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        return fetched ? (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {Object.keys(raceMedalImages)\r\n              .filter(\r\n                (medal) =>\r\n                  playerData._medalsRace[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ]! > 0\r\n              )\r\n              .slice(0, 5)\r\n              .map((medal) =>\r\n                playerData._medalsRace[\r\n                  formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                ]! > 0 ? (\r\n                  <div\r\n                    className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                    data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        raceMedalImages[medal as keyof typeof raceMedalImages]\r\n                      }\r\n                      className=\"h-[28px]\"\r\n                    />\r\n                    <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                      {playerData._medalsRace[\r\n                        formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                      ] ?? 0}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <></>\r\n                )\r\n              )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n          </div>\r\n        );\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        if (bossMode === \"Standard\") {\r\n          return fetched ? (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {Object.keys(bossNormalMedalImages)\r\n                .filter(\r\n                  (medal) =>\r\n                    playerData._medalsBoss[\r\n                      formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                    ]! > 0\r\n                )\r\n                .slice(0, 5)\r\n                .map((medal) =>\r\n                  playerData._medalsBoss[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ]! > 0 ? (\r\n                    <div\r\n                      className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                      data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                    >\r\n                      <img\r\n                        src={\r\n                          bossNormalMedalImages[\r\n                            medal as keyof typeof bossNormalMedalImages\r\n                          ]\r\n                        }\r\n                        className=\"h-[28px]\"\r\n                      />\r\n                      <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                        {playerData._medalsBoss[\r\n                          formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                        ] ?? 0}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )\r\n                )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n            </div>\r\n          );\r\n        } else {\r\n          return fetched ? (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {Object.keys(bossEliteMedalImages)\r\n                .filter(\r\n                  (medal) =>\r\n                    playerData._medalsBossElite[\r\n                      formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                    ]! > 0\r\n                )\r\n                .slice(0, 5)\r\n                .map((medal) =>\r\n                  playerData._medalsBossElite[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ]! > 0 ? (\r\n                    <div\r\n                      className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                      data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                    >\r\n                      <img\r\n                        src={\r\n                          bossEliteMedalImages[\r\n                            medal as keyof typeof bossEliteMedalImages\r\n                          ]\r\n                        }\r\n                        className=\"h-[28px]\"\r\n                      />\r\n                      <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                        {playerData._medalsBossElite[\r\n                          formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                        ] ?? 0}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )\r\n                )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n            </div>\r\n          );\r\n        }\r\n      case \"CtTeam\":\r\n        return (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n          </div>\r\n        );\r\n      case \"CtPlayer\":\r\n        return fetched ? (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {Object.keys(ctPlayerMedalImages)\r\n              .filter(\r\n                (medal) =>\r\n                  playerData._medalsCTGlobal[\r\n                    formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                  ]! > 0\r\n              )\r\n              .slice(0, 5)\r\n              .map((medal) =>\r\n                playerData._medalsCTGlobal[\r\n                  formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                ]! > 0 ? (\r\n                  <div\r\n                    className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                    data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        ctPlayerMedalImages[\r\n                          medal as keyof typeof ctPlayerMedalImages\r\n                        ]\r\n                      }\r\n                      className=\"h-[28px]\"\r\n                    />\r\n                    <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                      {playerData._medalsCTGlobal[\r\n                        formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                      ] ?? 0}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <></>\r\n                )\r\n              )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-1 w-5/6 items-end\">\r\n      <ProfileModal\r\n        profileUrl={entry.profile}\r\n        fetched={fetched}\r\n        profileData={profileData}\r\n        profileLoading={profileLoading}\r\n        isPlayer={isPlayer}\r\n      />\r\n      <div\r\n        key={entry.profile}\r\n        className=\"indicator w-full flex outline outline-2 outline-white/30 hover:cursor-pointer justify-between px-5 py-1 bg-center bg-cover\"\r\n        style={{\r\n          backgroundImage: fetched\r\n            ? `linear-gradient(to bottom, rgba(17, 17, 23, 0.2), rgba(17, 17, 23, 0.6)), url(${profileData.bannerURL})`\r\n            : \"linear-gradient(to bottom, rgba(17, 17, 23, 0.2), rgba(17, 17, 23, 0.6)), url(https://static-api.nkstatic.com/appdocs/4/assets/opendata/bbd8e1412f656b91db7df7aabbc1598b_TeamsBannerDeafult.png)\",\r\n        }}\r\n        onClick={() => {\r\n          (\r\n            document.getElementById(`${entry.profile}`) as HTMLFormElement\r\n          ).showModal();\r\n          fetchData();\r\n        }}\r\n      >\r\n        <div className=\"flex justify-start w-1/2\">\r\n          <div className=\"flex items-center gap-2 w-20\">\r\n            {handleMedal()}\r\n            <p className=\"font-medium\">{appendOrdinalSuffix(index + 1)}</p>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2 w-1/4\">\r\n            <img\r\n              src={\r\n                fetched\r\n                  ? isPlayer\r\n                    ? playerData.avatarURL\r\n                    : guildData.frameURL\r\n                  : isPlayer\r\n                  ? \"https://static-api.nkstatic.com/appdocs/4/assets/opendata/db32af61df5646951a18c60fe0013a31_ProfileAvatar01.png\"\r\n                  : \"https://static-api.nkstatic.com/appdocs/4/assets/opendata/4570fe44e0c89a609dd4853af7751bdb_TeamFrame1.png\"\r\n              }\r\n              className=\"w-[38px]\"\r\n            />\r\n            {!isPlayer ? (\r\n              <img src={guildData.iconURL} className=\"w-[38px] absolute\" />\r\n            ) : (\r\n              <></>\r\n            )}\r\n\r\n            <div className=\"flex flex-col flex-nowrap\">\r\n              <p className=\"[text-shadow:_0_2px_0_rgb(0_0_0)] font-semibold tracking-wider font-btd6 text-lg text-nowrap\">\r\n                {entry.displayName}\r\n              </p>\r\n              <Badges name={entry.displayName} profileUrl={entry.profile} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-between w-1/2 gap-[1.2rem]\">\r\n          {handleDisplayMedals()}\r\n\r\n          <div className=\"flex flex-col h-full w-1/4 justify-center items-end\">\r\n            {handleMainScore()}\r\n            {handleSecondaryScore()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {entry.otherPlayers?.map((player) => (\r\n        <div\r\n          key={player.profile}\r\n          className=\"indicator w-full flex outline outline-1 outline-white/30 hover:cursor-pointer justify-between px-6 py-1 bg-center bg-cover\"\r\n          style={{\r\n            backgroundImage: fetched\r\n              ? `linear-gradient(to bottom, rgba(17, 17, 23, 0.4), rgba(17, 17, 23, 1)), url(${profileData.bannerURL})`\r\n              : \"linear-gradient(to bottom, rgba(17, 17, 23, 0.2), rgba(17, 17, 23, 0.6)), url(https://static-api.nkstatic.com/appdocs/4/assets/opendata/bbd8e1412f656b91db7df7aabbc1598b_TeamsBannerDeafult.png)\",\r\n          }}\r\n          onClick={() => {\r\n            console.log(`clicked ${player.profile}`);\r\n          }}\r\n        >\r\n          <div className=\"flex justify-start w-1/2\">\r\n            <div className=\"flex items-center gap-2 w-20\"></div>\r\n\r\n            <div className=\"flex items-center gap-2 w-1/4\">\r\n              <img\r\n                src={\r\n                  fetched\r\n                    ? playerData.avatarURL\r\n                    : \"https://static-api.nkstatic.com/appdocs/4/assets/opendata/db32af61df5646951a18c60fe0013a31_ProfileAvatar01.png\"\r\n                }\r\n                className=\"w-[38px]\"\r\n              />\r\n\r\n              <div className=\"flex flex-col flex-nowrap\">\r\n                <p className=\"font-semibold text-lg text-nowrap\">\r\n                  {player.displayName}\r\n                </p>\r\n                <Badges name={player.displayName} profileUrl={player.profile} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-start w-1/2 gap-[1.2rem]\">\r\n            {fetched ? (\r\n              <div className=\"flex gap-3 items-center\">\r\n                {Object.keys(raceMedalImages)\r\n                  .filter(\r\n                    (medal) =>\r\n                      playerData._medalsRace[\r\n                        formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                      ]! > 0\r\n                  )\r\n                  .slice(0, 5)\r\n                  .map((medal) =>\r\n                    playerData._medalsRace[\r\n                      formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                    ]! > 0 ? (\r\n                      <div\r\n                        className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                        data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            raceMedalImages[\r\n                              medal as keyof typeof raceMedalImages\r\n                            ]\r\n                          }\r\n                          className=\"h-[28px]\"\r\n                        />\r\n                        <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                          {playerData._medalsRace[\r\n                            formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                          ] ?? 0}\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <></>\r\n                    )\r\n                  )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex h-full gap-3 items-center\">\r\n                {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n              </div>\r\n            )}\r\n            <div className=\"flex flex-col h-full w-16 justify-center items-end\"></div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderboardCard;\r\n","import { LeaderboardCard } from \"components/LeaderboardCard\";\r\nimport { Loading } from \"components/Loading\";\r\nimport { SelectionRow } from \"components/SelectionRow\";\r\nimport { useCtEvents } from \"hooks/useCtEvents\";\r\nimport { useLeaderboard } from \"hooks/useLeaderboard\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { BossMode, EventType } from \"types/events\";\r\nimport { Alert } from \"types/util\";\r\nimport { appendOrdinalSuffix, prettyEventNames } from \"util/converters\";\r\n\r\nconst Leaderboard: React.FC = () => {\r\n  const [alert, setAlert] = useState<Alert>({\r\n    alertType: \"alert\",\r\n    message: \"\",\r\n  });\r\n\r\n  const { data: ctEventData, loading: ctEventLoading } = useCtEvents();\r\n  const [leaderboardType, setLeaderboardType] = useState<EventType>(\"Race\");\r\n  const [eventPos, setEventPos] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [bossMode, setBossMode] = useState<BossMode>(\"Standard\");\r\n  const [firstPlaceScore, setFirstPlaceScore] = useState<number>(-1);\r\n  const [showDelta, setShowDelta] = useState(false);\r\n\r\n  const {\r\n    data: leaderboardData,\r\n    events: eventData,\r\n    loading,\r\n    error,\r\n  } = useLeaderboard(leaderboardType, eventPos, page, bossMode);\r\n\r\n  const handlePageInput = (e: any) => {\r\n    const re = /^[0-9\\b]*$/;\r\n\r\n    // if value is not blank, then test the regex\r\n    const value: string = e.target.value;\r\n\r\n    if (value === \"\" || re.test(value)) {\r\n      const numVal = Number(value) < 1 ? 1 : Number(value);\r\n      setPage(numVal);\r\n    }\r\n  };\r\n\r\n  const getTotalScores = (): number => {\r\n    switch (leaderboardType) {\r\n      case \"Boss\":\r\n        if (bossMode === \"Standard\") {\r\n          return eventData[eventPos].totalScores_standard !== undefined\r\n            ? (eventData[eventPos].totalScores_standard as number)\r\n            : 0;\r\n        } else {\r\n          return eventData[eventPos].totalScores_elite !== undefined\r\n            ? (eventData[eventPos].totalScores_elite as number)\r\n            : 0;\r\n        }\r\n      case \"CtPlayer\":\r\n        return eventData[eventPos].totalScores_player !== undefined\r\n          ? (eventData[eventPos].totalScores_player as number)\r\n          : 0;\r\n      case \"CtTeam\":\r\n        return eventData[eventPos].totalScores_team !== undefined\r\n          ? (eventData[eventPos].totalScores_team as number)\r\n          : 0;\r\n      default:\r\n        return eventData[eventPos].totalScores !== undefined\r\n          ? (eventData[eventPos].totalScores as number)\r\n          : 0;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!loading && !error && page === 1) {\r\n      setFirstPlaceScore(leaderboardData.body[0].score);\r\n    }\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div className=\"flex w-full flex-col items-center gap-4\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        {prettyEventNames[leaderboardType]} Leaderboard\r\n      </p>\r\n\r\n      <div className=\"flex gap-4 w-full items-center justify-center\">\r\n        <div className=\"flex flex-col w-full gap-2 items-center\">\r\n          <SelectionRow\r\n            selectionId={leaderboardType}\r\n            selectionName={leaderboardType}\r\n            selections={[\r\n              {\r\n                ids: [\"Race\"],\r\n                name: \"Race\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"Race\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n              {\r\n                ids: [\"Boss\", \"Boss2\", \"Boss3\", \"Boss4\"],\r\n                name: \"Boss\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"Boss\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n              {\r\n                ids: [\"CtTeam\", \"CtPlayer\"],\r\n                name: \"Contested Territory\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"CtTeam\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n            ]}\r\n          />\r\n\r\n          {leaderboardType === \"CtTeam\" || leaderboardType === \"CtPlayer\" ? (\r\n            <SelectionRow\r\n              selectionId={leaderboardType}\r\n              selectionName={leaderboardType}\r\n              selections={[\r\n                {\r\n                  ids: [\"CtTeam\"],\r\n                  name: \"Team\",\r\n                  onClickFunction: () => {\r\n                    setLeaderboardType(\"CtTeam\");\r\n                    setPage(1);\r\n                  },\r\n                },\r\n                {\r\n                  ids: [\"CtPlayer\"],\r\n                  name: \"Player\",\r\n                  onClickFunction: () => {\r\n                    setLeaderboardType(\"CtPlayer\");\r\n                    setPage(1);\r\n                  },\r\n                },\r\n              ]}\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n\r\n          {leaderboardType === \"Boss\" ||\r\n          leaderboardType === \"Boss2\" ||\r\n          leaderboardType === \"Boss3\" ||\r\n          leaderboardType === \"Boss4\" ? (\r\n            <>\r\n              <SelectionRow\r\n                selectionId={bossMode}\r\n                selectionName={bossMode}\r\n                selections={[\r\n                  {\r\n                    ids: [\"Standard\"],\r\n                    name: \"Standard\",\r\n                    onClickFunction: () => {\r\n                      setBossMode(\"Standard\");\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Elite\"],\r\n                    name: \"Elite\",\r\n                    onClickFunction: () => {\r\n                      setBossMode(\"Elite\");\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n              <SelectionRow\r\n                selectionId={leaderboardType}\r\n                selectionName={leaderboardType}\r\n                selections={[\r\n                  {\r\n                    ids: [\"Boss\"],\r\n                    name: \"Solo\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss\");\r\n                      setAlert({\r\n                        alertType: \"alert\",\r\n                        message: \"\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss2\"],\r\n                    name: \"Duo\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss2\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported by NinjaKiwi. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss3\"],\r\n                    name: \"Trio\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss3\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported by NinjaKiwi. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss4\"],\r\n                    name: \"Quad\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss4\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported yet. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"divider divider-horizontal\" />\r\n        <div className=\"flex items-center w-full gap-4\">\r\n          <p className=\"text-nowrap\">\r\n            Select a {prettyEventNames[leaderboardType]} event:\r\n          </p>\r\n          {!loading ? (\r\n            <select\r\n              id=\"tile-select\"\r\n              className=\"select select-bordered w-full max-w-xs\"\r\n              onChange={(e) => {\r\n                console.log(e.target.options.selectedIndex);\r\n                setEventPos(e.target.options.selectedIndex);\r\n              }}\r\n              value={\r\n                eventData[eventPos].name\r\n                  ? eventData[eventPos].name\r\n                  : leaderboardType === \"CtPlayer\" ||\r\n                    leaderboardType === \"CtTeam\"\r\n                  ? `${\r\n                      ctEventData.filter(\r\n                        (x) => x.id === eventData[eventPos].id\r\n                      )[0].number\r\n                    } (${\r\n                      ctEventData.filter(\r\n                        (x) => x.id === eventData[eventPos].id\r\n                      )[0].id\r\n                    })`\r\n                  : eventData[eventPos].id\r\n              }\r\n            >\r\n              {eventData.map((x, index) => (\r\n                <option key={index}>\r\n                  {x.name\r\n                    ? x.name\r\n                    : leaderboardType === \"CtPlayer\" ||\r\n                      leaderboardType === \"CtTeam\"\r\n                    ? `${ctEventData.filter((a) => a.id === x.id)[0].number} (${\r\n                        ctEventData.filter((a) => a.id === x.id)[0].id\r\n                      })`\r\n                    : eventData[eventPos].id}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          ) : (\r\n            <div className=\"skeleton h-12 w-full max-w-xs\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {!error ? (\r\n        <>\r\n          <div className=\"join\">\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(1)}\r\n            >\r\n              «\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev - 1)}\r\n            >\r\n              ‹\r\n            </button>\r\n            <label className=\"input join-item bg-base-200 hover:bg-base-300 flex items-center gap-2 z-50\">\r\n              {/* <img src={leastCashImage} className=\"w-[28px]\" /> */}\r\n              <input\r\n                className=\"font-medium text-lg max-w-40 text-center\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"Score\"\r\n                value={page}\r\n                onChange={handlePageInput}\r\n              />\r\n            </label>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev + 1)}\r\n            >\r\n              ›\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn btn-disabled tooltip\" +\r\n                (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(25)}\r\n              data-tip=\"I don't know the max pages for this event.\"\r\n            >\r\n              »\r\n            </button>\r\n          </div>\r\n          <label className=\"flex gap-4 cursor-pointer items-center\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showDelta}\r\n              className=\"checkbox\"\r\n              onChange={() => setShowDelta((prev) => !prev)}\r\n            />\r\n            <span className=\"label-text\">Show Delta</span>\r\n          </label>\r\n          {!loading ? (\r\n            <p>\r\n              Showing players{\" \"}\r\n              {appendOrdinalSuffix(\r\n                (page - 1) * leaderboardData.body.length + 1\r\n              )}\r\n              -{appendOrdinalSuffix(page * leaderboardData.body.length)} of{\" \"}\r\n              {getTotalScores().toLocaleString()} entries.\r\n            </p>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {alert.message.length > 0 ? (\r\n        <div role=\"alert\" className={\"alert w-2/3 \" + alert.alertType}>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"stroke-current shrink-0 h-6 w-6\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2\"\r\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n            />\r\n          </svg>\r\n          <span>{alert.message}</span>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {error ? (\r\n        <p>Failed to grab data.</p>\r\n      ) : (\r\n        <>\r\n          {!loading ? (\r\n            leaderboardData.body.map((entry, index) => (\r\n              <LeaderboardCard\r\n                entry={entry}\r\n                index={index + (page - 1) * leaderboardData.body.length}\r\n                event={eventData[eventPos]}\r\n                eventType={leaderboardType}\r\n                delta={entry.score - firstPlaceScore}\r\n                showDelta={showDelta}\r\n                key={index}\r\n                bossMode={bossMode}\r\n              />\r\n            ))\r\n          ) : (\r\n            <Loading />\r\n          )}\r\n        </>\r\n      )}\r\n      {!error && !loading ? (\r\n        <>\r\n          <div className=\"join\">\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(1)}\r\n            >\r\n              «\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev - 1)}\r\n            >\r\n              ‹\r\n            </button>\r\n            <label className=\"input join-item bg-base-200 hover:bg-base-300 flex items-center gap-2 z-50\">\r\n              {/* <img src={leastCashImage} className=\"w-[28px]\" /> */}\r\n              <input\r\n                className=\"font-medium text-lg max-w-40 text-center\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"Score\"\r\n                value={page}\r\n                onChange={handlePageInput}\r\n              />\r\n            </label>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev + 1)}\r\n            >\r\n              ›\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn btn-disabled tooltip\" +\r\n                (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(25)}\r\n              data-tip=\"I don't know the max pages for this event.\"\r\n            >\r\n              »\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n","import Leaderboard from \"./Leaderboard\";\r\nexport default Leaderboard;\r\n"],"names":["_ref","selectionName","selectionId","selections","_jsx","className","children","map","selection","ids","includes","onClick","onClickFunction","name","useCtEvents","data","setData","useState","loading","setLoading","useMemo","async","response","fetch","ok","Error","jsonData","json","newData","flatMap","x","i","id","number","reverse","console","log","error","fetchData","useLeaderboard","eventType","eventPos","page","bossMode","numOfPages","arguments","length","undefined","events","setEvents","setError","bossUrl","ctUrl","headers","mode","url","racesResponse","raceData","body","leaderboard","bossesResponse","bossData","leaderboard_elite_players_1","leaderboard_standard_players_1","slice","ctResponse","ctData","leaderboard_team","leaderboard_player","success","newJsonData","concat","nextPlayersToCheck","players","indecesToSplice","playersEntry","currentPlayerIndex","j","scoreParts","score","push","displayName","profile","otherPlayers","splice","profileUrl","badgeName","badgeTip","matchedUser","verifiedUsers","find","toLowerCase","_jsxs","badges","some","filter","badge","_Fragment","useProfileData","fetched","setFetched","model","ProfileModal","profileData","profileLoading","isPlayer","guildData","playerData","ownerData","ownerLoading","ownerFetched","owner","style","backgroundImage","bannerURL","method","src","avatarURL","frameURL","iconURL","Badges","rankImage","rank","veteranRank","vetRankImage","status","numMembers","document","getElementById","showModal","Object","keys","raceMedalImages","medal","_medalsRace","formatToUpperCase","_playerData$_medalsRa","raceMedalReward","bossNormalMedalImages","_medalsBoss","_playerData$_medalsBo","bossEliteMedalImages","_medalsBossElite","_playerData$_medalsBo2","ctPlayerMedalImages","_medalsCTGlobal","_playerData$_medalsCT","Loading","_entry$otherPlayers","entry","index","event","delta","showDelta","handleDelta","scoreString","isLowerBad","convertMsToTimeFormat","scoringType","toLocaleString","handleMedal","placeToRaceMedal","totalScores","placeToBossNormalMedal","totalScores_standard","placeToBossEliteMedal","placeToCtTeamMedal","totalScores_team","placeToCtPlayerMedal","totalScores_player","appendOrdinalSuffix","handleDisplayMedals","handleMainScore","image","leastCashImage","leastTiersImage","ctPointsImage","handleSecondaryScore","dataTip","timeAgo","start","part","Date","player","_playerData$_medalsRa2","Leaderboard","alert","setAlert","alertType","message","ctEventData","ctEventLoading","leaderboardType","setLeaderboardType","setEventPos","setPage","setBossMode","firstPlaceScore","setFirstPlaceScore","setShowDelta","leaderboardData","eventData","handlePageInput","e","value","target","test","numVal","Number","useEffect","prettyEventNames","SelectionRow","onChange","options","selectedIndex","a","prev","type","inputMode","placeholder","next","checked","getTotalScores","totalScores_elite","role","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","LeaderboardCard"],"sourceRoot":""}