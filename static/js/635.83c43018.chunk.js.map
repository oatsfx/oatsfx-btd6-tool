{"version":3,"file":"static/js/635.83c43018.chunk.js","mappings":"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","sources":["configs/relics.config.ts","components/RelicList/RelicList.tsx","types/ct.ts","components/TowerDisplay/TowerDisplay.tsx","components/TileDisplay/TileDisplay.tsx","components/TileSelector/TileSelector.tsx","types/costs.ts","components/SolutionRow/SolutionRow.tsx","components/SolutionManager/SolutionManager.tsx","pages/LeastCashCalculator/index.tsx","pages/LeastCashCalculator/LeastCashCalculator.tsx","hooks/useCtData.tsx","hooks/useTowerCostData.tsx","util/converters.ts"],"sourcesContent":["import airAndSeaImage from \"images/relics/air_and_sea.webp\";\r\nimport boxOfMonkeyImage from \"images/relics/box_of_monkey.webp\";\r\nimport magicMonkeysImage from \"images/relics/magic_monkeys.webp\";\r\nimport marchingBootsImage from \"images/relics/marching_boots.webp\";\r\nimport militaryMonkeysImage from \"images/relics/military_monkeys.webp\";\r\nimport monkeyTycoonImage from \"images/relics/monkey_tycoon.webp\";\r\nimport primaryPrimatesImage from \"images/relics/primary_primates.webp\";\r\nimport supportSimiansImages from \"images/relics/support_simians.webp\";\r\nimport startingStashImage from \"images/relics/starting_stash.webp\";\r\nimport { RelicData } from \"types/relic\";\r\n\r\nexport const costInfluencingRelics: RelicData[] = [\r\n  {\r\n    name: \"Air and Sea\",\r\n    id: \"air_and_sea\",\r\n    image: airAndSeaImage,\r\n    description:\r\n      \"Ace, Heli, Buccaneer and Sub have their placement and upgrade costs reduced by 5%, and their reload improved by 5% \",\r\n  },\r\n  {\r\n    name: \"Box of Monkey\",\r\n    id: \"box_of_monkey\",\r\n    image: boxOfMonkeyImage,\r\n    description:\r\n      \"Start each game with one free Monkey costing $400 or less for unmodified initial placement.\",\r\n  },\r\n  {\r\n    name: \"Magic Monkeys\",\r\n    id: \"magic_monkeys\",\r\n    image: magicMonkeysImage,\r\n    description: \"Reduces cost of all Magic Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Marching Boots\",\r\n    id: \"marching_boots\",\r\n    image: marchingBootsImage,\r\n    description:\r\n      \"In restricted count games, give players +1 max count of each tower in their loadout or +4 total max count per game.\",\r\n  },\r\n  {\r\n    name: \"Military Monkeys\",\r\n    id: \"military_monkeys\",\r\n    image: militaryMonkeysImage,\r\n    description: \"Reduces cost of all Military Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Monkey Tycoon\",\r\n    id: \"monkey_tycoon\",\r\n    image: monkeyTycoonImage,\r\n    description:\r\n      \"Get +1 of all Monkey Towers in your loadout and their base price is reduced by 4%.\",\r\n  },\r\n  {\r\n    name: \"Primary Primates\",\r\n    id: \"primary_primates\",\r\n    image: primaryPrimatesImage,\r\n    description: \"Reduces cost of all Primary Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Support Simians\",\r\n    id: \"support_simians\",\r\n    image: supportSimiansImages,\r\n    description: \"Reduces cost of all Support Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Starting Stash\",\r\n    id: \"starting_stash\",\r\n    image: startingStashImage,\r\n    description:\r\n      \"Start each game with an extra 250 cash (stacks with More Cash on Regular Tiles).\",\r\n  },\r\n];\r\n","import { costInfluencingRelics } from \"configs/relics.config\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { CTData, Relic } from \"types/ct\";\r\n\r\nconst RelicList = ({\r\n  data,\r\n  loading,\r\n  relics,\r\n  handleRelicFilterClick,\r\n}: {\r\n  data: CTData;\r\n  loading: boolean;\r\n  relics: Relic[];\r\n  handleRelicFilterClick: (relic: Relic) => void;\r\n}) => {\r\n  const [relicList, setRelicList] = useState<string[]>([]);\r\n\r\n  const handleCheck = (e: any) => {\r\n    handleRelicFilterClick(e.target.id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let relics: string[] = [];\r\n\r\n    Object.entries(data.tiles).map((tile) => {\r\n      if (tile[1].relic) {\r\n        relics.push(tile[1].relic);\r\n      }\r\n    });\r\n\r\n    setRelicList(relics);\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"w-64\">\r\n      <p className=\"text-lg font-medium text-center\">\r\n        What Relics did the team have?\r\n      </p>\r\n      <div className=\"w-full\">\r\n        {!loading ? (\r\n          costInfluencingRelics.map((relic) => (\r\n            <div\r\n              className=\"tooltip flex\"\r\n              data-tip={\r\n                relicList.includes(relic.id)\r\n                  ? relic.description\r\n                  : \"Not available this event.\"\r\n              }\r\n              key={relic.id}\r\n            >\r\n              <label\r\n                className={\r\n                  \"label w-full\" +\r\n                  (!relicList.includes(relic.id)\r\n                    ? \" cursor-not-allowed opacity-40\"\r\n                    : \" cursor-pointer\")\r\n                }\r\n              >\r\n                <img src={relic.image} className=\"w-[28px]\" />\r\n                <span className=\"label-text\">{relic.name}</span>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={relics.includes(relic.id as Relic)}\r\n                  className=\"checkbox checkbox-sm\"\r\n                  id={relic.id}\r\n                  disabled={!relicList.includes(relic.id)}\r\n                  onChange={handleCheck}\r\n                />\r\n              </label>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"flex flex-col gap-2 w-full py-2 items-center\">\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RelicList;\r\n","export type CTData = {\r\n  size: number;\r\n  event: number;\r\n  tiles: { [key: string]: Tile };\r\n};\r\n\r\nexport type Tile = {\r\n  colour: null | string;\r\n  tile_type: TileType;\r\n  relic: Relic | null;\r\n  game_type: GameType | null;\r\n  boss: null | string;\r\n  tiers: number | null;\r\n  game_mode: GameMode | null;\r\n  map: null | string;\r\n  difficulty: Difficulty | null;\r\n  cash: number | null;\r\n  start_round: number | null;\r\n  end_round: number | null;\r\n  max_towers: number | null;\r\n  monkey_knowledge: boolean | null;\r\n  selling: boolean | null;\r\n  ceramic_health: number;\r\n  moab_health: number;\r\n  bloon_speed: number;\r\n  moab_speed: number;\r\n  regrow_rate: number;\r\n  heroes: Hero[];\r\n  towers: TowerElement[];\r\n};\r\n\r\nexport const emptyTile: Tile = {\r\n  colour: null,\r\n  tile_type: \"regular\",\r\n  relic: null,\r\n  game_type: null,\r\n  boss: null,\r\n  tiers: null,\r\n  game_mode: null,\r\n  map: null,\r\n  difficulty: null,\r\n  cash: null,\r\n  start_round: null,\r\n  end_round: null,\r\n  max_towers: null,\r\n  monkey_knowledge: null,\r\n  selling: null,\r\n  ceramic_health: 100,\r\n  moab_health: 100,\r\n  bloon_speed: 100,\r\n  moab_speed: 100,\r\n  regrow_rate: 100,\r\n  heroes: [],\r\n  towers: [],\r\n};\r\n\r\nexport type Difficulty = \"easy\" | \"medium\" | \"hard\";\r\n\r\nexport type GameMode = \"double_moab_health\" | \"reverse\" | \"standard\";\r\n\r\nexport type GameType = \"boss\" | \"least_cash\" | \"least_tiers\" | \"race\";\r\n\r\nexport type Hero =\r\n  | \"admiral_brickell\"\r\n  | \"adora\"\r\n  | \"benjamin\"\r\n  | \"captain_churchill\"\r\n  | \"corvus\"\r\n  | \"etienne\"\r\n  | \"ezili\"\r\n  | \"geraldo\"\r\n  | \"gwendolin\"\r\n  | \"obyn_greenfoot\"\r\n  | \"pat_fusty\"\r\n  | \"psi\"\r\n  | \"quincy\"\r\n  | \"sauda\"\r\n  | \"striker_jones\";\r\n\r\nexport const allHeroes: Hero[] = [\r\n  \"admiral_brickell\",\r\n  \"adora\",\r\n  \"benjamin\",\r\n  \"captain_churchill\",\r\n  \"corvus\",\r\n  \"etienne\",\r\n  \"ezili\",\r\n  \"geraldo\",\r\n  \"gwendolin\",\r\n  \"obyn_greenfoot\",\r\n  \"pat_fusty\",\r\n  \"psi\",\r\n  \"quincy\",\r\n  \"sauda\",\r\n  \"striker_jones\",\r\n];\r\n\r\nexport type TileType = \"banner\" | \"regular\" | \"relic\";\r\n\r\nexport type TowerElement = {\r\n  tower: Tower;\r\n  max: number;\r\n};\r\n\r\nexport type Tower =\r\n  | \"alchemist\"\r\n  | \"banana_farm\"\r\n  | \"beast_handler\"\r\n  | \"bomb_shooter\"\r\n  | \"boomerang_monkey\"\r\n  | \"dart_monkey\"\r\n  | \"dartling_gunner\"\r\n  | \"druid\" // thanks cyber quincy...\r\n  | \"druid_monkey\"\r\n  | \"engineer_monkey\"\r\n  | \"glue_gunner\"\r\n  | \"heli_pilot\"\r\n  | \"ice_monkey\"\r\n  | \"mermonkey\"\r\n  | \"monkey_ace\"\r\n  | \"monkey_buccaneer\"\r\n  | \"monkey_sub\"\r\n  | \"monkey_village\"\r\n  | \"mortar_monkey\"\r\n  | \"ninja_monkey\"\r\n  | \"sniper_monkey\"\r\n  | \"spike_factory\"\r\n  | \"super_monkey\"\r\n  | \"tack_shooter\"\r\n  | \"wizard_monkey\";\r\n\r\nexport type Relic =\r\n  | \"abilitized\"\r\n  | \"air_and_sea\"\r\n  | \"alchemist_touch\"\r\n  | \"bigger_bloon_sabotage\"\r\n  | \"box_of_chocolates\"\r\n  | \"box_of_monkey\"\r\n  | \"broken_heart\"\r\n  | \"camo_flogged\"\r\n  | \"camo_trap\"\r\n  | \"deep_heat\"\r\n  | \"durable_shots\"\r\n  | \"el_dorado\"\r\n  | \"extra_empowered\"\r\n  | \"files\"\r\n  | \"flint_tips\"\r\n  | \"fortifried\"\r\n  | \"glue_trap\"\r\n  | \"going_the_distance\"\r\n  | \"hard_baked\"\r\n  | \"heartless\"\r\n  | \"hero_boost\"\r\n  | \"magic_monkeys\"\r\n  | \"mana_bulwark\"\r\n  | \"marching_boots\"\r\n  | \"military_monkeys\"\r\n  | \"moab_clash\"\r\n  | \"moab_mine\"\r\n  | \"monkey_boost\"\r\n  | \"monkey_tycoon\"\r\n  | \"primary_primates\"\r\n  | \"regeneration\"\r\n  | \"restoration\"\r\n  | \"road_spikes\"\r\n  | \"rounding_up\"\r\n  | \"royal_treatment\"\r\n  | \"sharpsplosion\"\r\n  | \"starting_stash\"\r\n  | \"super_monkey_storm\"\r\n  | \"support_simians\"\r\n  | \"techbot\"\r\n  | \"thrive\";\r\n","import { formatGameEntityName } from \"util/converters\";\r\n\r\nconst TowerDisplay = ({\r\n  name,\r\n  image,\r\n  indicator,\r\n}: {\r\n  name: string;\r\n  image: string;\r\n  indicator?: string | number;\r\n}) => {\r\n  return (\r\n    <div\r\n      className=\"tooltip before:z-48 before:content-[attr(data-tip)] block z-[50] !overflow-visible\"\r\n      data-tip={formatGameEntityName(name)}\r\n    >\r\n      {indicator ? (\r\n        <span className=\"indicator-item indicator-bottom indicator-center badge font-medium shadow-lg\">\r\n          {indicator}\r\n        </span>\r\n      ) : null}\r\n      <div className=\"avatar\">\r\n        <div className=\"w-8 rounded-full shadow outline outline-1 outline-white/25\">\r\n          <img src={image} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TowerDisplay;\r\n","import {\r\n  towerImages,\r\n  mapImages,\r\n  relicImages,\r\n  tileImages,\r\n  gameTypeImages,\r\n  heroImages,\r\n} from \"util/formatters\";\r\nimport { Tile, allHeroes } from \"types/ct\";\r\n\r\nimport noSellingImage from \"images/modifiers/selling_disabled.webp\";\r\nimport noMkImage from \"images/modifiers/monkey_knowledge_disabled.webp\";\r\nimport { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { formatGameEntityName } from \"util/converters\";\r\n\r\nconst TileDisplay = ({ tileCode, tile }: { tileCode: string; tile: Tile }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"indicator w-full flex flex-col outline outline-1 outline-white/50 rounded-xl items-center my-8 py-4 pb-6 bg-no-repeat bg-top bg-cover bg-clip-border \" +\r\n        mapImages[tile.map as keyof typeof mapImages]\r\n      }\r\n    >\r\n      <div className=\"indicator-item indicator-top indicator-center badge badge-ghost font-semibold gap-1 px-5 py-3 outline outline-1 outline-white/25\">\r\n        <img\r\n          src={gameTypeImages[tile.game_type as keyof typeof gameTypeImages]}\r\n          className=\"w-[16px]\"\r\n        />\r\n        {formatGameEntityName(tile.game_type as string)}\r\n      </div>\r\n      <p className=\"font-bold text-2xl text-center\">{tileCode}</p>\r\n      <p className=\"font-medium text-md text-center\">\r\n        {formatGameEntityName(tile.map as string)} //{\" \"}\r\n        {formatGameEntityName(tile.difficulty as string)}\r\n      </p>\r\n      <p className=\"text-md text-center\">\r\n        {`$${tile.cash?.toLocaleString()} // `}{\" \"}\r\n        {`Round ${tile.start_round}-${tile.end_round}`}\r\n      </p>\r\n      <div className=\"flex flex-wrap gap-2 pt-2 justify-center items-center\">\r\n        {!tile.selling ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={\"Selling Disabled\"}\r\n          >\r\n            <img src={noSellingImage} className=\"w-[34px]\" />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {!tile.monkey_knowledge ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={\"Monkey Knowledge Disabled\"}\r\n          >\r\n            <img src={noMkImage} className=\"w-[34px]\" />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {tile.tile_type === \"relic\" ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={formatGameEntityName(tile.relic as string)}\r\n          >\r\n            <img\r\n              src={relicImages[tile.relic as keyof typeof relicImages]}\r\n              className=\"w-[34px]\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={formatGameEntityName(tile.tile_type as string)}\r\n          >\r\n            <img src={tileImages[tile.tile_type]} className=\"w-[34px]\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n      {tile.heroes.length ? (\r\n        <>\r\n          <div className=\"divider px-4\">\r\n            {tile.heroes.length > 8 ? \"Heroes Excluded\" : \"Heroes\"}\r\n          </div>\r\n          <div className=\"flex flex-wrap gap-2 gap-y-3 justify-center\">\r\n            {tile.heroes.length > 8\r\n              ? allHeroes\r\n                  .filter((hero) => !tile.heroes.includes(hero))\r\n                  .map((hero) => (\r\n                    <TowerDisplay\r\n                      name={hero}\r\n                      image={heroImages[hero]}\r\n                      key={hero}\r\n                    />\r\n                  ))\r\n              : tile.heroes.map((hero) => (\r\n                  <TowerDisplay\r\n                    name={hero}\r\n                    image={heroImages[hero]}\r\n                    key={hero}\r\n                  />\r\n                ))}\r\n          </div>\r\n        </>\r\n      ) : null}\r\n      <div className=\"divider px-4\">Towers</div>\r\n      <div className=\"flex flex-wrap gap-2 gap-y-3 justify-center\">\r\n        {tile.towers.map((tower) => (\r\n          <TowerDisplay\r\n            name={tower.tower}\r\n            image={towerImages[tower.tower]}\r\n            indicator={tower.max > 0 ? tower.max : \"∞\"}\r\n            key={tower.tower}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileDisplay;\r\n","import { TileDisplay } from \"components/TileDisplay\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\n\r\nimport bannerImage from \"images/ct/banner_s.webp\";\r\nimport relicImage from \"images/ct/relic_s.webp\";\r\nimport blankImage from \"images/ct/regular_s.webp\";\r\nimport { CTData, Relic, Tile, TileType } from \"types/ct\";\r\nimport { relicImages } from \"util/formatters\";\r\nimport { formatGameEntityName } from \"util/converters\";\r\n\r\nconst TileSelector = ({\r\n  data,\r\n  loading,\r\n  selectedTile,\r\n  relics,\r\n  changeTile,\r\n}: {\r\n  data: CTData;\r\n  loading: boolean;\r\n  selectedTile: string;\r\n  relics: Relic[];\r\n  changeTile: (tile: string) => void;\r\n}) => {\r\n  const [tileFilter, setTileFilter] = useState<TileType | \"all\">(\"all\");\r\n  const [filteredTileCodes, setFilteredTileCodes] = useState<{\r\n    [key: string]: Tile;\r\n  }>({});\r\n\r\n  const handleFilter = (e: any) => {\r\n    setTileFilter(e.target.value);\r\n  };\r\n\r\n  const handleSelection = (e: any) => {\r\n    const tile = e.target.value as string;\r\n    changeTile(tile);\r\n  };\r\n\r\n  const handleRelicSelection = (e: any) => {\r\n    setTileFilter(\"relic\");\r\n    changeTile(e.target.id);\r\n    (document.getElementById(\"tile-select\") as HTMLSelectElement).value =\r\n      e.target.id;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filtered = Object.keys(data.tiles)\r\n      .sort()\r\n      .reduce((filtered: { [key: string]: Tile }, key) => {\r\n        if (\r\n          data.tiles[key].game_type === \"least_cash\" &&\r\n          (tileFilter === \"all\" || data.tiles[key].tile_type === tileFilter)\r\n        ) {\r\n          filtered[key] = data.tiles[key];\r\n        }\r\n        return filtered;\r\n      }, {});\r\n    if (!Object.keys(filtered).includes(selectedTile) && selectedTile !== \"\") {\r\n      changeTile(Object.keys(filtered).at(0) as any);\r\n    }\r\n\r\n    setFilteredTileCodes(filtered);\r\n  }, [tileFilter, data]);\r\n\r\n  return (\r\n    <div className=\"w-64\">\r\n      <div className=\"w-full justify-center\">\r\n        <p className=\"text-lg font-medium text-center\">\r\n          What tile was this scored on?\r\n        </p>\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"flex gap-4 py-1 justify-center\">\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"banner\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"banner\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={bannerImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"relic\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"relic\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={relicImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"regular\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"regular\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={blankImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"all\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"all\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <p className=\"text-sm py-3\">All</p>\r\n              </label>\r\n            </div>\r\n            <div className=\"flex gap-6\">\r\n              <select\r\n                id=\"tile-select\"\r\n                className=\"select select-bordered w-full max-w-xs\"\r\n                onChange={handleSelection}\r\n                defaultValue={\"Select a tile\"}\r\n              >\r\n                <option disabled>Select a tile</option>\r\n                {Object.entries(filteredTileCodes).map((tileCode) => (\r\n                  <option id={tileCode[0]} key={tileCode[0]}>\r\n                    {tileCode[0]}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <details className=\"dropdown dropdown-right dropdown-center\">\r\n                <summary className=\"btn w-24\">Quick Relic</summary>\r\n                <ul className=\"p-2 shadow-xl menu dropdown-content z-[1] bg-base-100 rounded-box w-52\">\r\n                  {Object.entries(data.tiles).map((tile) =>\r\n                    tile[1].tile_type === \"relic\" &&\r\n                    tile[1].game_type === \"least_cash\" ? (\r\n                      <li key={tile[1].relic as string}>\r\n                        <a id={tile[0]} onClick={handleRelicSelection}>\r\n                          <img\r\n                            className=\"w-[20px]\"\r\n                            src={\r\n                              relicImages[\r\n                                tile[1].relic as keyof typeof relicImages\r\n                              ]\r\n                            }\r\n                          />\r\n                          {formatGameEntityName(tile[1].relic as string)}\r\n                        </a>\r\n                      </li>\r\n                    ) : null\r\n                  )}\r\n                </ul>\r\n              </details>\r\n            </div>\r\n            {selectedTile ? (\r\n              <TileDisplay\r\n                tileCode={selectedTile}\r\n                tile={data.tiles[selectedTile]}\r\n              />\r\n            ) : (\r\n              <p className=\"text-center\">No tile selected.</p>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className=\"flex flex-col gap-2 w-full py-2 items-center\">\r\n            <div className=\"skeleton h-12 w-full\" />\r\n            <div className=\"skeleton h-3 w-full\" />\r\n            <div className=\"flex gap-2\">\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileSelector;\r\n","import { Tower } from \"./ct\";\r\n\r\nexport type TowerCostsData = { [key in Tower]: TowerCost };\r\n\r\nexport type TowerCost = {\r\n  cost: number;\r\n  upgrades: {\r\n    top_path: { [key: number]: number };\r\n    middle_path: { [key: number]: number };\r\n    bottom_path: { [key: number]: number };\r\n  };\r\n};\r\n\r\nexport type TowerPath = {\r\n  name: Tower;\r\n  path: string;\r\n  cost: number;\r\n};\r\n\r\nexport const emptyCost = {\r\n  cost: -1,\r\n  upgrades: {\r\n    topPath: {},\r\n    middlePath: {},\r\n    bottomPath: {},\r\n  },\r\n};\r\n\r\nexport const difficultyMultiplers = {\r\n  easy: 0.85,\r\n  medium: 1,\r\n  hard: 1.08,\r\n  impoppable: 1.2,\r\n};\r\n","import { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { TowerPath } from \"types/costs\";\r\nimport { towerImages } from \"util/formatters\";\r\n\r\nconst SolutionRow = ({ solution }: { solution: TowerPath[] }) => {\r\n  return (\r\n    <div className=\"indicator gap-3 justify-center w-2/3 border-b border-white/25 py-4\">\r\n      {solution\r\n        .sort((a, b) => b.cost - a.cost)\r\n        .map((tower) => (\r\n          <TowerDisplay\r\n            name={`${tower.name}: $${tower.cost}`}\r\n            image={towerImages[tower.name as keyof typeof towerImages]}\r\n            indicator={tower.path}\r\n            key={`${tower.path} ${tower.name}`}\r\n          />\r\n        ))}\r\n      {/* <p>\r\n        = $\r\n        {solution\r\n          .reduce((total, tower) => total + tower.cost, 0)\r\n          .toLocaleString()}\r\n      </p> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolutionRow;\r\n","import { SolutionRow } from \"components/SolutionRow\";\r\nimport { TowerPath } from \"types/costs\";\r\n\r\nconst SolutionManager = ({\r\n  solutions,\r\n  solutionTile,\r\n  disableClear,\r\n  clearSolutions,\r\n}: {\r\n  solutions: TowerPath[][];\r\n  solutionTile: string;\r\n  disableClear: boolean;\r\n  clearSolutions: () => void;\r\n}) => {\r\n  return (\r\n    <div className=\"w-64\">\r\n      <p className=\"text-lg font-bold text-center\">\r\n        Possible Solutions{solutionTile ? ` for ${solutionTile}` : \"\"}\r\n      </p>\r\n\r\n      {solutions.length > 0 ? (\r\n        <div className=\"overflow-y-scroll overflow-x-hidden max-h-96 h-96 my-4 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n          <p className=\"font-semibold\">Solutions</p>\r\n          {solutions.map((solution, index) => (\r\n            <SolutionRow solution={solution} key={index} />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-center\">Solutions will appear here.</p>\r\n      )}\r\n      <p className=\"text-center italic\">\r\n        Showing {solutions.length} total solution\r\n        {solutions.length === 1 ? \"\" : \"s\"}.\r\n      </p>\r\n      <div className=\"flex gap-4 items-center justify-center py-2\">\r\n        <button\r\n          className=\"btn min-w-24 outline outline-1 outline-error text-error\"\r\n          disabled={disableClear}\r\n          onClick={clearSolutions}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolutionManager;\r\n","import LeastCashCalculator from \"./LeastCashCalculator\";\r\nexport default LeastCashCalculator;\r\n","import leastCashImage from \"images/misc/least_cash_s.webp\";\r\nimport { RelicList } from \"components/RelicList\";\r\nimport { TileSelector } from \"components/TileSelector\";\r\nimport { useCtData } from \"hooks/useCtData\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useTowerCostData } from \"hooks/useTowerCostData\";\r\nimport { TowerPath, difficultyMultiplers } from \"types/costs\";\r\nimport { towerImages } from \"util/formatters\";\r\nimport { Relic, Tower } from \"types/ct\";\r\nimport {\r\n  TowerType,\r\n  formatGameEntityName,\r\n  roundEven5,\r\n  towerTypes,\r\n} from \"util/converters\";\r\nimport { SolutionManager } from \"components/SolutionManager\";\r\nimport { TowerDisplay } from \"components/TowerDisplay\";\r\n\r\nconst LeastCashCalculator: React.FC = () => {\r\n  const { data: ctData, loading: ctLoading } = useCtData();\r\n  const { data: costData, loading: costLoading } = useTowerCostData();\r\n  const [selectedTile, setSelectedTile] = useState(\"\");\r\n  const [selectedRelics, setSelectedRelics] = useState<Relic[]>([]);\r\n\r\n  const [targetScore, setTargetScore] = useState(0);\r\n  const [towerLimit, setTowerLimit] = useState(2);\r\n  const [limitExclusive, setLimitExclusive] = useState(false);\r\n\r\n  const [solutions, setSolutions] = useState<TowerPath[][]>([]);\r\n  const [solutionTile, setSolutionTile] = useState(\"\");\r\n  const [calculating, setCalculating] = useState(false);\r\n\r\n  const [excludedTowers, setExcludedTowers] = useState<Tower[]>([]);\r\n\r\n  const [towerFilters, setTowerFilters] = useState<TowerPath[]>([]);\r\n\r\n  const SOLUTION_HARD_CAP = 2000;\r\n\r\n  const loading = ctLoading || costLoading;\r\n\r\n  const changeTile = (tile: string) => {\r\n    setSelectedTile(tile);\r\n    if (ctData.tiles[tile].towers.find((x) => x.tower === \"monkey_village\")) {\r\n      console.log(\r\n        \"uh oh... a village tile! that'll cause issues with calculations\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleRelicFilterClick = (relic: Relic) => {\r\n    const newRelics = [...selectedRelics];\r\n    if (newRelics.includes(relic)) {\r\n      newRelics.splice(newRelics.indexOf(relic), 1);\r\n    } else {\r\n      newRelics.push(relic);\r\n    }\r\n    console.log(newRelics);\r\n    setSelectedRelics(newRelics);\r\n  };\r\n\r\n  const addTowerFilter = (tower: Tower) => {\r\n    const newTowerFilters = [...towerFilters];\r\n    const path = (document.getElementById(`${tower}-path`) as HTMLSelectElement)\r\n      .value;\r\n\r\n    const pathNums: number[] = path.split(\"\").map(Number);\r\n\r\n    if (!path) {\r\n      console.log(\"PATH EMPTY\");\r\n      return;\r\n    }\r\n\r\n    // Reject invalid paths. e.g. 530, 444, 522, etc.\r\n    const validPath = [pathNums]\r\n      .filter((ps) => ps.filter((p) => p > 2).length <= 1) // more than one primary path\r\n      .filter((ps) => ps.filter((p) => p === 0).length > 0) // all three paths upgraded\r\n      .filter((ps) => ps.filter((p) => p > 5).length === 0) // higher than tier 5\r\n      .flatMap((p) => p);\r\n\r\n    console.log(validPath);\r\n    if (validPath.length === 0) {\r\n      console.log(\"INVALID PATH\");\r\n      return;\r\n    }\r\n\r\n    newTowerFilters.push({ name: tower, path: path, cost: -1 });\r\n    console.log(newTowerFilters);\r\n    setTowerFilters(newTowerFilters);\r\n  };\r\n\r\n  const removeTowerFilter = (index: number) => {\r\n    const newTowerFilters = [...towerFilters];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newTowerFilters.splice(index, 1);\r\n    }\r\n    console.log(newTowerFilters);\r\n    setTowerFilters(newTowerFilters);\r\n  };\r\n\r\n  const handleCalculateClick = async () => {\r\n    setCalculating(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (calculating) {\r\n      setTimeout(() => {\r\n        calculateReverseCash();\r\n      }, 1);\r\n    }\r\n  }, [calculating]);\r\n\r\n  const handleScoreChange = (e: any) => {\r\n    const re = /^[0-9\\b]*$/;\r\n\r\n    // if value is not blank, then test the regex\r\n    const value: string = e.target.value;\r\n\r\n    if (value === \"\" || re.test(value)) {\r\n      setTargetScore(Number(value));\r\n    }\r\n  };\r\n\r\n  const handleLimitChange = (e: any) => {\r\n    const value: number = e.target.value;\r\n    setTowerLimit(value);\r\n  };\r\n\r\n  // Thanks Josh Cheek (Spike Factory) for assistance with this.\r\n  const calculateReverseCash = () => {\r\n    const upgradePaths = [];\r\n    const tileTowers = ctData.tiles[selectedTile].towers;\r\n\r\n    // Cost, upgrade, and limit count modifications.\r\n    const marchingBootsMod = selectedRelics.includes(\"marching_boots\") ? 1 : 0;\r\n    // Initialize with difficulty multiplier.\r\n    const priceMults: [\r\n      { towerType: TowerType | \"all\"; costMultipiler: number }\r\n    ] = [\r\n      {\r\n        towerType: \"all\",\r\n        costMultipiler:\r\n          difficultyMultiplers[\r\n            ctData.tiles[selectedTile]\r\n              .difficulty as keyof typeof difficultyMultiplers\r\n          ],\r\n      },\r\n    ];\r\n\r\n    if (selectedRelics.includes(\"air_and_sea\")) {\r\n      priceMults.push({ towerType: \"military\", costMultipiler: 0.95 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"magic_monkeys\")) {\r\n      priceMults.push({ towerType: \"magic\", costMultipiler: 0.95 });\r\n    }\r\n\r\n    console.log(priceMults);\r\n\r\n    // Push a combination of ways to produce tower upgrades.\r\n    // Oh boy! 3 Nested for loops, I'm cooked!\r\n    for (let t = 0; t < 6; t++) {\r\n      for (let m = 0; m < 6; m++) {\r\n        for (let b = 0; b < 6; b++) {\r\n          upgradePaths.push([t, m, b]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reject the duplicates.\r\n    const uniquePaths = upgradePaths.filter((value, index, self) => {\r\n      return self.indexOf(value) === index;\r\n    });\r\n\r\n    // Reject invalid paths. e.g. 530, 444, 522, etc.\r\n    const validPaths = uniquePaths\r\n      .filter((ps) => ps.filter((p) => p > 2).length <= 1) // more than one primary path\r\n      .filter((ps) => ps.filter((p) => p === 0).length > 0) // all three paths upgraded\r\n      .sort();\r\n\r\n    if (selectedTile !== \"\") {\r\n      setSolutionTile(selectedTile);\r\n      const purchasables: TowerPath[] = validPaths\r\n        .flatMap((path) => {\r\n          return Object.entries(costData).map(([name, prices]) => {\r\n            if (!tileTowers.find((tower) => name.includes(tower.tower))) {\r\n              return { name: name as Tower, path: \"\", cost: -1 };\r\n            }\r\n            const towerType = towerTypes[name as keyof typeof towerTypes];\r\n            const [top, mid, bot] = path;\r\n            // Assumed that index 0 is always difficulty multiplier.\r\n            let cost = roundEven5(prices.cost * priceMults[0].costMultipiler);\r\n            cost += Array.from({ length: top + 1 }, (_, i) => {\r\n              let total = 0;\r\n              for (let j = 0; j < priceMults.length; j++) {\r\n                if (\r\n                  priceMults[j].towerType === \"all\" ||\r\n                  towerType === priceMults[j].towerType\r\n                )\r\n                  total +=\r\n                    roundEven5(\r\n                      prices.upgrades.top_path[i] * priceMults[j].costMultipiler\r\n                    ) || 0;\r\n              }\r\n              return total;\r\n            }).reduce((a, b) => a + b, 0);\r\n            cost += Array.from({ length: mid + 1 }, (_, i) => {\r\n              let total = 0;\r\n              for (let j = 0; j < priceMults.length; j++) {\r\n                if (\r\n                  priceMults[j].towerType === \"all\" ||\r\n                  towerType === priceMults[j].towerType\r\n                )\r\n                  total +=\r\n                    roundEven5(\r\n                      prices.upgrades.middle_path[i] *\r\n                        priceMults[j].costMultipiler\r\n                    ) || 0;\r\n              }\r\n              return total;\r\n            }).reduce((a, b) => a + b, 0);\r\n            cost += Array.from({ length: bot + 1 }, (_, i) => {\r\n              let total = 0;\r\n              for (let j = 0; j < priceMults.length; j++) {\r\n                if (\r\n                  priceMults[j].towerType === \"all\" ||\r\n                  towerType === priceMults[j].towerType\r\n                )\r\n                  total +=\r\n                    roundEven5(\r\n                      prices.upgrades.bottom_path[i] *\r\n                        priceMults[j].costMultipiler\r\n                    ) || 0;\r\n              }\r\n\r\n              return total;\r\n            }).reduce((a, b) => a + b, 0);\r\n\r\n            return {\r\n              name: name as Tower,\r\n              path: path.join(\"\"),\r\n              cost: cost,\r\n            };\r\n          });\r\n        })\r\n        .filter((a) => {\r\n          // Remove any undefined towers and towers that cost more than the target score.\r\n          return a.cost > 0 && a.cost <= targetScore;\r\n        })\r\n        // Sort in descending order of cost to hopefully get high power tower combinations first.\r\n        .sort((a, b) => b.cost - a.cost);\r\n\r\n      console.log(\r\n        purchasables.filter((tower) => tower.name === \"druid_monkey\")\r\n      );\r\n\r\n      const newSolutions: TowerPath[][] = [];\r\n      // Push any tower filters to the solution, then check if the price works.\r\n      // For the price, calculate the filter(s) price, subtract from the provided score, run the calculator on that subtracted score.\r\n      const startTowers: TowerPath[] = [];\r\n      towerFilters.map((tower) => {\r\n        const pathWithCost = purchasables.find(\r\n          (p) => p.name === tower.name && p.path === tower.path\r\n        );\r\n\r\n        if (pathWithCost) startTowers.push(pathWithCost);\r\n      });\r\n\r\n      console.log(startTowers);\r\n      const startPrice = startTowers.reduce((a, b) => a + b.cost, 0);\r\n      console.log(startPrice);\r\n      console.log(\r\n        tileTowers.map((tileTower) => {\r\n          return {\r\n            name: tileTower.tower,\r\n            remaining: tileTower.max + marchingBootsMod,\r\n          };\r\n        })\r\n      );\r\n      console.log(\r\n        tileTowers.map((tileTower) => {\r\n          return {\r\n            name: tileTower.tower,\r\n            remaining: tileTower.max + marchingBootsMod,\r\n          };\r\n        })\r\n      );\r\n      findTowers({\r\n        targetPrice: targetScore - startPrice,\r\n        potentialTowers: purchasables,\r\n        towerLimit:\r\n          towerLimit -\r\n          (startTowers.length > towerLimit ? towerLimit : startTowers.length),\r\n        perTowerLimits: tileTowers.map((tileTower) => {\r\n          return {\r\n            name: tileTower.tower,\r\n            remaining: tileTower.max + marchingBootsMod,\r\n          };\r\n        }),\r\n        block: (solution: TowerPath[]) => {\r\n          if (solution.length > 0) {\r\n            newSolutions.push(startTowers.concat(solution));\r\n          }\r\n        },\r\n      });\r\n      console.log(newSolutions);\r\n\r\n      setSolutions(newSolutions.sort((a, b) => a.length - b.length));\r\n      setCalculating(false);\r\n    }\r\n  };\r\n\r\n  type findTowersProps = {\r\n    targetPrice: number;\r\n    potentialTowers: TowerPath[];\r\n    towerLimit: number;\r\n    perTowerLimits: {\r\n      name: string;\r\n      remaining: number;\r\n    }[];\r\n    block: (solution: TowerPath[]) => void;\r\n  };\r\n\r\n  let solutionsFound = 0;\r\n  const findTowers = ({\r\n    targetPrice,\r\n    potentialTowers,\r\n    towerLimit,\r\n    perTowerLimits,\r\n    block,\r\n  }: findTowersProps) => {\r\n    if (!block) {\r\n      return;\r\n    }\r\n\r\n    if (targetPrice === 0) {\r\n      // We found the solution.\r\n      if (limitExclusive && towerLimit !== 0) {\r\n        // Our solution had below the desired number of towers in the solution.\r\n        return;\r\n      }\r\n      solutionsFound++;\r\n      // Need to add the starter towers to this solution array.\r\n      block([]);\r\n      return;\r\n    } else if (targetPrice < 0) {\r\n      // We went too far, quit.\r\n      return;\r\n    } else if (towerLimit === 0) {\r\n      // We used too many towers, quit.\r\n      return;\r\n    } else if (potentialTowers.length === 0) {\r\n      // We ran out of towers to place, quit.\r\n      return;\r\n    } else if (solutionsFound >= SOLUTION_HARD_CAP) {\r\n      // We hit the hard cap of solutions to generate.\r\n      return;\r\n    }\r\n\r\n    const [tower, ...remainingTowers] = potentialTowers;\r\n    const { name, path, cost } = tower;\r\n\r\n    // Handle tower limits.\r\n    const towerLimitIndex = perTowerLimits.findIndex((element) =>\r\n      tower.name.includes(element.name)\r\n    );\r\n\r\n    if (perTowerLimits[towerLimitIndex].remaining === 0) {\r\n      remainingTowers.filter((a) => a.name !== name);\r\n    }\r\n\r\n    if (\r\n      perTowerLimits[towerLimitIndex].remaining !== 0 &&\r\n      !excludedTowers.includes(tower.name)\r\n    ) {\r\n      findTowers({\r\n        targetPrice: targetPrice - cost,\r\n        potentialTowers: remainingTowers,\r\n        towerLimit: towerLimit - 1,\r\n        perTowerLimits: perTowerLimits.map((a) => {\r\n          if (a.name === name) {\r\n            return { name: a.name, remaining: a.remaining - 1 };\r\n          } else {\r\n            return a;\r\n          }\r\n        }),\r\n        block: (solution: TowerPath[]) => {\r\n          block([tower, ...solution]);\r\n        },\r\n      });\r\n    }\r\n\r\n    findTowers({\r\n      targetPrice: targetPrice,\r\n      potentialTowers: remainingTowers,\r\n      towerLimit: towerLimit,\r\n      perTowerLimits,\r\n      block: (solution: TowerPath[]) => {\r\n        block([...solution]);\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex w-full flex-col items-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Least Cash Reverse Calculator\r\n      </p>\r\n\r\n      <div className=\"flex gap-4 items-center\">\r\n        <label className=\"input input-bordered flex items-center gap-2\">\r\n          <img src={leastCashImage} className=\"w-[28px]\" />\r\n          <input\r\n            className=\"font-medium text-lg max-w-40\"\r\n            type=\"text\"\r\n            inputMode=\"numeric\"\r\n            placeholder=\"Score\"\r\n            value={targetScore}\r\n            onChange={handleScoreChange}\r\n          />\r\n        </label>\r\n        <details className=\"dropdown\">\r\n          <summary\r\n            className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n          >\r\n            Heroes\r\n          </summary>\r\n          <ul className=\"p-2 pb-6 shadow-xl menu dropdown-content z-[51] bg-base-100 rounded-box w-56\">\r\n            <li className=\"pointer-events-none\">\r\n              <p className=\"divider justify-center px-2\">Misc.</p>\r\n            </li>\r\n            <div className=\"flex gap-2 items-center justify-center mx-2\">\r\n              <p className=\"font-medium whitespace-nowrap\">Max Towers:</p>\r\n              <input\r\n                type=\"range\"\r\n                min={1}\r\n                max={10}\r\n                value={towerLimit}\r\n                onChange={handleLimitChange}\r\n                className=\"range range-xs\"\r\n              />\r\n              <p className=\"text-lg font-medium\">{towerLimit}</p>\r\n            </div>\r\n            <li>\r\n              <a\r\n                onClick={() => {\r\n                  setLimitExclusive((old) => !old);\r\n                }}\r\n              >\r\n                <p className=\"font-medium text-sm\">\r\n                  Only solutions with {towerLimit} towers?\r\n                </p>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={limitExclusive}\r\n                  className=\"checkbox checkbox-sm\"\r\n                  readOnly\r\n                />\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </details>\r\n        {/* Open the modal using document.getElementById('ID').showModal() method */}\r\n        <button\r\n          className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n          onClick={() =>\r\n            (\r\n              document.getElementById(\"tower-modal\") as HTMLFormElement\r\n            ).showModal()\r\n          }\r\n        >\r\n          Towers\r\n        </button>\r\n        <dialog id=\"tower-modal\" className=\"modal\">\r\n          <div className=\"modal-box max-w-3xl\">\r\n            <h3 className=\"font-bold text-lg\">Tower Filters</h3>\r\n            <p className=\"py-4\">\r\n              Add any towers and paths you want the calculation to <u>ALWAYS</u>{\" \"}\r\n              consider.\r\n            </p>\r\n            <div className=\"\">\r\n              <div className=\"overflow-x-hidden overflow-y-scroll max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                <p className=\"font-semibold\">Applied Tower Filters</p>\r\n                <div className=\"indicator w-full px-12 py-4 gap-2 flex-wrap\">\r\n                  {towerFilters.map((tower, index) => (\r\n                    <a\r\n                      className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                      onClick={() => removeTowerFilter(index)}\r\n                    >\r\n                      <TowerDisplay\r\n                        name={`Delete`}\r\n                        image={\r\n                          towerImages[tower.name as keyof typeof towerImages]\r\n                        }\r\n                        indicator={tower.path}\r\n                        key={`${tower.path} ${tower.name}`}\r\n                      />\r\n                    </a>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"gap-y-2 flex flex-wrap my-4 w-full\">\r\n                {selectedTile\r\n                  ? Object.entries(ctData.tiles[selectedTile].towers).map(\r\n                      (tower) => (\r\n                        <div className={\"basis-1/2 px-4\"} key={tower[0]}>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <img\r\n                              src={\r\n                                towerImages[\r\n                                  tower[1].tower as keyof typeof towerImages\r\n                                ]\r\n                              }\r\n                              className=\"w-[28px]\"\r\n                            />\r\n\r\n                            <span className=\"label-text grow\">\r\n                              {formatGameEntityName(tower[1].tower as string)}\r\n                            </span>\r\n                            <label className=\"input input-bordered flex max-w-16\">\r\n                              <input\r\n                                className=\"font-normal w-full\"\r\n                                placeholder=\"000\"\r\n                                maxLength={3}\r\n                                id={`${tower[1].tower}-path`}\r\n                              />\r\n                            </label>\r\n                            <button\r\n                              className=\"btn outline outline-1\"\r\n                              onClick={() => addTowerFilter(tower[1].tower)}\r\n                            >\r\n                              +\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      )\r\n                    )\r\n                  : null}\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-action\">\r\n              <form method=\"dialog\">\r\n                {/* if there is a button in form, it will close the modal */}\r\n                <button className=\"btn outline outline-1 outline-error text-error\">\r\n                  Close\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <form method=\"dialog\" className=\"modal-backdrop\">\r\n            <button>close</button>\r\n          </form>\r\n        </dialog>\r\n        <details className=\"dropdown\">\r\n          <summary\r\n            className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n          >\r\n            Filters\r\n          </summary>\r\n          <ul className=\"p-2 pb-6 shadow-xl menu dropdown-content z-[51] bg-base-100 rounded-box w-56\">\r\n            <li className=\"pointer-events-none\">\r\n              <p className=\"divider justify-center px-2\">Misc.</p>\r\n            </li>\r\n            <div className=\"flex gap-2 items-center justify-center mx-2\">\r\n              <p className=\"font-medium whitespace-nowrap\">Max Towers:</p>\r\n              <input\r\n                type=\"range\"\r\n                min={1}\r\n                max={10}\r\n                value={towerLimit}\r\n                onChange={handleLimitChange}\r\n                className=\"range range-xs\"\r\n              />\r\n              <p className=\"text-lg font-medium\">{towerLimit}</p>\r\n            </div>\r\n            <li>\r\n              <a\r\n                onClick={() => {\r\n                  setLimitExclusive((old) => !old);\r\n                }}\r\n              >\r\n                <p className=\"font-medium text-sm\">\r\n                  Only solutions with {towerLimit} towers?\r\n                </p>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={limitExclusive}\r\n                  className=\"checkbox checkbox-sm\"\r\n                  readOnly\r\n                />\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </details>\r\n        <button\r\n          className={\r\n            \"btn min-w-24 outline outline-1\" +\r\n            (calculating\r\n              ? \" outline-warning text-warning\"\r\n              : \" outline-success text-success\")\r\n          }\r\n          disabled={selectedTile === \"\"}\r\n          onClick={() => {\r\n            setCalculating(true);\r\n            handleCalculateClick();\r\n          }}\r\n        >\r\n          {calculating ? \"Loading...\" : \"Calculate\"}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"flex gap-2 py-5\">\r\n        <TileSelector\r\n          data={ctData}\r\n          loading={loading}\r\n          selectedTile={selectedTile}\r\n          changeTile={changeTile}\r\n          relics={selectedRelics}\r\n        />\r\n        <div className=\"divider divider-horizontal\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"10.605\"\r\n            height=\"15.555\"\r\n            className=\"fill-neutral-content overflow-visible\"\r\n          >\r\n            <path d=\"m2.828 15.555 7.777-7.779L2.828 0 0 2.828l4.949 4.948L0 12.727l2.828 2.828z\" />\r\n          </svg>\r\n        </div>\r\n        <RelicList\r\n          data={ctData}\r\n          loading={loading}\r\n          relics={selectedRelics}\r\n          handleRelicFilterClick={handleRelicFilterClick}\r\n        />\r\n        <div className=\"divider divider-horizontal\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"10.605\"\r\n            height=\"15.555\"\r\n            className=\"fill-neutral-content overflow-visible\"\r\n          >\r\n            <path d=\"m2.828 15.555 7.777-7.779L2.828 0 0 2.828l4.949 4.948L0 12.727l2.828 2.828z\" />\r\n          </svg>\r\n        </div>\r\n        <SolutionManager\r\n          solutions={solutions}\r\n          solutionTile={solutionTile}\r\n          disableClear={selectedTile === \"\"}\r\n          clearSolutions={() => {\r\n            setSolutionTile(\"\");\r\n            setSolutions([]);\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"divider font-display\">Notes</div>\r\n      <p className=\"text-center\">\r\n        This calculator is experimental! It's not guaranteed to work.\r\n        <br />\r\n        Thanks Josh Cheek (Spike Factory) for the base algorithm.\r\n        <br />\r\n        Suggestions regarding: UI/UX, solution ordering, filters, and such, are\r\n        always welcome.\r\n      </p>\r\n      <div className=\"divider font-display\">Nerdy Stuff</div>\r\n      <p className=\"text-center\">\r\n        It's possible that the site crashes while doing calculations. All I can\r\n        say right now is be nice with your parameters.\r\n        <br />\r\n        If your goal is to crash the site, you're in the wrong place.\r\n        <br />\r\n      </p>\r\n      <p className=\"font-semibold\">The algorithm works as follows:</p>\r\n      <ul>\r\n        <li>\r\n          - Build data structure (an array) with all possible upgrade paths\r\n          (000, 203, 051, etc.)\r\n        </li>\r\n        <li>\r\n          - Apply prices of available towers to possible upgrade paths, removing\r\n          ones greater than the target score (user input)\r\n        </li>\r\n        <li>- Apply any relic modifers and tower count restrictions</li>\r\n        <li>\r\n          - Generate a ton of combinations (the computation heavy portion)\r\n        </li>\r\n        <li>\r\n          - Display solutions; hopefully ones with 1 or more high power towers\r\n          (tiers 4-5; if applicable)\r\n        </li>\r\n      </ul>\r\n      <div className=\"divider font-display\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeastCashCalculator;\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { CTData, Tile, emptyTile } from \"types/ct\";\r\n\r\nexport const useCtData = () => {\r\n  const url = \"https://sciplypandora.github.io/static/json/configs/CT55.json\";\r\n  const [data, setData] = useState<CTData>({\r\n    size: -1,\r\n    event: -1,\r\n    tiles: { [\"\"]: emptyTile },\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        for (let key in jsonData.tiles) {\r\n          if (!jsonData.tiles[key].map) {\r\n            delete jsonData.tiles[key];\r\n          }\r\n        }\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { TowerCostsData } from \"types/costs\";\r\n\r\nexport const useTowerCostData = () => {\r\n  const url =\r\n    \"https://raw.githubusercontent.com/hemisemidemipresent/cyberquincy/master/jsons/costs.json\";\r\n  const [data, setData] = useState<TowerCostsData>({} as TowerCostsData);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { Tower } from \"types/ct\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  ctTeamMedalImages,\r\n  raceMedalImages,\r\n} from \"./formatters\";\r\nimport { EventType } from \"types/events\";\r\n\r\nexport type TowerType = \"primary\" | \"military\" | \"magic\" | \"support\";\r\n\r\nexport const roundEven5 = (num: number) => {\r\n  if (num % 5 === 2.5) {\r\n    return Math.floor(num / 5) * 5;\r\n  }\r\n  return Math.round(num / 5) * 5;\r\n};\r\n\r\nexport const convertMsToTimeFormat = (ms: number): string => {\r\n  // Calculate the hours, minutes, seconds, and milliseconds\r\n  const hours = Math.floor(ms / 3600000);\r\n  const minutes = Math.floor((ms % 3600000) / 60000);\r\n  const seconds = Math.floor((ms % 60000) / 1000);\r\n  const milliseconds = Math.floor((ms % 1000) / 10); // Extract two digits of milliseconds\r\n\r\n  // Format each part to ensure two digits\r\n  const formattedHours = hours > 0 ? hours.toString().padStart(2, \"0\") : \"\";\r\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\r\n  const formattedSeconds = seconds.toString().padStart(2, \"0\");\r\n  const formattedMilliseconds = milliseconds.toString().padStart(2, \"0\");\r\n\r\n  // Combine and return the formatted string\r\n  return formattedHours\r\n    ? `${formattedHours}:${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`\r\n    : `${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`;\r\n};\r\n\r\nexport const timeAgo = (timestamp: number): string => {\r\n  const now = Date.now();\r\n  const elapsed = now - timestamp;\r\n\r\n  const msPerSecond = 1000;\r\n  const msPerMinute = msPerSecond * 60;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    const seconds = Math.floor(elapsed / msPerSecond);\r\n    return `${seconds} second${seconds !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerHour) {\r\n    const minutes = Math.floor(elapsed / msPerMinute);\r\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerDay) {\r\n    const hours = Math.floor(elapsed / msPerHour);\r\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\r\n  } else {\r\n    const days = Math.floor(elapsed / msPerDay);\r\n    return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\r\n  }\r\n};\r\n\r\nexport const formatGameEntityName = (entity: string): string => {\r\n  const wordsToExclude = [\"or\", \"the\", \"a\", \"of\"];\r\n\r\n  return entity\r\n    .split(\"_\")\r\n    .map((word) => {\r\n      if (\r\n        wordsToExclude.includes(word) &&\r\n        entity.split(\"_\").indexOf(word) !== 0\r\n      ) {\r\n        return word;\r\n      }\r\n      return word.charAt(0).toUpperCase() + word.slice(1);\r\n    })\r\n    .join(\" \");\r\n};\r\n\r\nexport const formatToUpperCase = (entity: string): string => {\r\n  return entity\r\n    .split(\"_\")\r\n    .map((word) => {\r\n      return word.charAt(0).toUpperCase() + word.slice(1);\r\n    })\r\n    .join(\"\");\r\n};\r\n\r\nexport const placeToRaceMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return raceMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return raceMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return raceMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return raceMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return raceMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return raceMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return raceMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return raceMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return raceMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossNormalMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossNormalMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossNormalMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossNormalMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossNormalMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossNormalMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossNormalMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossNormalMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossNormalMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossNormalMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossEliteMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossEliteMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossEliteMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossEliteMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossEliteMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossEliteMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossEliteMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossEliteMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossEliteMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossEliteMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtPlayerMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place <= 25) {\r\n    return ctPlayerMedalImages.diamond;\r\n  } else if (place <= 100) {\r\n    return ctPlayerMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return ctPlayerMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return ctPlayerMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctPlayerMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return ctPlayerMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctPlayerMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtTeamMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return ctTeamMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return ctTeamMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return ctTeamMedalImages.diamond;\r\n  } else if (place <= 25) {\r\n    return ctTeamMedalImages.gold_diamond;\r\n  } else if (place <= 100) {\r\n    return ctTeamMedalImages.double_gold;\r\n  } else if (percentile <= 1) {\r\n    return ctTeamMedalImages.gold_silver;\r\n  } else if (percentile <= 10) {\r\n    return ctTeamMedalImages.double_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctTeamMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctTeamMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const appendOrdinalSuffix = (number: number): string => {\r\n  const j = number % 10;\r\n  const k = number % 100;\r\n  if (j === 1 && k !== 11) {\r\n    return number + \"st\";\r\n  }\r\n  if (j === 2 && k !== 12) {\r\n    return number + \"nd\";\r\n  }\r\n  if (j === 3 && k !== 13) {\r\n    return number + \"rd\";\r\n  }\r\n  return number + \"th\";\r\n};\r\n\r\nexport const towerTypes: { [key in Tower]: TowerType } = {\r\n  alchemist: \"magic\",\r\n  banana_farm: \"support\",\r\n  beast_handler: \"support\",\r\n  boomerang_monkey: \"primary\",\r\n  bomb_shooter: \"primary\",\r\n  dart_monkey: \"primary\",\r\n  dartling_gunner: \"military\",\r\n  druid: \"magic\",\r\n  druid_monkey: \"magic\",\r\n  engineer_monkey: \"support\",\r\n  glue_gunner: \"primary\",\r\n  heli_pilot: \"military\",\r\n  ice_monkey: \"primary\",\r\n  mermonkey: \"magic\",\r\n  monkey_ace: \"military\",\r\n  monkey_buccaneer: \"military\",\r\n  monkey_sub: \"military\",\r\n  monkey_village: \"support\",\r\n  mortar_monkey: \"military\",\r\n  ninja_monkey: \"magic\",\r\n  sniper_monkey: \"military\",\r\n  spike_factory: \"support\",\r\n  super_monkey: \"magic\",\r\n  tack_shooter: \"primary\",\r\n  wizard_monkey: \"magic\",\r\n};\r\n\r\nexport const prettyEventNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Boss\",\r\n  Boss2: \"Boss\",\r\n  Boss3: \"Boss\",\r\n  Boss4: \"Boss\",\r\n  CtPlayer: \"Contested Territory\",\r\n  CtTeam: \"Contested Territory\",\r\n};\r\n\r\nexport const prettyNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Solo\",\r\n  Boss2: \"Duo\",\r\n  Boss3: \"Trio\",\r\n  Boss4: \"Quad\",\r\n  CtPlayer: \"Player\",\r\n  CtTeam: \"Team\",\r\n};\r\n"],"names":["costInfluencingRelics","name","id","image","description","_ref","data","loading","relics","handleRelicFilterClick","relicList","setRelicList","useState","handleCheck","e","target","useEffect","Object","entries","tiles","map","tile","relic","push","_jsxs","className","children","_jsx","includes","src","type","checked","disabled","onChange","emptyTile","colour","tile_type","game_type","boss","tiers","game_mode","difficulty","cash","start_round","end_round","max_towers","monkey_knowledge","selling","ceramic_health","moab_health","bloon_speed","moab_speed","regrow_rate","heroes","towers","allHeroes","indicator","formatGameEntityName","_tile$cash","tileCode","mapImages","gameTypeImages","concat","toLocaleString","_Fragment","noSellingImage","noMkImage","relicImages","tileImages","length","filter","hero","TowerDisplay","heroImages","tower","towerImages","max","selectedTile","changeTile","tileFilter","setTileFilter","filteredTileCodes","setFilteredTileCodes","handleFilter","value","handleRelicSelection","document","getElementById","filtered","keys","sort","reduce","key","at","bannerImage","relicImage","blankImage","defaultValue","onClick","TileDisplay","difficultyMultiplers","easy","medium","hard","impoppable","solution","a","b","cost","path","solutions","solutionTile","disableClear","clearSolutions","index","SolutionRow","LeastCashCalculator","ctData","ctLoading","useCtData","url","setData","size","event","setLoading","async","response","fetch","ok","Error","jsonData","json","console","log","error","fetchData","costData","costLoading","useTowerCostData","setSelectedTile","selectedRelics","setSelectedRelics","targetScore","setTargetScore","towerLimit","setTowerLimit","limitExclusive","setLimitExclusive","setSolutions","setSolutionTile","calculating","setCalculating","excludedTowers","setExcludedTowers","towerFilters","setTowerFilters","setTimeout","calculateReverseCash","handleLimitChange","upgradePaths","tileTowers","marchingBootsMod","priceMults","towerType","costMultipiler","t","m","validPaths","self","indexOf","ps","p","purchasables","flatMap","prices","find","towerTypes","top","mid","bot","roundEven5","Array","from","_","i","total","j","upgrades","top_path","middle_path","bottom_path","join","newSolutions","startTowers","pathWithCost","startPrice","tileTower","remaining","findTowers","targetPrice","potentialTowers","perTowerLimits","block","solutionsFound","_ref2","remainingTowers","towerLimitIndex","findIndex","element","leastCashImage","inputMode","placeholder","test","Number","min","old","readOnly","showModal","newTowerFilters","splice","removeTowerFilter","maxLength","pathNums","split","validPath","addTowerFilter","method","handleCalculateClick","TileSelector","x","xmlns","width","height","d","RelicList","newRelics","SolutionManager","num","Math","floor","round","convertMsToTimeFormat","ms","hours","minutes","seconds","milliseconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","formattedMilliseconds","timeAgo","timestamp","elapsed","Date","now","msPerMinute","msPerSecond","msPerHour","msPerDay","days","entity","wordsToExclude","word","charAt","toUpperCase","slice","formatToUpperCase","placeToRaceMedal","place","totalEntries","percentile","raceMedalImages","black_diamond","red_diamond","diamond","gold_diamond","double_gold","gold_silver","double_silver","silver","bronze","placeToBossNormalMedal","bossNormalMedalImages","placeToBossEliteMedal","bossEliteMedalImages","placeToCtPlayerMedal","ctPlayerMedalImages","placeToCtTeamMedal","ctTeamMedalImages","appendOrdinalSuffix","number","k","alchemist","banana_farm","beast_handler","boomerang_monkey","bomb_shooter","dart_monkey","dartling_gunner","druid","druid_monkey","engineer_monkey","glue_gunner","heli_pilot","ice_monkey","mermonkey","monkey_ace","monkey_buccaneer","monkey_sub","monkey_village","mortar_monkey","ninja_monkey","sniper_monkey","spike_factory","super_monkey","tack_shooter","wizard_monkey","prettyEventNames","Race","Boss","Boss2","Boss3","Boss4","CtPlayer","CtTeam"],"sourceRoot":""}