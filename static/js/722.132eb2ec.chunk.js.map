{"version":3,"file":"static/js/722.132eb2ec.chunk.js","mappings":"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","sources":["components/TileDisplay/TileDisplay.tsx","components/TileSelector/TileSelector.tsx","components/TowerDisplay/TowerDisplay.tsx","configs/ctIds.config.ts","hooks/useCtData.tsx","hooks/useCtEventRelics.tsx","configs/relics.config.ts","components/RelicList/RelicList.tsx","hooks/useTowerCostData.tsx","types/costs.ts","components/SolutionRow/SolutionRow.tsx","components/SolutionManager/SolutionManager.tsx","pages/LeastCashCalculator/LeastCashCalculator.tsx","pages/LeastCashCalculator/index.tsx","hooks/useHeroCostData.tsx"],"sourcesContent":["import {\r\n  towerImages,\r\n  mapImages,\r\n  relicImages,\r\n  tileImages,\r\n  gameTypeImages,\r\n} from \"util/formatters\";\r\nimport { Tile } from \"types/ct\";\r\n\r\nimport noSellingImage from \"images/modifiers/selling_disabled.webp\";\r\nimport noMkImage from \"images/modifiers/monkey_knowledge_disabled.webp\";\r\nimport { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { convertGameTypeToString, formatGameEntityName } from \"util/converters\";\r\n\r\nconst TileDisplay = ({ tileCode, tile }: { tileCode: string; tile: Tile }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"indicator w-full flex flex-col outline outline-1 outline-white/50 rounded-xl items-center my-8 py-4 pb-6 bg-no-repeat bg-top bg-cover bg-clip-border \" +\r\n        mapImages[tile.GameData.selectedMap as keyof typeof mapImages]\r\n      }\r\n    >\r\n      <div className=\"indicator-item indicator-top indicator-center badge badge-ghost font-semibold gap-1 px-5 py-3 outline outline-1 outline-white/25\">\r\n        <img\r\n          src={\r\n            gameTypeImages[\r\n              tile.GameData.subGameType as keyof typeof gameTypeImages\r\n            ]\r\n          }\r\n          className=\"w-[16px]\"\r\n        />\r\n        {formatGameEntityName(\r\n          convertGameTypeToString(tile.GameData.subGameType)\r\n        )}\r\n      </div>\r\n      <p className=\"font-bold text-2xl text-center\">{tileCode}</p>\r\n      <p className=\"font-medium text-md text-center\">\r\n        {formatGameEntityName(tile.GameData.selectedMap as string)} //{\" \"}\r\n        {formatGameEntityName(tile.GameData.selectedDifficulty as string)}\r\n      </p>\r\n      <p className=\"text-md text-center\">\r\n        {`$${tile.GameData.dcModel.startRules.cash?.toLocaleString()} // `}{\" \"}\r\n        {`Round ${tile.GameData.dcModel.startRules.round}-${tile.GameData.dcModel.startRules.endRound}`}\r\n      </p>\r\n      <div className=\"flex flex-wrap gap-2 pt-2 justify-center items-center\">\r\n        {tile.GameData.dcModel.disableSelling ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={\"Selling Disabled\"}\r\n          >\r\n            <img src={noSellingImage} className=\"w-[34px]\" />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {tile.GameData.dcModel.disableMK ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={\"Monkey Knowledge Disabled\"}\r\n          >\r\n            <img src={noMkImage} className=\"w-[34px]\" />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {tile.TileType === \"Relic\" ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={formatGameEntityName(tile.RelicType as string)}\r\n          >\r\n            <img\r\n              src={relicImages[tile.RelicType as keyof typeof relicImages]}\r\n              className=\"w-[34px]\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={formatGameEntityName(tile.TileType as string)}\r\n          >\r\n            <img src={tileImages[tile.TileType]} className=\"w-[34px]\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n      {tile.GameData.dcModel.towers._items.filter(\r\n        (x) => x.isHero && x.max !== 0\r\n      ).length ? (\r\n        <>\r\n          <div className=\"divider px-4\">\r\n            {tile.GameData.dcModel.towers._items.filter(\r\n              (x) => x.isHero && x.max !== 0\r\n            ).length >\r\n            tile.GameData.dcModel.towers._items.filter((x) => x.isHero).length /\r\n              2\r\n              ? \"Heroes Excluded\"\r\n              : \"Heroes\"}\r\n          </div>\r\n          <div className=\"flex flex-wrap gap-2 gap-y-3 justify-center\">\r\n            {tile.GameData.dcModel.towers._items.filter(\r\n              (x) => x.isHero && x.max !== 0\r\n            ).length >\r\n            tile.GameData.dcModel.towers._items.filter((x) => x.isHero).length /\r\n              2\r\n              ? tile.GameData.dcModel.towers._items\r\n                  .filter(\r\n                    (x) =>\r\n                      x.isHero && x.max === 0 && x.tower !== \"ChosenPrimaryHero\"\r\n                  )\r\n                  .map((hero) => (\r\n                    <TowerDisplay\r\n                      name={hero.tower}\r\n                      image={towerImages[hero.tower]}\r\n                      key={hero.tower}\r\n                    />\r\n                  ))\r\n              : tile.GameData.dcModel.towers._items\r\n                  .filter((x) => x.isHero && x.max !== 0)\r\n                  .map((hero) => (\r\n                    <TowerDisplay\r\n                      name={hero.tower}\r\n                      image={towerImages[hero.tower]}\r\n                      key={hero.tower}\r\n                    />\r\n                  ))}\r\n          </div>\r\n        </>\r\n      ) : null}\r\n      <div className=\"divider px-4\">Towers</div>\r\n      <div className=\"flex flex-wrap gap-2 gap-y-3 justify-center\">\r\n        {tile.GameData.dcModel.towers._items\r\n          .filter((x) => !x.isHero && x.max !== 0)\r\n          .map((tower) => (\r\n            <TowerDisplay\r\n              name={tower.tower}\r\n              image={towerImages[tower.tower]}\r\n              indicator={tower.max > 0 ? tower.max : \"∞\"}\r\n              key={tower.tower}\r\n            />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileDisplay;\r\n","import { TileDisplay } from \"components/TileDisplay\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\n\r\nimport bannerImage from \"images/ct/banner_s.webp\";\r\nimport relicImage from \"images/ct/relic_s.webp\";\r\nimport blankImage from \"images/ct/regular_s.webp\";\r\nimport { CTData, GameType, Relic, Tile, TileType } from \"types/ct\";\r\nimport { relicImages } from \"util/formatters\";\r\nimport {\r\n  formatGameEntityName,\r\n  gameTypeToSubGameTypeVal,\r\n} from \"util/converters\";\r\n\r\nconst TileSelector = ({\r\n  data,\r\n  loading,\r\n  selectedTile,\r\n  gameType,\r\n  changeTile,\r\n}: {\r\n  data: CTData;\r\n  loading: boolean;\r\n  selectedTile: string;\r\n  gameType: GameType;\r\n  changeTile: (tile: string) => void;\r\n}) => {\r\n  const [tileFilter, setTileFilter] = useState<TileType | \"All\">(\"All\");\r\n  const [filteredTileCodes, setFilteredTileCodes] = useState<{\r\n    [key: string]: Tile;\r\n  }>({});\r\n\r\n  const handleFilter = (e: any) => {\r\n    setTileFilter(e.target.value);\r\n  };\r\n\r\n  const handleSelection = (e: any) => {\r\n    const tile = e.target.value as string;\r\n    changeTile(tile);\r\n  };\r\n\r\n  const handleRelicSelection = (e: any, tile: string) => {\r\n    setTileFilter(\"Relic\");\r\n    changeTile(tile);\r\n    (document.getElementById(\"tile-select\") as HTMLSelectElement).value =\r\n      e.target.id;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filtered = Object.keys(data)\r\n      .sort()\r\n      .reduce((filtered: { [key: string]: Tile }, key) => {\r\n        if (\r\n          data[key].GameData.subGameType ===\r\n            gameTypeToSubGameTypeVal[gameType] &&\r\n          (tileFilter === \"All\" || data[key].TileType === tileFilter)\r\n        ) {\r\n          filtered[key] = data[key];\r\n        }\r\n        return filtered;\r\n      }, {});\r\n    if (!Object.keys(filtered).includes(selectedTile) && selectedTile !== \"\") {\r\n      changeTile(Object.keys(filtered).at(0) as any);\r\n    }\r\n\r\n    setFilteredTileCodes(filtered);\r\n  }, [tileFilter, data]);\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"w-full justify-center\">\r\n        <p className=\"text-lg font-medium text-center\">Select a Tile</p>\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"flex gap-4 py-1 justify-center\">\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Banner\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"Banner\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={bannerImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Relic\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"Relic\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={relicImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Regular\"\r\n                  className=\"radio\"\r\n                  checked={\r\n                    tileFilter === \"Regular\" ||\r\n                    tileFilter === \"TeamFirstCapture\"\r\n                  }\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={blankImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"All\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"All\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <p className=\"text-sm py-3\">All</p>\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center justify-center gap-6\">\r\n              <select\r\n                id=\"tile-select\"\r\n                className=\"select select-bordered w-full max-w-xs\"\r\n                onChange={handleSelection}\r\n                defaultValue={\"Select a tile\"}\r\n              >\r\n                <option disabled>Select a tile</option>\r\n                {Object.entries(filteredTileCodes).map((tileCode) => (\r\n                  <option id={tileCode[0]} key={tileCode[0]}>\r\n                    {tileCode[0]}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <details className=\"dropdown dropdown-right dropdown-center\">\r\n                <summary className=\"btn w-24\">Quick Relic</summary>\r\n                <ul className=\"p-2 shadow-xl menu dropdown-content z-[1] bg-base-100 rounded-box w-52 outline outline-white/25 outline-1\">\r\n                  {Object.entries(data).map((tile) =>\r\n                    tile[1].TileType === \"Relic\" &&\r\n                    tile[1].GameData.subGameType ===\r\n                      gameTypeToSubGameTypeVal[gameType] ? (\r\n                      <li key={tile[1].RelicType as string}>\r\n                        <a\r\n                          id={tile[0]}\r\n                          onClick={(e) => {\r\n                            handleRelicSelection(e, tile[0]);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            className=\"w-[20px]\"\r\n                            src={\r\n                              relicImages[\r\n                                tile[1].RelicType as keyof typeof relicImages\r\n                              ]\r\n                            }\r\n                          />\r\n                          {formatGameEntityName(tile[1].RelicType as string)}\r\n                        </a>\r\n                      </li>\r\n                    ) : null\r\n                  )}\r\n                </ul>\r\n              </details>\r\n            </div>\r\n            {selectedTile ? (\r\n              <TileDisplay tileCode={selectedTile} tile={data[selectedTile]} />\r\n            ) : (\r\n              <p className=\"text-center\">No tile selected.</p>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className=\"flex flex-col gap-2 w-full py-2 items-center\">\r\n            <div className=\"skeleton h-12 w-full\" />\r\n            <div className=\"skeleton h-3 w-full\" />\r\n            <div className=\"flex gap-2\">\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileSelector;\r\n","import { formatGameEntityName } from \"util/converters\";\r\nimport boxOfMonkeyImage from \"images/relics/box_of_monkey.webp\";\r\n\r\nconst TowerDisplay = ({\r\n  name,\r\n  image,\r\n  indicator,\r\n  boxOfMonkey,\r\n}: {\r\n  name: string;\r\n  image: string;\r\n  indicator?: string | number;\r\n  boxOfMonkey?: boolean;\r\n}) => {\r\n  return (\r\n    <div\r\n      className=\"tooltip before:z-50 before:content-[attr(data-tip)] \"\r\n      data-tip={formatGameEntityName(name)}\r\n    >\r\n      {indicator ? (\r\n        <span className=\"indicator-item indicator-bottom indicator-center badge px-2 outline outline-white/25 outline-1 rounded-[4px] font-medium shadow-lg\">\r\n          {indicator}\r\n        </span>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {boxOfMonkey ? (\r\n        <span className=\"indicator-item indicator-top font-medium shadow-lg\">\r\n          <img src={boxOfMonkeyImage} className=\"w-[24px]\" />\r\n        </span>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <div className=\"avatar\">\r\n        <div className=\"w-8 rounded-full shadow outline outline-1 outline-white/25\">\r\n          <img src={image} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TowerDisplay;\r\n","const ctIds = [\r\n  {\r\n    id: \"m9pd8ibs\",\r\n    number: 71,\r\n  },\r\n  {\r\n    id: \"m95j4jxz\",\r\n    number: 70,\r\n  },\r\n  {\r\n    id: \"m8hqi31i\",\r\n    number: 69,\r\n  },\r\n  {\r\n    id: \"m83itkz6\",\r\n    number: 68,\r\n  },\r\n  {\r\n    id: \"m7ju46fy\",\r\n    number: 67,\r\n  },\r\n  {\r\n    id: \"m6y0a205\",\r\n    number: 66,\r\n  },\r\n  {\r\n    id: \"m6h1l4xd\",\r\n    number: 65,\r\n  },\r\n  {\r\n    id: \"m5k2an8p\",\r\n    number: 64,\r\n  },\r\n  {\r\n    id: \"m4q6vtme\",\r\n    number: 63,\r\n  },\r\n  {\r\n    id: \"m4q6ddt7\",\r\n    number: 62,\r\n  },\r\n  {\r\n    id: \"m4adofkk\",\r\n    number: 61,\r\n  },\r\n  {\r\n    id: \"m3rvyepv\",\r\n    number: 60,\r\n  },\r\n  {\r\n    id: \"m34yd7qs\",\r\n    number: 59,\r\n  },\r\n  {\r\n    id: \"m2kwlt60\",\r\n    number: 58,\r\n  },\r\n  {\r\n    id: \"m22b3l2q\",\r\n    number: 57,\r\n  },\r\n  {\r\n    id: \"m18f2i05\",\r\n    number: 56,\r\n  },\r\n  {\r\n    id: \"m0n34q7z\",\r\n    number: 55,\r\n  },\r\n  {\r\n    id: \"m05t53n4\",\r\n    number: 54,\r\n  },\r\n  {\r\n    id: \"lzt9vnfv\",\r\n    number: 53,\r\n  },\r\n  {\r\n    id: \"lywiirac\",\r\n    number: 52,\r\n  },\r\n  {\r\n    id: \"lygltxgu\",\r\n    number: 51,\r\n  },\r\n  {\r\n    id: \"lxo2ds1k\",\r\n    number: 50,\r\n  },\r\n  {\r\n    id: \"lx9ho5f2\",\r\n    number: 49,\r\n  },\r\n  {\r\n    id: \"lwsgoq2e\",\r\n    number: 48,\r\n  },\r\n  {\r\n    id: \"lw3zptqw\",\r\n    number: 47,\r\n  },\r\n  {\r\n    id: \"lvk1it2j\",\r\n    number: 46,\r\n  },\r\n  {\r\n    id: \"luub1xz5\",\r\n    number: 45,\r\n  },\r\n  {\r\n    id: \"lug12fgd\",\r\n    number: 44,\r\n  },\r\n  {\r\n    id: \"lts2aqan\",\r\n    number: 43,\r\n  },\r\n  {\r\n    id: \"ltkys2el\",\r\n    number: 42,\r\n  },\r\n  {\r\n    id: \"lswkbyus\",\r\n    number: 41,\r\n  },\r\n  {\r\n    id: \"ls2jg6ct\",\r\n    number: 40,\r\n  },\r\n  {\r\n    id: \"lrlbwtxn\",\r\n    number: 39,\r\n  },\r\n  {\r\n    id: \"lr3uz1d8\",\r\n    number: 38,\r\n  },\r\n  {\r\n    id: \"lqa43ghl\",\r\n    number: 37,\r\n  },\r\n  {\r\n    id: \"lq63jr4t\",\r\n    number: 36,\r\n  },\r\n  {\r\n    id: \"lphkfmue\",\r\n    number: 35,\r\n  },\r\n  {\r\n    id: \"lorujl6k\",\r\n    number: 34,\r\n  },\r\n  {\r\n    id: \"lo3dbb57\",\r\n    number: 33,\r\n  },\r\n  {\r\n    id: \"lncmwv1g\",\r\n    number: 32,\r\n  },\r\n  {\r\n    id: \"lndqbo35\",\r\n    number: 31,\r\n  },\r\n  {\r\n    id: \"lmpnzhq6\",\r\n    number: 30,\r\n  },\r\n  {\r\n    id: \"lm77zack\",\r\n    number: 29,\r\n  },\r\n  {\r\n    id: \"lleh5fpm\",\r\n    number: 28,\r\n  },\r\n  {\r\n    id: \"ll1f7vl8\",\r\n    number: 27,\r\n  },\r\n  {\r\n    id: \"lkj6emus\",\r\n    number: 26,\r\n  },\r\n  {\r\n    id: \"ljxai1s8\",\r\n    number: 25,\r\n  },\r\n  {\r\n    id: \"ljetrjjf\",\r\n    number: 24,\r\n  },\r\n  {\r\n    id: \"lisaoa37\",\r\n    number: 23,\r\n  },\r\n  {\r\n    id: \"lhzbbljg\",\r\n    number: 22,\r\n  },\r\n  {\r\n    id: \"lhgt6hxj\",\r\n    number: 21,\r\n  },\r\n  {\r\n    id: \"lgzmgxif\",\r\n    number: 20,\r\n  },\r\n  {\r\n    id: \"lgli8qmt\",\r\n    number: 19,\r\n  },\r\n  {\r\n    id: \"lg1ioh3o\",\r\n    number: 18,\r\n  },\r\n  {\r\n    id: \"lfbp5rsx\",\r\n    number: 17,\r\n  },\r\n  {\r\n    id: \"lenh39dp\",\r\n    number: 16,\r\n  },\r\n  {\r\n    id: \"ledh1q44\",\r\n    number: 15,\r\n  },\r\n  {\r\n    id: \"ldkqe7g6\",\r\n    number: 14,\r\n  },\r\n  {\r\n    id: \"ld2c7egr\",\r\n    number: 13,\r\n  },\r\n  {\r\n    id: \"lcjmdijk\",\r\n    number: 12,\r\n  },\r\n  {\r\n    id: \"lbn286o5\",\r\n    number: 11,\r\n  },\r\n  {\r\n    id: \"lbei2nd1\",\r\n    number: 10,\r\n  },\r\n  {\r\n    id: \"lau3vdb5\",\r\n    number: 9,\r\n  },\r\n  {\r\n    id: \"labw9mm1\",\r\n    number: 8,\r\n  },\r\n  {\r\n    id: \"l9qakvod\",\r\n    number: 7,\r\n  },\r\n  {\r\n    id: \"l9dkq0ma\",\r\n    number: 6,\r\n  },\r\n  {\r\n    id: \"l8t9h7wa\",\r\n    number: 5,\r\n  },\r\n  {\r\n    id: \"l884uw8u\",\r\n    number: 4,\r\n  },\r\n  {\r\n    id: \"l7i90j39\",\r\n    number: 3,\r\n  },\r\n  {\r\n    id: \"l76rtr72\",\r\n    number: 2,\r\n  },\r\n  {\r\n    id: \"l6efnna0\",\r\n    number: 1,\r\n  },\r\n];\r\n\r\nexport default ctIds;\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { CTData, Tile } from \"types/ct\";\r\n\r\nexport const useCtData = (eventId: number) => {\r\n  const url =\r\n    \"https://storage.googleapis.com/btd6-ct-map/events/\" +\r\n    eventId +\r\n    \"/tiles.json\";\r\n\r\n  const [data, setData] = useState<CTData>({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: CTData = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [eventId]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { Relic } from \"types/ct\";\r\n\r\nexport const useCtEventRelics = (eventId: number) => {\r\n  const url =\r\n    \"https://storage.googleapis.com/btd6-ct-map/events/\" +\r\n    eventId +\r\n    \"/event_relics.json\";\r\n  const [data, setData] = useState<Relic[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: Relic[] = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [eventId]);\r\n\r\n  return { data, loading };\r\n};\r\n","import airAndSeaImage from \"images/relics/air_and_sea.webp\";\r\nimport boxOfMonkeyImage from \"images/relics/box_of_monkey.webp\";\r\nimport magicMonkeysImage from \"images/relics/magic_monkeys.webp\";\r\nimport marchingBootsImage from \"images/relics/marching_boots.webp\";\r\nimport militaryMonkeysImage from \"images/relics/military_monkeys.webp\";\r\nimport monkeyTycoonImage from \"images/relics/monkey_tycoon.webp\";\r\nimport primaryPrimatesImage from \"images/relics/primary_primates.webp\";\r\nimport supportSimiansImages from \"images/relics/support_simians.webp\";\r\nimport startingStashImage from \"images/relics/starting_stash.webp\";\r\nimport { RelicData } from \"types/relic\";\r\n\r\nconst costInfluencingRelics: RelicData[] = [\r\n  {\r\n    name: \"Air and Sea\",\r\n    id: \"AirAndSea\",\r\n    image: airAndSeaImage,\r\n    description:\r\n      \"Ace, Heli, Buccaneer and Sub have their placement and upgrade costs reduced by 5%, and their reload improved by 5% \",\r\n  },\r\n  {\r\n    name: \"Box of Monkey\",\r\n    id: \"BoxOfMonkey\",\r\n    image: boxOfMonkeyImage,\r\n    description:\r\n      \"Start each game with one free Monkey costing $400 or less for unmodified initial placement.\",\r\n  },\r\n  {\r\n    name: \"Magic Monkeys\",\r\n    id: \"MagicMonkeys\",\r\n    image: magicMonkeysImage,\r\n    description: \"Reduces cost of all Magic Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Marching Boots\",\r\n    id: \"MarchingBoots\",\r\n    image: marchingBootsImage,\r\n    description:\r\n      \"In restricted count games, give players +1 max count of each tower in their loadout or +4 total max count per game.\",\r\n  },\r\n  {\r\n    name: \"Military Monkeys\",\r\n    id: \"MilitaryMonkeys\",\r\n    image: militaryMonkeysImage,\r\n    description: \"Reduces cost of all Military Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Monkey Tycoon\",\r\n    id: \"MonkeyTycoon\",\r\n    image: monkeyTycoonImage,\r\n    description:\r\n      \"Get +1 of all Monkey Towers in your loadout and their base price is reduced by 4%.\",\r\n  },\r\n  {\r\n    name: \"Primary Primates\",\r\n    id: \"PrimaryPrimates\",\r\n    image: primaryPrimatesImage,\r\n    description: \"Reduces cost of all Primary Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Support Simians\",\r\n    id: \"SupportSimians\",\r\n    image: supportSimiansImages,\r\n    description: \"Reduces cost of all Support Monkeys by 8%.\",\r\n  },\r\n  {\r\n    name: \"Starting Stash\",\r\n    id: \"StartingStash\",\r\n    image: startingStashImage,\r\n    description:\r\n      \"Start each game with an extra 250 cash (stacks with More Cash on Regular Tiles).\",\r\n  },\r\n];\r\n\r\nexport default costInfluencingRelics;\r\n","import costInfluencingRelics from \"configs/relics.config\";\r\nimport { useCtEventRelics } from \"hooks/useCtEventRelics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { CTData, Relic } from \"types/ct\";\r\n\r\nconst RelicList = ({\r\n  data,\r\n  eventRelics,\r\n  loading,\r\n  relics,\r\n  handleRelicFilterClick,\r\n}: {\r\n  data: CTData;\r\n  eventRelics: Relic[];\r\n  loading: boolean;\r\n  relics: Relic[];\r\n  handleRelicFilterClick: (relic: Relic) => void;\r\n}) => {\r\n  const [relicList, setRelicList] = useState<string[]>([]);\r\n\r\n  const handleCheck = (e: any) => {\r\n    handleRelicFilterClick(e.target.id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let relics: string[] = [];\r\n    Object.entries(data).map((tile) => {\r\n      if (tile[1].RelicType) {\r\n        relics.push(tile[1].RelicType);\r\n      }\r\n    });\r\n\r\n    setRelicList(relics.concat(eventRelics));\r\n  }, [data, eventRelics]);\r\n\r\n  return (\r\n    <div className=\"w-2/3\">\r\n      <p className=\"text-lg font-medium text-center\">Select some Relics</p>\r\n      <div className=\"w-full\">\r\n        {!loading ? (\r\n          costInfluencingRelics.map((relic) => (\r\n            <div\r\n              className=\"tooltip flex\"\r\n              data-tip={\r\n                relicList.includes(relic.id)\r\n                  ? relic.description\r\n                  : \"Not available this event.\"\r\n              }\r\n              key={relic.id}\r\n            >\r\n              <label\r\n                className={\r\n                  \"label w-full\" +\r\n                  (!relicList.includes(relic.id)\r\n                    ? \" cursor-not-allowed opacity-40\"\r\n                    : \" cursor-pointer\")\r\n                }\r\n              >\r\n                <img src={relic.image} className=\"w-[28px]\" />\r\n                <span className=\"label-text\">{relic.name}</span>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={relics.includes(relic.id as Relic)}\r\n                  className=\"checkbox checkbox-sm\"\r\n                  id={relic.id}\r\n                  disabled={!relicList.includes(relic.id)}\r\n                  onChange={handleCheck}\r\n                />\r\n              </label>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"flex flex-col gap-2 w-full py-2 items-center\">\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n            <div className=\"skeleton h-6 w-full\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RelicList;\r\n","import { useEffect, useState } from \"react\";\r\nimport { HeroCostsData, TowerCostsData } from \"types/costs\";\r\n\r\nexport const useTowerCostData = () => {\r\n  const url =\r\n    \"https://raw.githubusercontent.com/hemisemidemipresent/cyberquincy/master/jsons/costs.json\";\r\n  const [data, setData] = useState<TowerCostsData>({} as TowerCostsData);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        Object.entries(jsonData).forEach((obj) => {\r\n          jsonData[\r\n            obj[0]\r\n              .replace(\"druid_monkey\", \"Druid\")\r\n              .replace(\"engineer\", \"EngineerMonkey\")\r\n              .replace(/(_\\w)/g, (match) => match[1].toUpperCase()) // Capitalize letters after underscores\r\n              .replace(/^./, (match) => match.toUpperCase())\r\n          ] = jsonData[obj[0]];\r\n          delete jsonData[obj[0]];\r\n        });\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { Difficulty, Tower } from \"./ct\";\r\n\r\nexport type TowerCostsData = { [key in Tower]: TowerCost };\r\n\r\nexport type HeroCostsData = { [key in Tower]: HeroCost };\r\n\r\nexport type TowerCost = {\r\n  cost: number;\r\n  upgrades: {\r\n    top_path: { [key: number]: number };\r\n    middle_path: { [key: number]: number };\r\n    bottom_path: { [key: number]: number };\r\n  };\r\n};\r\n\r\nexport type HeroCost = {\r\n  cost: number;\r\n  levelModifier: number;\r\n};\r\n\r\nexport type TowerPath = {\r\n  name: Tower;\r\n  path: string;\r\n  cost: number;\r\n  boxOfMonkey?: boolean;\r\n  isHero?: boolean;\r\n};\r\n\r\nexport const emptyCost = {\r\n  cost: -1,\r\n  upgrades: {\r\n    topPath: {},\r\n    middlePath: {},\r\n    bottomPath: {},\r\n  },\r\n};\r\n\r\nexport const difficultyMultiplers: Record<Difficulty, number> = {\r\n  Easy: 0.85,\r\n  Medium: 1,\r\n  Hard: 1.08,\r\n  // Impoppable: 1.2,\r\n};\r\n","import { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { TowerPath } from \"types/costs\";\r\nimport { towerImages } from \"util/formatters\";\r\n\r\nconst SolutionRow = ({ solution }: { solution: TowerPath[] }) => {\r\n  return (\r\n    <div className=\"indicator gap-3 items-center px-12 justify-center border-b border-white/25 py-4\">\r\n      {solution\r\n        .sort((a, b) => b.cost - a.cost)\r\n        .map((tower, i) => (\r\n          <TowerDisplay\r\n            name={`${tower.name}: $${tower.cost.toLocaleString()}${\r\n              tower.boxOfMonkey ? \"*\" : \"\"\r\n            }`}\r\n            image={towerImages[tower.name as keyof typeof towerImages]}\r\n            indicator={tower.path}\r\n            boxOfMonkey={tower.boxOfMonkey}\r\n            key={i}\r\n          />\r\n        ))}\r\n      {/* <span className=\"indicator indicator-item indicator-bottom indicator-center font-light text-sm\">\r\n        $\r\n        {solution\r\n          .reduce((total, tower) => total + tower.cost, 0)\r\n          .toLocaleString()}\r\n      </span> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolutionRow;\r\n","import { SolutionRow } from \"components/SolutionRow\";\r\nimport { TowerPath } from \"types/costs\";\r\nimport { Tower } from \"types/ct\";\r\n\r\nconst SolutionManager = ({\r\n  solutions,\r\n  solutionTile,\r\n  solutionNum,\r\n  disableClear,\r\n  clearSolutions,\r\n}: {\r\n  solutions: TowerPath[][];\r\n  solutionTile: string;\r\n  solutionNum: number;\r\n  disableClear: boolean;\r\n  clearSolutions: () => void;\r\n}) => {\r\n  return (\r\n    <div className=\"w-full\">\r\n      <p className=\"text-lg font-bold text-center\">\r\n        Possible Solutions\r\n        {solutionTile ? ` for ${solutionTile} in CT${solutionNum}` : \"\"}\r\n      </p>\r\n\r\n      {solutions.length > 0 ? (\r\n        <div className=\"overflow-y-scroll max-h-96 h-96 my-4 py-4 px-12 flex flex-col items-center bg-base-200 rounded-xl\">\r\n          <p className=\"font-semibold\">Solutions</p>\r\n          <div className=\"flex flex-wrap w-full gap-x-2 px-2 items-center justify-center\">\r\n            {solutions.map((solution, index) => (\r\n              <SolutionRow solution={solution} key={index} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p className=\"text-center\">Solutions will appear here.</p>\r\n      )}\r\n      <p className=\"text-center italic\">\r\n        Showing {solutions.length} total solution\r\n        {solutions.length === 1 ? \"\" : \"s\"}.\r\n      </p>\r\n      <div className=\"flex gap-4 items-center justify-center py-2\">\r\n        <button\r\n          className=\"btn min-w-24 outline outline-1 outline-error text-error\"\r\n          disabled={disableClear}\r\n          onClick={clearSolutions}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolutionManager;\r\n","import leastCashImage from \"images/misc/least_cash_s.webp\";\r\nimport { RelicList } from \"components/RelicList\";\r\nimport { TileSelector } from \"components/TileSelector\";\r\nimport { useCtData } from \"hooks/useCtData\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useTowerCostData } from \"hooks/useTowerCostData\";\r\nimport { TowerPath, difficultyMultiplers } from \"types/costs\";\r\nimport { towerImages } from \"util/formatters\";\r\nimport { Relic, Tower } from \"types/ct\";\r\nimport {\r\n  TowerType,\r\n  formatGameEntityName,\r\n  roundEven5,\r\n  towerTypes,\r\n} from \"util/converters\";\r\nimport { SolutionManager } from \"components/SolutionManager\";\r\nimport { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { useLeaderboard } from \"hooks/useLeaderboard\";\r\nimport ctIds from \"configs/ctIds.config\";\r\nimport { useCtEventRelics } from \"hooks/useCtEventRelics\";\r\nimport { useHeroCostData } from \"hooks/useHeroCostData\";\r\nimport { Loading } from \"components/Loading\";\r\n\r\nconst LeastCashCalculator: React.FC = () => {\r\n  const [eventNum, setEventNum] = useState<number>(ctIds[0].number);\r\n\r\n  const { data: ctData, loading: ctLoading } = useCtData(eventNum);\r\n  const { data: eventRelics, loading: eventRelicsLoading } =\r\n    useCtEventRelics(eventNum);\r\n\r\n  const { data: costData, loading: costLoading } = useTowerCostData();\r\n  const { data: heroCostData, loading: heroCostLoading } = useHeroCostData();\r\n  const [selectedTile, setSelectedTile] = useState(\"\");\r\n  const [selectedRelics, setSelectedRelics] = useState<Relic[]>([]);\r\n\r\n  const [targetScore, setTargetScore] = useState(0);\r\n  const [towerLimit, setTowerLimit] = useState(2);\r\n  const [limitExclusive, setLimitExclusive] = useState(false);\r\n  const [hideUnaffordable, setHideUnaffordable] = useState(true);\r\n  const [showHeroSolutions, setShowHeroSolutions] = useState(false);\r\n\r\n  const [solutions, setSolutions] = useState<TowerPath[][]>([]);\r\n  const [solutionTile, setSolutionTile] = useState(\"\");\r\n  const [solutionCtNum, setSolutionCtNum] = useState(0);\r\n  const [calculating, setCalculating] = useState(false);\r\n\r\n  const [includedTowers, setIncludedTowers] = useState<Tower[]>([]);\r\n  const [excludedTowers, setExcludedTowers] = useState<Tower[]>([]);\r\n\r\n  const [includedHeroes, setIncludedHeroes] = useState<Tower[]>([]);\r\n  const [excludedHeroes, setExcludedHeroes] = useState<Tower[]>([]);\r\n\r\n  const [towerFilters, setTowerFilters] = useState<TowerPath[]>([]);\r\n\r\n  const SOLUTION_HARD_CAP = 2000;\r\n\r\n  const loading =\r\n    ctLoading || costLoading || heroCostLoading || eventRelicsLoading;\r\n\r\n  const changeTile = (tile: string) => {\r\n    setSelectedTile(tile);\r\n    console.log(tile);\r\n    console.log(ctData[tile]);\r\n    if (\r\n      ctData[tile].GameData.dcModel.towers._items\r\n        .filter((x) => !x.isHero && x.max !== 0)\r\n        .find((x) => x.tower === \"MonkeyVillage\")\r\n    ) {\r\n      console.log(\r\n        \"uh oh... a village tile! that'll cause issues with calculations\"\r\n      );\r\n    }\r\n\r\n    if (\r\n      ctData[tile].GameData.dcModel.towers._items\r\n        .filter((x) => x.isHero && x.max !== 0)\r\n        .find((x) => x.tower === \"Geraldo\")\r\n    ) {\r\n      console.log(\r\n        \"uh oh... a geraldo tile! that bozo has a bunch of items that cost cash! luckily all of his things cost the same at every level. HOWEVER, i am too lazy to implement that atm\"\r\n      );\r\n    }\r\n\r\n    setTowerFilters([]);\r\n    setIncludedTowers([]);\r\n    setExcludedTowers([]);\r\n    setIncludedHeroes([]);\r\n    setExcludedHeroes([]);\r\n  };\r\n\r\n  const handleRelicFilterClick = (relic: Relic) => {\r\n    const newRelics = [...selectedRelics];\r\n    if (newRelics.includes(relic)) {\r\n      newRelics.splice(newRelics.indexOf(relic), 1);\r\n    } else {\r\n      newRelics.push(relic);\r\n    }\r\n    console.log(newRelics);\r\n    setSelectedRelics(newRelics);\r\n  };\r\n\r\n  const addIncludedHero = (hero: Tower) => {\r\n    const newIncludedHeroes = [...includedHeroes];\r\n\r\n    if (newIncludedHeroes.includes(hero)) {\r\n      return;\r\n    }\r\n\r\n    newIncludedHeroes.push(hero);\r\n    console.log(newIncludedHeroes);\r\n    setIncludedHeroes(newIncludedHeroes);\r\n  };\r\n\r\n  const removeIncludedHero = (index: number) => {\r\n    const newIncludedHeroes = [...includedHeroes];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newIncludedHeroes.splice(index, 1);\r\n    }\r\n    console.log(newIncludedHeroes);\r\n    setIncludedHeroes(newIncludedHeroes);\r\n  };\r\n\r\n  const addExcludedHero = (hero: Tower) => {\r\n    const newExcludedHeroes = [...excludedHeroes];\r\n\r\n    if (newExcludedHeroes.includes(hero)) {\r\n      return;\r\n    }\r\n\r\n    newExcludedHeroes.push(hero);\r\n    console.log(newExcludedHeroes);\r\n    setExcludedHeroes(newExcludedHeroes);\r\n  };\r\n\r\n  const removeExcludedHero = (index: number) => {\r\n    const newExcludedHeroes = [...excludedHeroes];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newExcludedHeroes.splice(index, 1);\r\n    }\r\n    console.log(newExcludedHeroes);\r\n    setExcludedHeroes(newExcludedHeroes);\r\n  };\r\n\r\n  const addExcludedTower = (tower: Tower) => {\r\n    const newExcludedTowers = [...excludedTowers];\r\n\r\n    if (newExcludedTowers.includes(tower)) {\r\n      return;\r\n    }\r\n\r\n    newExcludedTowers.push(tower);\r\n    console.log(newExcludedTowers);\r\n    setExcludedTowers(newExcludedTowers);\r\n  };\r\n\r\n  const removeExcludedTower = (index: number) => {\r\n    const newExcludedTowers = [...excludedTowers];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newExcludedTowers.splice(index, 1);\r\n    }\r\n    console.log(newExcludedTowers);\r\n    setExcludedTowers(newExcludedTowers);\r\n  };\r\n\r\n  const addTowerFilter = (tower: Tower) => {\r\n    const newTowerFilters = [...towerFilters];\r\n    const path = (document.getElementById(`${tower}-path`) as HTMLSelectElement)\r\n      .value;\r\n\r\n    const pathNums: number[] = path.split(\"\").map(Number);\r\n\r\n    if (!path) {\r\n      const newIncludedTowers = [...includedTowers];\r\n\r\n      if (newIncludedTowers.includes(tower)) {\r\n        return;\r\n      }\r\n\r\n      newIncludedTowers.push(tower);\r\n      console.log(newIncludedTowers);\r\n      setIncludedTowers(newIncludedTowers);\r\n      return;\r\n    }\r\n\r\n    // Reject invalid paths. e.g. 530, 444, 522, etc.\r\n    const validPath = [pathNums]\r\n      .filter((ps) => ps.filter((p) => p > 2).length <= 1) // more than one primary path\r\n      .filter((ps) => ps.filter((p) => p === 0).length > 0) // all three paths upgraded\r\n      .filter((ps) => ps.filter((p) => p > 5).length === 0) // higher than tier 5\r\n      .flatMap((p) => p);\r\n\r\n    console.log(validPath);\r\n    if (validPath.length === 0) {\r\n      console.log(\"INVALID PATH\");\r\n      return;\r\n    }\r\n\r\n    newTowerFilters.push({ name: tower, path: path, cost: -1 });\r\n    console.log(newTowerFilters);\r\n    setTowerFilters(newTowerFilters);\r\n  };\r\n\r\n  const removeTowerFilter = (index: number) => {\r\n    const newTowerFilters = [...towerFilters];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newTowerFilters.splice(index, 1);\r\n    }\r\n    console.log(newTowerFilters);\r\n    setTowerFilters(newTowerFilters);\r\n  };\r\n\r\n  const removeIncludedTower = (index: number) => {\r\n    const newIncludedTowers = [...includedTowers];\r\n    console.log(index);\r\n    if (index >= 0) {\r\n      newIncludedTowers.splice(index, 1);\r\n    }\r\n    console.log(newIncludedTowers);\r\n    setIncludedTowers(newIncludedTowers);\r\n  };\r\n\r\n  const handleCalculateClick = async () => {\r\n    setCalculating(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (calculating) {\r\n      setTimeout(() => {\r\n        calculateReverseCash();\r\n      }, 1);\r\n    }\r\n  }, [calculating]);\r\n\r\n  const handleScoreChange = (e: any) => {\r\n    const re = /^[0-9\\b]*$/;\r\n\r\n    // if value is not blank, then test the regex\r\n    const value: string = e.target.value;\r\n\r\n    if (value === \"\" || re.test(value)) {\r\n      setTargetScore(Number(value));\r\n    }\r\n  };\r\n\r\n  const handleLimitChange = (e: any) => {\r\n    const value: number = e.target.value;\r\n    setTowerLimit(value);\r\n  };\r\n\r\n  // Thanks Josh Cheek (Spike Factory) for assistance with this.\r\n  const calculateReverseCash = () => {\r\n    const upgradePaths = [];\r\n    const tileTowers = ctData[\r\n      selectedTile\r\n    ].GameData.dcModel.towers._items.filter((x) => !x.isHero && x.max !== 0);\r\n    const tileHeroes = ctData[\r\n      selectedTile\r\n    ].GameData.dcModel.towers._items.filter((x) => x.isHero && x.max !== 0);\r\n    console.log(tileTowers);\r\n\r\n    // Cost, upgrade, and limit count modifications.\r\n    const monkeyTycoonMod = selectedRelics.includes(\"MonkeyTycoon\") ? 1 : 0;\r\n    const marchingBootsMod = selectedRelics.includes(\"MarchingBoots\") ? 1 : 0;\r\n    const startingStashMod = selectedRelics.includes(\"StartingStash\") ? 250 : 0;\r\n\r\n    const relicMod = monkeyTycoonMod + marchingBootsMod;\r\n    // Initialize with difficulty multiplier.\r\n    const priceMults: [\r\n      { towerType: TowerType | \"all\"; costMultipiler: number }\r\n    ] = [\r\n      {\r\n        towerType: \"all\",\r\n        costMultipiler:\r\n          difficultyMultiplers[\r\n            ctData[selectedTile].GameData\r\n              .selectedDifficulty as keyof typeof difficultyMultiplers\r\n          ],\r\n      },\r\n    ];\r\n\r\n    // Relic price reductions.\r\n    if (selectedRelics.includes(\"AirAndSea\")) {\r\n      priceMults.push({ towerType: \"military\", costMultipiler: 0.95 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"MilitaryMonkeys\")) {\r\n      priceMults.push({ towerType: \"military\", costMultipiler: 0.92 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"MagicMonkeys\")) {\r\n      priceMults.push({ towerType: \"magic\", costMultipiler: 0.92 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"MonkeyTycoon\")) {\r\n      priceMults.push({ towerType: \"all\", costMultipiler: 0.96 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"PrimaryPrimates\")) {\r\n      priceMults.push({ towerType: \"primary\", costMultipiler: 0.92 });\r\n    }\r\n\r\n    if (selectedRelics.includes(\"SupportSimians\")) {\r\n      priceMults.push({ towerType: \"support\", costMultipiler: 0.92 });\r\n    }\r\n\r\n    console.log(priceMults);\r\n    console.log(heroCostData);\r\n\r\n    // Push a combination of ways to produce tower upgrades.\r\n    // Oh boy! 3 Nested for loops, I'm cooked!\r\n    for (let t = 0; t < 6; t++) {\r\n      for (let m = 0; m < 6; m++) {\r\n        for (let b = 0; b < 6; b++) {\r\n          upgradePaths.push([t, m, b]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Reject the duplicates.\r\n    const uniquePaths = upgradePaths.filter((value, index, self) => {\r\n      return self.indexOf(value) === index;\r\n    });\r\n\r\n    // Reject invalid paths. e.g. 530, 444, 522, etc.\r\n    const validPaths = uniquePaths\r\n      .filter((ps) => ps.filter((p) => p > 2).length <= 1) // more than one primary path\r\n      .filter((ps) => ps.filter((p) => p === 0).length > 0) // all three paths upgraded\r\n      .sort();\r\n\r\n    if (selectedTile !== \"\") {\r\n      setSolutionTile(selectedTile);\r\n      setSolutionCtNum(eventNum);\r\n      const purchasables: TowerPath[] = validPaths\r\n        .flatMap((path) => {\r\n          return Object.entries(costData).flatMap(([name, prices]) => {\r\n            if (!tileTowers.find((tower) => name.includes(tower.tower))) {\r\n              return { name: name as Tower, path: \"\", cost: -1 };\r\n            }\r\n            const towerType = towerTypes[name as keyof typeof towerTypes];\r\n            const [top, mid, bot] = path;\r\n            // Assumed that index 0 is always difficulty multiplier.\r\n            const initialCost = roundEven5(\r\n              prices.cost * priceMults[0].costMultipiler\r\n            );\r\n            let cost =\r\n              initialCost +\r\n              Array.from({ length: top + 1 }, (_, i) => {\r\n                let total = 0;\r\n                for (let j = 0; j < priceMults.length; j++) {\r\n                  if (\r\n                    priceMults[j].towerType === \"all\" ||\r\n                    towerType === priceMults[j].towerType\r\n                  )\r\n                    total +=\r\n                      roundEven5(\r\n                        prices.upgrades.top_path[i] *\r\n                          priceMults[j].costMultipiler\r\n                      ) || 0;\r\n                }\r\n                return total;\r\n              }).reduce((a, b) => a + b, 0);\r\n            cost += Array.from({ length: mid + 1 }, (_, i) => {\r\n              let total = 0;\r\n              for (let j = 0; j < priceMults.length; j++) {\r\n                if (\r\n                  priceMults[j].towerType === \"all\" ||\r\n                  towerType === priceMults[j].towerType\r\n                )\r\n                  total +=\r\n                    roundEven5(\r\n                      prices.upgrades.middle_path[i] *\r\n                        priceMults[j].costMultipiler\r\n                    ) || 0;\r\n              }\r\n              return total;\r\n            }).reduce((a, b) => a + b, 0);\r\n            cost += Array.from({ length: bot + 1 }, (_, i) => {\r\n              let total = 0;\r\n              for (let j = 0; j < priceMults.length; j++) {\r\n                if (\r\n                  priceMults[j].towerType === \"all\" ||\r\n                  towerType === priceMults[j].towerType\r\n                )\r\n                  total +=\r\n                    roundEven5(\r\n                      prices.upgrades.bottom_path[i] *\r\n                        priceMults[j].costMultipiler\r\n                    ) || 0;\r\n              }\r\n\r\n              return total;\r\n            }).reduce((a, b) => a + b, 0);\r\n\r\n            // Apply a Box of Monkey purchasable, if selected.\r\n            // The idea here is to make a duplicate tower entry with a modified cost and add a \"boxOfMonkey\" flag to it.\r\n            // This way a designer can add a visual flag to any tower with a Box of Monkey application.\r\n            if (selectedRelics.includes(\"BoxOfMonkey\") && initialCost <= 400) {\r\n              return [\r\n                {\r\n                  name: name as Tower,\r\n                  path: path.join(\"\"),\r\n                  cost: cost,\r\n                },\r\n                {\r\n                  name: name as Tower,\r\n                  path: path.join(\"\"),\r\n                  cost: cost - initialCost,\r\n                  boxOfMonkey: true,\r\n                },\r\n              ];\r\n            } else {\r\n              return [\r\n                {\r\n                  name: name as Tower,\r\n                  path: path.join(\"\"),\r\n                  cost: cost,\r\n                },\r\n              ];\r\n            }\r\n          });\r\n        })\r\n        .concat(\r\n          tileHeroes.map((x) => {\r\n            return {\r\n              name: x.tower,\r\n              path: \"\",\r\n              cost: heroCostData[x.tower].cost,\r\n              isHero: true,\r\n            };\r\n          })\r\n        )\r\n        .filter((a) => {\r\n          // Remove any undefined towers and towers that cost more than the target score.\r\n          return a.cost > 0 && a.cost <= targetScore;\r\n        })\r\n        // Sort in descending order of cost to hopefully get high power tower combinations first.\r\n        .sort((a, b) => b.cost - a.cost);\r\n\r\n      console.log(purchasables);\r\n      const newSolutions: TowerPath[][] = [];\r\n      // Push any of the applied tower filters to the solution, then check if the price works.\r\n      // For the price, calculate the filter(s) price, subtract from the provided score, run the calculator on that subtracted score.\r\n      const startTowers: TowerPath[] = [];\r\n      towerFilters.map((tower) => {\r\n        const pathWithCost = purchasables.find(\r\n          (p) => p.name === tower.name && p.path === tower.path\r\n        );\r\n\r\n        if (pathWithCost) startTowers.push(pathWithCost);\r\n      });\r\n\r\n      const startPrice = startTowers.reduce((a, b) => a + b.cost, 0);\r\n      findTowers({\r\n        targetPrice: targetScore - startPrice,\r\n        potentialTowers: purchasables,\r\n        towerLimit:\r\n          towerLimit -\r\n          (startTowers.length > towerLimit ? towerLimit : startTowers.length),\r\n        perTowerLimits: tileTowers\r\n          .map((tileTower) => {\r\n            return {\r\n              name: tileTower.tower,\r\n              remaining:\r\n                tileTower.max +\r\n                relicMod -\r\n                startTowers.filter((x) => x.name === tileTower.tower).length,\r\n              isHero: false,\r\n            };\r\n          })\r\n          .concat(\r\n            tileHeroes.map((tileHero) => {\r\n              return {\r\n                name: tileHero.tower,\r\n                remaining: tileHero.max,\r\n                isHero: true,\r\n              };\r\n            })\r\n          ),\r\n        block: (solution: TowerPath[]) => {\r\n          if (solution.length >= 0) {\r\n            newSolutions.push(startTowers.concat(solution));\r\n          }\r\n        },\r\n      });\r\n      console.log(newSolutions);\r\n\r\n      // The filter removes any towers that cannot be afforded at the start.\r\n      // Potentially add this as a toggle for relics like SMS and Road Spikes.\r\n      if (hideUnaffordable) {\r\n        setSolutions(\r\n          newSolutions\r\n            .filter(\r\n              (x) =>\r\n                x.filter((x) => {\r\n                  const cost =\r\n                    costData[x.name]?.cost ?? heroCostData[x.name]?.cost;\r\n                  return (\r\n                    cost <\r\n                    ctData[selectedTile].GameData.dcModel.startRules.cash +\r\n                      startingStashMod\r\n                  );\r\n                }).length !== 0\r\n            )\r\n            .sort((a, b) => a.length - b.length)\r\n        );\r\n      } else {\r\n        setSolutions(newSolutions.sort((a, b) => a.length - b.length));\r\n      }\r\n      setCalculating(false);\r\n    }\r\n  };\r\n\r\n  type findTowersProps = {\r\n    targetPrice: number;\r\n    potentialTowers: TowerPath[];\r\n    towerLimit: number;\r\n    perTowerLimits: {\r\n      name: string;\r\n      remaining: number;\r\n      isHero: boolean;\r\n    }[];\r\n    block: (solution: TowerPath[]) => void;\r\n  };\r\n\r\n  let solutionsFound = 0;\r\n  const findTowers = ({\r\n    targetPrice,\r\n    potentialTowers,\r\n    towerLimit,\r\n    perTowerLimits,\r\n    block,\r\n  }: findTowersProps) => {\r\n    if (!block) {\r\n      return;\r\n    }\r\n\r\n    // End cases.\r\n    if (targetPrice === 0) {\r\n      // We found the solution.\r\n      if (limitExclusive && towerLimit !== 0) {\r\n        // Our solution had below the desired number of towers in the solution.\r\n        return;\r\n      }\r\n      solutionsFound++;\r\n      // Need to add the starter towers to this solution array.\r\n      block([]);\r\n      return;\r\n    } else if (targetPrice < 0) {\r\n      // We went too far, quit.\r\n      return;\r\n    } else if (towerLimit === 0) {\r\n      // We used too many towers, quit.\r\n      return;\r\n    } else if (potentialTowers.length === 0) {\r\n      // We ran out of towers to place, quit.\r\n      return;\r\n    } else if (solutionsFound >= SOLUTION_HARD_CAP) {\r\n      // We hit the hard cap of solutions to generate.\r\n      return;\r\n    }\r\n\r\n    const [tower, ...remainingTowers] = potentialTowers;\r\n\r\n    const { name, cost, boxOfMonkey } = tower;\r\n\r\n    // Handle tower limits.\r\n    const towerLimitIndex = perTowerLimits.findIndex((a) =>\r\n      name.includes(a.name)\r\n    );\r\n\r\n    if (\r\n      perTowerLimits[towerLimitIndex].remaining !== 0 &&\r\n      !excludedTowers.includes(name) &&\r\n      !excludedHeroes.includes(name)\r\n    ) {\r\n      findTowers({\r\n        targetPrice: targetPrice - cost,\r\n        // Once we find a Box of Monkey tower, remove it, because we don't want other\r\n        // Box of Monkey towers in the solution. That's not how the relic works :).\r\n        potentialTowers: potentialTowers.filter((x) =>\r\n          boxOfMonkey ? !x.boxOfMonkey : true\r\n        ),\r\n        towerLimit: towerLimit - 1,\r\n        perTowerLimits: perTowerLimits.map((a) =>\r\n          // No more heroes after one.\r\n          a.isHero && tower.isHero\r\n            ? { ...a, remaining: 0 }\r\n            : a.name === name\r\n            ? { ...a, remaining: a.remaining - 1 }\r\n            : a\r\n        ),\r\n        block: (solution: TowerPath[]) => {\r\n          block([tower, ...solution]);\r\n        },\r\n      });\r\n    }\r\n\r\n    findTowers({\r\n      targetPrice: targetPrice,\r\n      potentialTowers: remainingTowers,\r\n      towerLimit: towerLimit,\r\n      perTowerLimits,\r\n      block: (solution: TowerPath[]) => {\r\n        block([...solution]);\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex w-full flex-col items-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Least Cash Reverse Calculator\r\n      </p>\r\n      <div className=\"flex flex-col gap-4 items-center\">\r\n        <label className=\"input input-bordered flex items-center gap-2\">\r\n          <img src={leastCashImage} className=\"w-[24px]\" />\r\n          <input\r\n            className=\"font-semibold text-2xl max-w-40\"\r\n            type=\"text\"\r\n            inputMode=\"numeric\"\r\n            placeholder=\"Score\"\r\n            value={targetScore}\r\n            onChange={handleScoreChange}\r\n          />\r\n        </label>\r\n        <div className=\"flex items-center gap-4\">\r\n          <p className=\"text-nowrap\">Select a CT event:</p>\r\n          <select\r\n            id=\"ct-select\"\r\n            className=\"select select-bordered w-full max-w-xs\"\r\n            onChange={(e) => {\r\n              console.log(e.target.options.selectedIndex);\r\n            }}\r\n            value={eventNum}\r\n          >\r\n            {ctIds.map((x) => (\r\n              <option\r\n                key={x.number}\r\n                value={x.number}\r\n                onClick={() => setEventNum(x.number)}\r\n              >\r\n                {x.number} ({x.id})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"flex gap-4 items-center\">\r\n          {/* Open the modal using document.getElementById('ID').showModal() method */}\r\n          <button\r\n            className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n            onClick={() =>\r\n              (\r\n                document.getElementById(\"hero-modal\") as HTMLFormElement\r\n              ).showModal()\r\n            }\r\n            // disabled={\r\n            //   ctData[selectedTile].GameData.dcModel.towers._items.filter(\r\n            //     (x) => x.isHero && x.max !== 0\r\n            //   ).length === 0\r\n            // }\r\n          >\r\n            Heroes\r\n          </button>\r\n          <dialog id=\"hero-modal\" className=\"modal\">\r\n            <div className=\"modal-box max-w-3xl\">\r\n              <h3 className=\"font-bold text-lg text-primary\">Hero Filters</h3>\r\n              <p className=\"py-4\">\r\n                Add any heroes you want the calculation to <u>ALWAYS</u>{\" \"}\r\n                consider.{\" \"}\r\n                <i>Note that bought hero levels are not calculated in this.</i>\r\n              </p>\r\n              <div className=\"\">\r\n                <div className=\"flex w-full gap-4\">\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                    <p className=\"font-semibold\">Included Heroes</p>\r\n                    <div className=\"indicator items-center w-full px-12 py-4 gap-6 flex-wrap\">\r\n                      {includedHeroes.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeIncludedHero(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[tower as keyof typeof towerImages]\r\n                            }\r\n                            key={`${tower}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                    <p className=\"font-semibold\">Excluded Heroes</p>\r\n                    <div className=\"indicator items-center w-full px-12 py-4 gap-6 flex-wrap\">\r\n                      {excludedHeroes.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeExcludedHero(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[tower as keyof typeof towerImages]\r\n                            }\r\n                            key={`${tower}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"gap-y-2 flex flex-wrap my-4 w-full\">\r\n                  {selectedTile\r\n                    ? Object.entries(\r\n                        ctData[\r\n                          selectedTile\r\n                        ].GameData.dcModel.towers._items.filter(\r\n                          (x) => x.isHero && x.max !== 0\r\n                        )\r\n                      ).map((tower) => (\r\n                        <div className={\"basis-1/2 px-4\"} key={tower[0]}>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <img\r\n                              src={\r\n                                towerImages[\r\n                                  tower[1].tower as keyof typeof towerImages\r\n                                ]\r\n                              }\r\n                              className=\"w-[28px]\"\r\n                            />\r\n\r\n                            <span className=\"label-text grow\">\r\n                              {formatGameEntityName(tower[1].tower as string)}\r\n                            </span>\r\n                            <button\r\n                              className=\"btn outline outline-1\"\r\n                              onClick={() => addIncludedHero(tower[1].tower)}\r\n                              disabled={excludedHeroes.includes(tower[1].tower)}\r\n                            >\r\n                              +\r\n                            </button>\r\n                            <button\r\n                              className=\"btn outline outline-1 outline-error text-error\"\r\n                              onClick={() => addExcludedHero(tower[1].tower)}\r\n                              disabled={includedHeroes.includes(tower[1].tower)}\r\n                            >\r\n                              x\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    : null}\r\n                </div>\r\n              </div>\r\n              <div className=\"modal-action\">\r\n                <form method=\"dialog\">\r\n                  {/* if there is a button in form, it will close the modal */}\r\n                  <button className=\"btn outline outline-1 outline-error text-error\">\r\n                    Close\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <form method=\"dialog\" className=\"modal-backdrop\">\r\n              <button>close</button>\r\n            </form>\r\n          </dialog>\r\n          {/* Open the modal using document.getElementById('ID').showModal() method */}\r\n          <button\r\n            className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n            onClick={() =>\r\n              (\r\n                document.getElementById(\"tower-modal\") as HTMLFormElement\r\n              ).showModal()\r\n            }\r\n          >\r\n            Towers\r\n          </button>\r\n          <dialog id=\"tower-modal\" className=\"modal\">\r\n            <div className=\"modal-box max-w-3xl\">\r\n              <h3 className=\"font-bold text-lg text-primary\">Tower Filters</h3>\r\n              <p className=\"py-4\">\r\n                Add any towers and paths you want the calculation to{\" \"}\r\n                <u>ALWAYS</u> consider.\r\n              </p>\r\n              <div className=\"\">\r\n                <div className=\"flex w-full gap-4\">\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                    <p className=\"font-semibold\">Included Towers</p>\r\n                    <div className=\"indicator items-center w-full px-12 py-4 gap-6 flex-wrap\">\r\n                      {includedTowers.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeIncludedTower(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[tower as keyof typeof towerImages]\r\n                            }\r\n                            key={`${tower}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                      {towerFilters.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeTowerFilter(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[\r\n                                tower.name as keyof typeof towerImages\r\n                              ]\r\n                            }\r\n                            indicator={tower.path}\r\n                            key={`${tower.path} ${tower.name}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                    <p className=\"font-semibold\">Excluded Towers</p>\r\n                    <div className=\"indicator items-center w-full px-12 py-4 gap-6 flex-wrap\">\r\n                      {excludedTowers.map((tower, index) => (\r\n                        <a\r\n                          className=\"btn hover:outline hover:outline-error hover:cursor-pointer\"\r\n                          onClick={() => removeExcludedTower(index)}\r\n                        >\r\n                          <TowerDisplay\r\n                            name={`Delete`}\r\n                            image={\r\n                              towerImages[tower as keyof typeof towerImages]\r\n                            }\r\n                            key={`${tower}`}\r\n                          />\r\n                        </a>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"gap-y-2 flex flex-wrap my-4 w-full\">\r\n                  {selectedTile\r\n                    ? Object.entries(\r\n                        ctData[\r\n                          selectedTile\r\n                        ].GameData.dcModel.towers._items.filter(\r\n                          (x) => !x.isHero && x.max !== 0\r\n                        )\r\n                      ).map((tower) => (\r\n                        <div className={\"basis-1/2 px-4\"} key={tower[0]}>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <img\r\n                              src={\r\n                                towerImages[\r\n                                  tower[1].tower as keyof typeof towerImages\r\n                                ]\r\n                              }\r\n                              className=\"w-[28px]\"\r\n                            />\r\n\r\n                            <span className=\"label-text grow\">\r\n                              {formatGameEntityName(tower[1].tower as string)}\r\n                            </span>\r\n                            <label className=\"input input-bordered flex max-w-16\">\r\n                              <input\r\n                                className=\"font-normal w-full\"\r\n                                placeholder=\"000\"\r\n                                maxLength={3}\r\n                                id={`${tower[1].tower}-path`}\r\n                              />\r\n                            </label>\r\n                            <button\r\n                              className=\"btn outline outline-1\"\r\n                              onClick={() => addTowerFilter(tower[1].tower)}\r\n                              disabled={excludedTowers.includes(tower[1].tower)}\r\n                            >\r\n                              +\r\n                            </button>\r\n                            <button\r\n                              className=\"btn outline outline-1 outline-error text-error\"\r\n                              onClick={() => addExcludedTower(tower[1].tower)}\r\n                              disabled={\r\n                                includedTowers.includes(tower[1].tower) ||\r\n                                towerFilters.some(\r\n                                  (x) => x.name === tower[1].tower\r\n                                )\r\n                              }\r\n                            >\r\n                              x\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      ))\r\n                    : null}\r\n                </div>\r\n              </div>\r\n              <div className=\"modal-action\">\r\n                <form method=\"dialog\">\r\n                  {/* if there is a button in form, it will close the modal */}\r\n                  <button className=\"btn outline outline-1 outline-error text-error\">\r\n                    Close\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <form method=\"dialog\" className=\"modal-backdrop\">\r\n              <button>close</button>\r\n            </form>\r\n          </dialog>\r\n          <details className=\"dropdown\">\r\n            <summary\r\n              className={\"btn w-24\" + (!selectedTile ? \" btn-disabled\" : \"\")}\r\n            >\r\n              Filters\r\n            </summary>\r\n            <ul className=\"py-4 shadow-xl menu dropdown-content z-[51] bg-base-100 rounded-box w-64 outline outline-white/25 outline-1\">\r\n              <li className=\"pointer-events-none\">\r\n                <p className=\"justify-center font-semibold text-lg text-primary\">\r\n                  Hero\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setShowHeroSolutions((old) => !old);\r\n                  }}\r\n                >\r\n                  <p className=\"font-medium text-sm\">\r\n                    Only show solutions with heroes.\r\n                  </p>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={showHeroSolutions}\r\n                    className=\"checkbox checkbox-sm\"\r\n                    readOnly\r\n                  />\r\n                </a>\r\n              </li>\r\n              <li className=\"pointer-events-none\">\r\n                <p className=\"justify-center font-semibold text-lg text-primary\">\r\n                  Tower\r\n                </p>\r\n              </li>\r\n              <div className=\"flex flex-col gap-2 items-center justify-center mx-4\">\r\n                <div className=\"flex gap-2 items-center justify-center mx-4 w-full\">\r\n                  <p className=\"font-medium whitespace-nowrap\">Max Towers:</p>\r\n                  <input\r\n                    type=\"range\"\r\n                    min={1}\r\n                    max={10}\r\n                    value={towerLimit}\r\n                    onChange={handleLimitChange}\r\n                    className=\"range range-xs\"\r\n                  />\r\n                  <p className=\"text-lg font-medium\">{towerLimit}</p>\r\n                </div>\r\n                <i className=\"text-xs text-accent\">Requires recalculation</i>\r\n              </div>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setLimitExclusive((old) => !old);\r\n                  }}\r\n                >\r\n                  <p className=\"font-medium text-sm\">\r\n                    Show solutions with exactly {towerLimit} towers.{\" \"}\r\n                    <i className=\"text-xs text-accent\">\r\n                      Requires recalculation\r\n                    </i>\r\n                  </p>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={limitExclusive}\r\n                    className=\"checkbox checkbox-sm\"\r\n                    readOnly\r\n                  />\r\n                </a>\r\n              </li>\r\n              <li className=\"pointer-events-none\">\r\n                <p className=\"justify-center font-semibold text-lg text-primary\">\r\n                  Miscellaneous\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <a\r\n                  onClick={() => {\r\n                    setHideUnaffordable((old) => !old);\r\n                  }}\r\n                >\r\n                  <p className=\"font-medium text-sm\">\r\n                    Hide initially unaffordable solutions.{\" \"}\r\n                    <i className=\"text-xs text-accent\">\r\n                      Requires recalculation\r\n                    </i>\r\n                  </p>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={hideUnaffordable}\r\n                    className=\"checkbox checkbox-sm\"\r\n                    readOnly\r\n                  />\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </details>\r\n          <button\r\n            className={\r\n              \"btn min-w-24 outline outline-1\" +\r\n              (calculating\r\n                ? \" outline-warning text-warning\"\r\n                : \" outline-success text-success\")\r\n            }\r\n            disabled={selectedTile === \"\"}\r\n            onClick={() => {\r\n              setCalculating(true);\r\n              handleCalculateClick();\r\n            }}\r\n          >\r\n            {calculating ? \"Loading...\" : \"Calculate\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {!loading ? (\r\n        <div className=\"flex gap-2 py-5 w-full\">\r\n          <TileSelector\r\n            data={ctData}\r\n            loading={loading}\r\n            selectedTile={selectedTile}\r\n            gameType=\"least_cash\"\r\n            changeTile={changeTile}\r\n          />\r\n          <div className=\"divider divider-horizontal\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"10.605\"\r\n              height=\"15.555\"\r\n              className=\"fill-neutral-content overflow-visible\"\r\n            >\r\n              <path d=\"m2.828 15.555 7.777-7.779L2.828 0 0 2.828l4.949 4.948L0 12.727l2.828 2.828z\" />\r\n            </svg>\r\n          </div>\r\n          <RelicList\r\n            data={ctData}\r\n            eventRelics={eventRelics}\r\n            loading={loading}\r\n            relics={selectedRelics}\r\n            handleRelicFilterClick={handleRelicFilterClick}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n      <div className=\"divider\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"10.605\"\r\n          height=\"15.555\"\r\n          className=\"fill-neutral-content overflow-visible rotate-90\"\r\n        >\r\n          <path d=\"m2.828 15.555 7.777-7.779L2.828 0 0 2.828l4.949 4.948L0 12.727l2.828 2.828z\" />\r\n        </svg>\r\n      </div>\r\n      <SolutionManager\r\n        solutions={solutions.filter(\r\n          (solution) =>\r\n            solution.some(\r\n              (path) =>\r\n                (includedTowers.length === 0 ||\r\n                  includedTowers.includes(path.name)) &&\r\n                (towerFilters.length === 0 ||\r\n                  towerFilters.some(\r\n                    (x) => x.name === path.name && x.path === path.path\r\n                  ))\r\n            ) &&\r\n            solution.every(\r\n              (path) =>\r\n                !excludedTowers.includes(path.name) &&\r\n                !excludedHeroes.includes(path.name)\r\n            ) &&\r\n            solution.some(\r\n              (path) =>\r\n                includedHeroes.length === 0 ||\r\n                includedHeroes.includes(path.name)\r\n            ) &&\r\n            (!showHeroSolutions || solution.some((path) => path.isHero))\r\n        )}\r\n        solutionTile={solutionTile}\r\n        solutionNum={solutionCtNum}\r\n        disableClear={selectedTile === \"\"}\r\n        clearSolutions={() => {\r\n          setSolutionTile(\"\");\r\n          setSolutions([]);\r\n        }}\r\n      />\r\n      <div className=\"divider font-display\">Notes</div>\r\n      <p className=\"text-center\">\r\n        This calculator is experimental! It's not guaranteed to work and things\r\n        could be broken.\r\n        <br />\r\n        Thanks Josh Cheek (Spike Factory) for the base algorithm. Originally\r\n        written in Ruby, then converted to TypeScript by me.\r\n        <br />\r\n        It's possible that the site crashes while doing calculations. All I can\r\n        say right now is be nice with your parameters.\r\n        <br />\r\n        There is a hard cap of 2000 solutions.\r\n        <br />\r\n      </p>\r\n      <div className=\"divider font-display\">Nerdy Stuff</div>\r\n      <p className=\"text-center\"></p>\r\n      <p className=\"font-semibold\">The algorithm works as follows:</p>\r\n      <ul>\r\n        <li>\r\n          - Build data structure (an array) with all possible upgrade paths\r\n          (000, 203, 051, etc.)\r\n        </li>\r\n        <li>\r\n          - Apply prices of available towers to possible upgrade paths, removing\r\n          ones greater than the target score (user input)\r\n        </li>\r\n        <li>- Apply any relic modifers and tower count restrictions</li>\r\n        <li>\r\n          - Generate a ton of combinations (the computation heavy portion)\r\n        </li>\r\n        <li>\r\n          - Display solutions; hopefully ones with 1 or more high power towers\r\n          (tiers 4-5; if applicable)\r\n        </li>\r\n      </ul>\r\n      <div className=\"divider font-display\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeastCashCalculator;\r\n","import LeastCashCalculator from \"./LeastCashCalculator\";\r\nexport default LeastCashCalculator;\r\n","import { useEffect, useState } from \"react\";\r\nimport { HeroCostsData } from \"types/costs\";\r\n\r\nexport const useHeroCostData = () => {\r\n  const url =\r\n    \"https://raw.githubusercontent.com/hemisemidemipresent/cyberquincy/master/jsons/heroes.json\";\r\n  const [data, setData] = useState<HeroCostsData>({} as HeroCostsData);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        Object.entries(jsonData).forEach((obj) => {\r\n          jsonData[\r\n            obj[0]\r\n              .replace(\"brickell\", \"AdmiralBrickell\")\r\n              .replace(\"churchill\", \"CaptainChurchill\")\r\n              .replace(\"gwen\", \"Gwendolin\")\r\n              .replace(\"jones\", \"StrikerJones\")\r\n              .replace(\"obyn\", \"ObynGreenfoot\")\r\n              .replace(\"pat\", \"PatFusty\")\r\n              .replace(/(_\\w)/g, (match) => match[1].toUpperCase()) // Capitalize letters after underscores\r\n              .replace(/^./, (match) => match.toUpperCase())\r\n          ] = jsonData[obj[0]];\r\n          delete jsonData[obj[0]];\r\n        });\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return { data, loading };\r\n};\r\n"],"names":["_ref","_tile$GameData$dcMode","tileCode","tile","_jsxs","className","mapImages","GameData","selectedMap","children","_jsx","src","gameTypeImages","subGameType","formatGameEntityName","convertGameTypeToString","selectedDifficulty","concat","dcModel","startRules","cash","toLocaleString","round","endRound","disableSelling","noSellingImage","_Fragment","disableMK","noMkImage","TileType","RelicType","relicImages","tileImages","towers","_items","filter","x","isHero","max","length","tower","map","hero","TowerDisplay","name","image","towerImages","indicator","data","loading","selectedTile","gameType","changeTile","tileFilter","setTileFilter","useState","filteredTileCodes","setFilteredTileCodes","handleFilter","e","target","value","useEffect","filtered","Object","keys","sort","reduce","key","gameTypeToSubGameTypeVal","includes","at","type","checked","onChange","bannerImage","relicImage","blankImage","id","defaultValue","disabled","entries","onClick","handleRelicSelection","document","getElementById","TileDisplay","boxOfMonkey","boxOfMonkeyImage","number","useCtData","eventId","url","setData","setLoading","useMemo","async","response","fetch","ok","Error","jsonData","json","console","log","error","fetchData","useCtEventRelics","description","eventRelics","relics","handleRelicFilterClick","relicList","setRelicList","handleCheck","push","costInfluencingRelics","relic","difficultyMultiplers","Easy","Medium","Hard","solution","a","b","cost","i","path","solutions","solutionTile","solutionNum","disableClear","clearSolutions","index","SolutionRow","LeastCashCalculator","eventNum","setEventNum","ctIds","ctData","ctLoading","eventRelicsLoading","costData","costLoading","useTowerCostData","forEach","obj","replace","match","toUpperCase","heroCostData","heroCostLoading","useHeroCostData","setSelectedTile","selectedRelics","setSelectedRelics","targetScore","setTargetScore","towerLimit","setTowerLimit","limitExclusive","setLimitExclusive","hideUnaffordable","setHideUnaffordable","showHeroSolutions","setShowHeroSolutions","setSolutions","setSolutionTile","solutionCtNum","setSolutionCtNum","calculating","setCalculating","includedTowers","setIncludedTowers","excludedTowers","setExcludedTowers","includedHeroes","setIncludedHeroes","excludedHeroes","setExcludedHeroes","towerFilters","setTowerFilters","setTimeout","calculateReverseCash","upgradePaths","tileTowers","tileHeroes","monkeyTycoonMod","marchingBootsMod","startingStashMod","relicMod","priceMults","towerType","costMultipiler","t","m","validPaths","self","indexOf","ps","p","purchasables","flatMap","prices","find","towerTypes","top","mid","bot","initialCost","roundEven5","Array","from","_","total","j","upgrades","top_path","middle_path","bottom_path","join","newSolutions","startTowers","pathWithCost","startPrice","findTowers","targetPrice","potentialTowers","perTowerLimits","tileTower","remaining","tileHero","block","_costData$x$name$cost","_costData$x$name","_heroCostData$x$name","solutionsFound","_ref2","remainingTowers","towerLimitIndex","findIndex","leastCashImage","inputMode","placeholder","test","Number","options","selectedIndex","showModal","newIncludedHeroes","splice","removeIncludedHero","newExcludedHeroes","removeExcludedHero","addIncludedHero","addExcludedHero","method","newIncludedTowers","removeIncludedTower","newTowerFilters","removeTowerFilter","newExcludedTowers","removeExcludedTower","maxLength","pathNums","split","validPath","addTowerFilter","addExcludedTower","some","old","readOnly","min","handleCalculateClick","Loading","TileSelector","xmlns","width","height","d","RelicList","newRelics","SolutionManager","every"],"sourceRoot":""}