{"version":3,"file":"static/js/914.2f38191c.chunk.js","mappings":"iJAEA,MA+BA,EA/BqBA,IAQd,IARe,cACpBC,EAAa,YACbC,EAAW,WACXC,GAKDH,EACC,OACEI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,SACxBH,EAAWI,KAAKC,IACfJ,EAAAA,EAAAA,KAAA,KACEC,UACE,kIACCG,EAAUC,IAAIC,SAASR,GACpB,kDACA,iBAENS,QAASA,KACPH,EAAUI,iBAAiB,EAC3BN,SAGDE,EAAUK,MAFNL,EAAUK,SAKf,C,gDC1BH,MAAMC,EAAqBC,IAChC,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAmB,CAAC,GAEtCC,EAA+B,CACnC,CAAEN,KAAM,UAAWO,KAAM,2BAA4BC,YAAY,GACjE,CACER,KAAM,0BACNO,KAAM,8BACNC,YAAY,GAEd,CAAER,KAAM,aAAcO,KAAM,uBAAwBC,YAAY,GAChE,CAAER,KAAM,OAAQO,KAAM,iBAAkBC,YAAY,GACpD,CAAER,KAAM,SAAUO,KAAM,mBAAoBC,YAAY,GACxD,CAAER,KAAM,aAAcO,KAAM,uBAAwBC,YAAY,GAChE,CAAER,KAAM,SAAUO,KAAM,mBAAoBC,YAAY,GACxD,CACER,KAAM,8BACNO,KAAM,2BACNC,YAAY,KAGTC,EAASC,IAAcL,EAAAA,EAAAA,WAAS,GA+BvC,OA7BAM,EAAAA,EAAAA,YAAU,KACUC,WAChB,IACE,MAAMC,QAAiBC,MAAMR,EAAcJ,GAAKK,MAChD,IAAKM,EAASE,GACZ,MAAM,IAAIC,MAAM,wBAElB,MAAMC,QAAiBJ,EAASK,OAChCD,EAASE,OAASF,EAASE,OAAOC,QAC/BC,GAA6B,IAAlBA,EAAEC,cAEhB,MAAMC,EAAwB,GAC9B,IAAK,IAAIC,KAASP,EAASE,OACzB,IAAK,IAAIM,KAASD,EAAME,YACjBH,EAAa1B,SAAS4B,EAAME,QAC/BJ,EAAaK,KAAKH,EAAME,OAI9BvB,EAAQa,EACV,CAAE,MAAOY,GACPC,QAAQC,IAAIF,EACd,CAAC,QACCnB,GAAW,EACb,GAEFsB,EAAW,GACV,CAAC9B,IAEG,CAAEC,OAAMG,gBAAeG,UAAS,C,6GC9CzC,MA0EA,EA1EkBtB,IAA8C,IAA7C,MAAE8C,EAAQ,EAAC,SAAEC,GAA0B/C,EACxD,MAAOgD,EAAMC,IAAW/B,EAAAA,EAAAA,WAASgC,EAAAA,EAAAA,IAAsBJ,KAEvDtB,EAAAA,EAAAA,YAAU,KACRyB,GAAQC,EAAAA,EAAAA,IAAsBJ,GAAO,GACpC,CAACA,IAuDJ,OACEK,EAAAA,EAAAA,MAAA,SAAO9C,UAAU,+CAA8CC,SAAA,EAC7DF,EAAAA,EAAAA,KAAA,OAAKgD,IAAKC,EAAWhD,UAAU,cAC/BD,EAAAA,EAAAA,KAAA,SACEkD,KAAK,OACLR,MAAOE,EACPD,SA3DgBQ,IACpBN,EAAQM,EAAEC,OAAOV,OACjB,MAAOW,EAAKC,GAAQH,EAAEC,OAAOV,MAAMa,MAAM,KACzC,IAAKD,EACH,OAEF,MAAOE,EAAKC,GAAMH,EAAKC,MAAM,KAC7B,GAAIC,EAAIE,OAAS,EACf,OAEF,IAAKD,EACH,OAGFlB,QAAQC,IAAIW,EAAEC,OAAOV,OAErB,MAAMiB,EAAeF,EACjBG,SAASH,EAAI,KAAqB,IAAdA,EAAGC,OAAe,IAAoB,IAAdD,EAAGC,OAAe,GAAK,GACnE,EACEG,EAAUL,EAAMI,SAASJ,EAAK,KAAsB,IAAfA,EAAIE,OAAe,GAAK,GAAK,EAElEI,EAAkD,GAAxCC,KAAKC,KAAML,EAAe,IAAQ,IAE5CM,GACK,OAARZ,EAAe,EAAoB,GAAhBO,SAASP,GAAY,KAAkB,IAAVQ,EAAiBC,EAEpEvB,QAAQC,IAAIyB,GACZtB,EAASsB,EAAQ,EAiCbC,YAAY,WACZjE,UAAU,uBAEN,E,wBCjEZ,MCbA,EDaqCkE,KACnC,MAAOC,EAAYC,IAAiBvD,EAAAA,EAAAA,UAAS,IACtCwD,EAAUC,IAAezD,EAAAA,EAAAA,UAAS,IAClC0D,EAAaC,IAAkB3D,EAAAA,EAAAA,UAAS,IAE7CF,KAAM8D,EACN3D,cAAe4D,EACfzD,QAAS0D,IACPlE,EAAAA,EAAAA,GAAkB8D,IACfK,EAAcC,IAAmBhE,EAAAA,EAAAA,UAA2B,UAC5DiE,EAASC,IAAclE,EAAAA,EAAAA,UAAS,IAChCmE,EAAQC,IAAapE,EAAAA,EAAAA,UAAS,GAE/BqE,EAAgB,IAEhBC,EAAqBjC,IACzB,MAAMT,EAAgBkB,SAAST,EAAEC,OAAOV,MAAO,IAE3CA,EAAQgC,EAAU9C,OAAO8B,OAC3BW,EAAcK,EAAU9C,OAAO8B,QAE/BW,EAAc3B,GAIZA,GAAS4B,GACXC,EAAY7B,EACd,EAGI2C,EAAmBlC,IACvB,MAAMT,EAAgBkB,SAAST,EAAEC,OAAOV,MAAO,IAE3CA,EAAQgC,EAAU9C,OAAO8B,OAC3Ba,EAAYG,EAAU9C,OAAO8B,QAE7Ba,EAAY7B,GAIVA,GAAS0B,GACXC,EAAc3B,EAChB,EAGI4C,EAAgBA,CAACC,EAAeC,EAAaC,KACjD,MAAMC,EAAeC,EAAsBJ,EAAOC,GAMlD,OAL6BI,EAAAA,EAAAA,IAAwBF,GAClCP,GAAiBO,EAAa3D,YAAcwD,GAEXE,CAEtC,EAGVI,EAAWA,CAACjD,EAAckD,IAEvBlD,EAAO,IAAO,GAIjB+C,EAAwBA,CAACJ,EAAeC,IACrCd,EAAU9C,OACdC,QAAQC,GAAMA,EAAEC,aAAewD,GAASzD,EAAEC,aAAeyD,IACzDO,QAAO,CAACL,EAAczD,KACrB,MAAM+D,GACJC,EAAAA,EAAAA,IAAmBhE,IAClBA,EAAMF,YAAcwD,GAASJ,EAIhC,OAFEc,EAAAA,EAAAA,IAAmBP,IAClBA,EAAa3D,YAAcwD,GAASJ,EACda,EAAWN,EAAezD,CAAK,IAgE9D,OAPAb,EAAAA,EAAAA,YAAU,KACHwD,GAEHL,EAAYG,EAAU9C,OAAO8B,OAC/B,GACC,CAACkB,KAGF7B,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,yDAAwDC,SAAA,EACrEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,oEAAmEC,SAAC,yBAIhF0E,GACC5E,EAAAA,EAAAA,KAACkG,EAAAA,EAAO,KAERnD,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,qEAAoEC,SAAA,EACjF6C,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,gCAA+BC,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,QAAOC,SAAC,gBACrBF,EAAAA,EAAAA,KAAA,UACEmG,GAAG,cACHlG,UAAU,8CACV0C,SAAWQ,IACTsB,EAAetB,EAAEC,OAAOgD,QAAQC,eAChC9D,QAAQC,IAAIgC,EAAY,EAE1B9B,MAAOiC,EAAUH,GAAa/D,KAAKP,SAElCyE,EAAUxE,KAAI,CAAC2B,EAAGwE,KACjBtG,EAAAA,EAAAA,KAAA,UAAgBuG,UAAWzE,EAAEb,WAAWf,SACrC4B,EAAErB,MADQ6F,WAOnBvD,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,sCAAqCC,SAAA,EAClDF,EAAAA,EAAAA,KAAA,SACEkD,KAAK,QACLG,IAAK,EACLmD,IAAK9B,EAAU9C,OAAO8B,OACtBhB,MAAO0B,EACPzB,SAAUyC,EACVnF,UAAU,WAEZD,EAAAA,EAAAA,KAAA,SAAOC,UAAU,+CAA8CC,UAC7DF,EAAAA,EAAAA,KAAA,SACEC,UAAU,+BACViD,KAAK,OACLuD,UAAU,UACVvC,YAAY,QACZxB,MAAO0B,EACPzB,SAAUyC,UAIhBrC,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,iCAAgCC,SAAA,EAC7CF,EAAAA,EAAAA,KAAA,SACEkD,KAAK,QACLG,IAAK,EACLmD,IAAK9B,EAAU9C,OAAO8B,OACtBhB,MAAO4B,EACP3B,SAAU0C,EACVpF,UAAU,WAEZD,EAAAA,EAAAA,KAAA,SAAOC,UAAU,+CAA8CC,UAC7DF,EAAAA,EAAAA,KAAA,SACEC,UAAU,+BACViD,KAAK,OACLuD,UAAU,UACVvC,YAAY,MACZxB,MAAO4B,EACP3B,SAAU0C,UAIhBrF,EAAAA,EAAAA,KAAC0G,EAAAA,EAAY,CACX5G,YAAa+E,EACbhF,cArHS,SAAjBgF,EAA0B,YAAc,YAsHhC9E,WAAY,CACV,CACEM,IAAK,CAAC,SACNI,KAAM,YACND,gBAAiBA,KACfsE,EAAgB,QAAQ,GAG5B,CACEzE,IAAK,CAAC,QACNI,KAAM,YACND,gBAAiBA,KACfsE,EAAgB,OAAO,MAKb,SAAjBD,GACC9B,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,gCAA+BC,SAAA,EAC5CF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,+BACHF,EAAAA,EAAAA,KAAC2G,EAAS,CAACjE,MAAOuC,EAAQtC,SAAUuC,QAGtCnC,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,gCAA+BC,SAAA,EAC5C6C,EAAAA,EAAAA,MAAA,KAAA7C,SAAA,CAAG,kBACe,KAChBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAAEkE,IAAkB,YAAU,KACjEpE,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAChCyF,EAAsBvB,EAAYE,GAAUvC,cACvC,IAAI,UAGd/B,EAAAA,EAAAA,KAAC2G,EAAS,CAACjE,MAAOqC,EAASpC,SAAUqC,QAGzChF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0EAAyEC,SACpE,SAAjB2E,GACC7E,EAAAA,EAAAA,KAAA4G,EAAAA,SAAA,CAAA1G,SACG+E,EACDY,EACEP,EAAclB,EAAYE,EAAUS,KAGpC/E,EAAAA,EAAAA,KAAA,KAAAE,SAAG,mBAEH6C,EAAAA,EAAAA,MAAA6D,EAAAA,SAAA,CAAA1G,SAAA,EACE6C,EAAAA,EAAAA,MAAA,KAAG9C,UAAU,cAAaC,SAAA,CAAC,8BACG,KAC5BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAAEkE,IAAkB,YACjD,KACNpE,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAE/ByF,EAAsBvB,EAAYE,GAC/BvC,cAEC,IAAI,cAGdgB,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,iDAAgDC,SAAA,EAC7DF,EAAAA,EAAAA,KAAA,OAAKgD,IAAKC,EAAWhD,UAAU,cAC9B6C,EAAAA,EAAAA,IAhMK+D,EACxBtB,EACAC,EACAsB,KAEA,MAAMpB,EAAeC,EAAsBJ,EAAOC,GAG5CuB,EAAUD,IAFalB,EAAAA,EAAAA,IAAwBF,GAClCP,GAAiBO,EAAa3D,YAAcwD,GACH,IAAO,IAEnE,OAAOwB,EAAU,EAAI,EAAIA,CAAO,EAuLZF,CAAkBzC,EAAYE,EAAUW,KAE1CjF,EAAAA,EAAAA,KAAA,OAAKgD,IAAKC,EAAWhD,UAAU,iBAEjC8C,EAAAA,EAAAA,MAAA,KAAA7C,SAAA,CAAG,kBACe,KAChBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,UAChC4C,EAAAA,EAAAA,IAAsBmC,KAClB,yCAOflC,EAAAA,EAAAA,MAAA6D,EAAAA,SAAA,CAAA1G,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,cAAaC,SAAC,kBAC3B6C,EAAAA,EAAAA,MAAA,OAAK9C,UAAU,iDAAgDC,SAAA,EAC7DF,EAAAA,EAAAA,KAAA,OAAKgD,IAAKC,EAAWhD,UAAU,cAC9B6C,EAAAA,EAAAA,IACC+C,EACEP,EAAclB,EAAYE,EAAUS,MAIxC/E,EAAAA,EAAAA,KAAA,OAAKgD,IAAKC,EAAWhD,UAAU,iBAEjC8C,EAAAA,EAAAA,MAAA,KAAA7C,SAAA,CAAG,mCACgC,KACjCF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAChCyF,EAAsBvB,EAAYE,GAAUvC,cACvC,IAAI,KAEZ/B,EAAAA,EAAAA,KAAA,QAAMC,UAAU,sBAAqBC,UAClC+F,EAAAA,EAAAA,IACCN,EAAsBvB,EAAYE,IAChC,MACE,IAAI,qBAMpBtE,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yBAAwBC,SA5NnB8G,KACzB,MAAMC,EAAevC,EAAU9C,OAC5BsF,MAAMvB,EAAsBvB,EAAYE,GAAUvC,YAAauC,GAC/D6C,MAAK,CAACrF,EAAGsF,KAAMnB,EAAAA,EAAAA,IAAmBmB,IAAKnB,EAAAA,EAAAA,IAAmBnE,KAE7DS,QAAQC,IAAIyE,GAEZ,IAAII,EAAY1B,EAAsBvB,EAAYE,GAElD,OAAO2C,EAAalB,QAAO,CAACuB,EAAKrF,KAC/B,GAAIA,EAAMF,YAAcsF,EAAUtF,YAChC,OAAOuF,EAGT,MAAMC,EAAWF,EACXG,EAASvF,EACTW,EACJoE,IACCpB,EAAAA,EAAAA,IAAwB4B,IACtBA,EAAOzF,YAAcwF,EAASxF,YAAc,GAAKoD,GActD,OAZA5C,QAAQC,IAAI,CACV+C,MAAOgC,EAASxF,YAChByD,IAAKgC,EAAOzF,YACZa,SAGFyE,EAAYG,EAERA,EAAOzF,YAAcwF,EAASxF,aAChCuF,EAAIjF,KAAK,CAAE+B,WAAYmD,EAAUjD,SAAUkD,EAAQ5E,KAAMA,IAGpD0E,CAAG,GACT,GAAmF,EA2L7EG,CACkB,UAAjB5C,EACIS,EAAclB,EAAYE,EAAUS,GACpCE,GACJ9E,KAAI,CAAC2B,EAAGwE,KACRvD,EAAAA,EAAAA,MAAA,MAAA7C,SAAA,CAAY,uBACW,KACrBF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAChC4B,EAAEsC,WAAWrC,cACR,IAAI,WACH,KACT/B,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,SAChC4B,EAAEwC,SAASvC,cACN,IAAI,SACL,KACP/B,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,UAChC4C,EAAAA,EAAAA,IAAsBhB,EAAEc,UAXpB0D,WAmBjBtG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cACX,C,qDEnQH,MAAMyH,EAAsB,CACjC,MACA,UACA,YACA,gBACA,OACA,WACA,aACA,iBACA,QACA,YACA,cACA,kBACA,SACA,aACA,eACA,mBACA,OACA,WACA,aACA,iBACA,QACA,YACA,cACA,kBACA,QACA,YACA,cACA,kBACA,SACA,aACA,eACA,mBACA,QACA,YACA,cACA,kBACA,OACA,WACA,gBACA,oBACA,aACA,iBACA,sBACA,0BACA,UACA,cACA,gBACA,oBACA,UACA,cACA,mBACA,uBACA,gBACA,oBACA,yBACA,6BACA,OACA,gBACA,MACA,eACA,OACA,gBACA,UACA,mBACA,MACA,gBAGWzB,EAAsBhE,IACjC,MAAM0F,EAAc1F,EAAME,YAAY4D,QAAO,CAAC6B,EAAQ1F,KACpD,MAAM2F,EAAU3F,EAAMqD,MAAQrD,EAAM8D,SACpC,OAAOjC,KAAKyC,IAAIoB,EAAQC,EAAQ,GAC/B,GAEH,OAAuC,GAAhC9D,KAAK9B,MAAoB,IAAd0F,EAAuB,EAG9B/B,EAA2B3D,IACtC,MAAM0F,EAAc1F,EAAME,YAAY4D,QAAO,CAAC6B,EAAQ1F,KACpD,MAAM2F,EAAU3F,EAAMqD,MAAQrD,EAAM8D,SACpC,OAAOjC,KAAKyC,IAAIoB,EAAQC,EAAQ,GAC/B,GAEH,OAAQ9D,KAAKC,KAAmB,GAAd2D,GAAoB,GAAM,GAAI,C","sources":["components/SelectionRow/SelectionRow.tsx","hooks/useLocalRoundData.tsx","components/TimeInput/TimeInput.tsx","pages/RaceTimeCalculator/RaceTimeCalculator.tsx","pages/RaceTimeCalculator/index.tsx","types/roundSet.ts"],"sourcesContent":["import { EventType } from \"types/events\";\r\n\r\nconst SelectionRow = ({\r\n  selectionName,\r\n  selectionId,\r\n  selections,\r\n}: {\r\n  selectionName: string;\r\n  selectionId: string;\r\n  selections: { ids: string[]; name: string; onClickFunction: () => void }[];\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      {selections.map((selection) => (\r\n        <a\r\n          className={\r\n            \"py-2 px-2 transition ease-in-out border-b bg-black hover:bg-opacity-70 hover:cursor-pointer hover:text-accent hover:border-b-2\" +\r\n            (selection.ids.includes(selectionId)\r\n              ? \" bg-black bg-opacity-30 text-primary border-b-2\"\r\n              : \" bg-opacity-0\")\r\n          }\r\n          onClick={() => {\r\n            selection.onClickFunction();\r\n          }}\r\n          key={selection.name}\r\n        >\r\n          {selection.name}\r\n        </a>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectionRow;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Bloon, RoundSet, RoundSetDef } from \"types/roundSet\";\r\n\r\nexport const useLocalRoundData = (pos: number) => {\r\n  const [data, setData] = useState<RoundSet>({} as RoundSet);\r\n\r\n  const roundSetsDefs: RoundSetDef[] = [\r\n    { name: \"Regular\", path: \"data/OriginalRounds.json\", isComplete: true },\r\n    {\r\n      name: \"Alternate Bloons Rounds\",\r\n      path: \"data/alternateRound140.json\",\r\n      isComplete: true,\r\n    },\r\n    { name: \"Bloonarius\", path: \"data/bloonarius.json\", isComplete: true },\r\n    { name: \"Lych\", path: \"data/lych.json\", isComplete: true },\r\n    { name: \"Vortex\", path: \"data/vortex.json\", isComplete: true },\r\n    { name: \"Dreadbloon\", path: \"data/dreadbloon.json\", isComplete: true },\r\n    { name: \"Phayze\", path: \"data/phayze.json\", isComplete: true },\r\n    {\r\n      name: \"Race #291: Density Insanity\",\r\n      path: \"data/raceExperiment.json\",\r\n      isComplete: true,\r\n    },\r\n  ];\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(roundSetsDefs[pos].path);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        jsonData.rounds = jsonData.rounds.filter(\r\n          (x: any) => x.roundNumber !== 0\r\n        );\r\n        const uniqueBloons: Bloon[] = [];\r\n        for (let round of jsonData.rounds) {\r\n          for (let group of round.bloonGroups) {\r\n            if (!uniqueBloons.includes(group.bloon)) {\r\n              uniqueBloons.push(group.bloon);\r\n            }\r\n          }\r\n        }\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [pos]);\r\n\r\n  return { data, roundSetsDefs, loading };\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport raceImage from \"images/game_types/race.webp\";\r\nimport { convertMsToTimeFormat } from \"util/converters\";\r\n\r\ninterface TimeInputProps {\r\n  value: number;\r\n  onChange: (milliseconds: number) => void;\r\n}\r\n\r\nconst TimeInput = ({ value = 0, onChange }: TimeInputProps) => {\r\n  const [time, setTime] = useState(convertMsToTimeFormat(value));\r\n\r\n  useEffect(() => {\r\n    setTime(convertMsToTimeFormat(value)); // Update time when prop changes\r\n  }, [value]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTime(e.target.value);\r\n    const [min, left] = e.target.value.split(\":\");\r\n    if (!left) {\r\n      return;\r\n    }\r\n    const [sec, ms] = left.split(\".\");\r\n    if (sec.length > 2) {\r\n      return;\r\n    }\r\n    if (!ms) {\r\n      return;\r\n    }\r\n\r\n    console.log(e.target.value);\r\n\r\n    const milliseconds = ms\r\n      ? parseInt(ms, 10) * (ms.length === 1 ? 100 : ms.length === 2 ? 10 : 1)\r\n      : 0;\r\n    const seconds = sec ? parseInt(sec, 10) * (sec.length === 1 ? 10 : 1) : 0;\r\n\r\n    const rounded = Math.ceil((milliseconds % 1000) / 10) * 10;\r\n\r\n    const totalMs =\r\n      (min === null ? 0 : parseInt(min) * 60 * 1000) + seconds * 1000 + rounded;\r\n\r\n    console.log(totalMs);\r\n    onChange(totalMs);\r\n  };\r\n\r\n  const handleBlur = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const regex = /(\\d{1,2}):(\\d{1,2})\\.(\\d{1,3})/; // Matches MM:SS.MSS format\r\n    const match = e.target.value.match(regex);\r\n\r\n    console.log(e.target.value);\r\n    console.log(match);\r\n\r\n    if (!match) {\r\n      return;\r\n    }\r\n\r\n    const min = match[1];\r\n    const sec = match[2];\r\n    const ms = match[3];\r\n    console.log(`${min}:${sec}.${ms}`);\r\n\r\n    const totalMs =\r\n      parseInt(min) * 60 * 1000 + parseInt(sec) * 1000 + parseInt(ms);\r\n    console.log(totalMs);\r\n    const formattedTime = convertMsToTimeFormat(totalMs);\r\n    onChange(totalMs);\r\n  };\r\n\r\n  return (\r\n    <label className=\"input input-bordered flex items-center gap-2\">\r\n      <img src={raceImage} className=\"w-[24px]\" />\r\n      <input\r\n        type=\"text\"\r\n        value={time}\r\n        onChange={handleChange}\r\n        placeholder=\"00:00.00\"\r\n        className=\"text-xl max-w-40\"\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default TimeInput;\r\n","import raceImage from \"images/game_types/race.webp\";\r\nimport { Loading } from \"components/Loading\";\r\nimport { SelectionRow } from \"components/SelectionRow\";\r\nimport { TimeInput } from \"components/TimeInput\";\r\nimport { useLocalRoundData } from \"hooks/useLocalRoundData\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  getRoundDurationFrameMs,\r\n  getRoundDurationMs,\r\n  Round,\r\n  RoundSetDef,\r\n} from \"types/roundSet\";\r\nimport { convertMsToTimeFormat } from \"util/converters\";\r\n\r\nconst RaceTimeCalculator: React.FC = () => {\r\n  const [startRound, setStartRound] = useState(1);\r\n  const [endRound, setEndRound] = useState(2);\r\n  const [roundSetPos, setRoundSetPos] = useState(0);\r\n  const {\r\n    data: roundData,\r\n    roundSetsDefs: roundSets,\r\n    loading: roundLoading,\r\n  } = useLocalRoundData(roundSetPos);\r\n  const [selectedCalc, setSelectedCalc] = useState<\"goal\" | \"rtime\">(\"rtime\");\r\n  const [inputMs, setInputMs] = useState(0);\r\n  const [goalMs, setGoalMs] = useState(0);\r\n\r\n  const SEND_DELAY_MS = 200;\r\n\r\n  const handleStartChange = (e: any) => {\r\n    const value: number = parseInt(e.target.value, 10);\r\n\r\n    if (value > roundData.rounds.length) {\r\n      setStartRound(roundData.rounds.length);\r\n    } else {\r\n      setStartRound(value);\r\n    }\r\n\r\n    // End Round management.\r\n    if (value >= endRound) {\r\n      setEndRound(value);\r\n    }\r\n  };\r\n\r\n  const handleEndChange = (e: any) => {\r\n    const value: number = parseInt(e.target.value, 10);\r\n\r\n    if (value > roundData.rounds.length) {\r\n      setEndRound(roundData.rounds.length);\r\n    } else {\r\n      setEndRound(value);\r\n    }\r\n\r\n    // Start Round management.\r\n    if (value <= startRound) {\r\n      setStartRound(value);\r\n    }\r\n  };\r\n\r\n  const calculateTime = (start: number, end: number, delay: number): number => {\r\n    const longestRound = calculateLongestRound(start, end);\r\n    const longestRoundDuration = getRoundDurationFrameMs(longestRound);\r\n    const timeToSend = SEND_DELAY_MS * (longestRound.roundNumber - start);\r\n\r\n    const finalMs = longestRoundDuration + timeToSend + delay;\r\n\r\n    return finalMs;\r\n  };\r\n\r\n  const addDelay = (time: number, sendDelay: number) => {\r\n    //const delayFrame = Math.ceil((sendDelay * 60) / 1000) / (60 / 1000);\r\n    return time + 1000 / 60;\r\n    // return time + delayFrame + 1000 / 60;\r\n  };\r\n\r\n  const calculateLongestRound = (start: number, end: number): Round => {\r\n    return roundData.rounds\r\n      .filter((x) => x.roundNumber >= start && x.roundNumber <= end)\r\n      .reduce((longestRound, round) => {\r\n        const duration =\r\n          getRoundDurationMs(round) +\r\n          (round.roundNumber - start) * SEND_DELAY_MS;\r\n        const longestDuration =\r\n          getRoundDurationMs(longestRound) +\r\n          (longestRound.roundNumber - start) * SEND_DELAY_MS;\r\n        return longestDuration > duration ? longestRound : round;\r\n      });\r\n  };\r\n\r\n  const calculateGoalTime = (\r\n    start: number,\r\n    end: number,\r\n    goal: number\r\n  ): number => {\r\n    const longestRound = calculateLongestRound(start, end);\r\n    const longestRoundDuration = getRoundDurationFrameMs(longestRound);\r\n    const timeToSend = SEND_DELAY_MS * (longestRound.roundNumber - start);\r\n    const finalMs = goal - (longestRoundDuration + timeToSend + 1000 / 60);\r\n\r\n    return finalMs < 0 ? 0 : finalMs;\r\n  };\r\n\r\n  const calcToString = () =>\r\n    selectedCalc === \"goal\" ? \"Goal Time\" : \"Race Time\";\r\n\r\n  const calculateMoreData = (goalTime: number) => {\r\n    const restOfRounds = roundData.rounds\r\n      .slice(calculateLongestRound(startRound, endRound).roundNumber, endRound)\r\n      .sort((x, y) => getRoundDurationMs(y) - getRoundDurationMs(x));\r\n\r\n    console.log(restOfRounds);\r\n\r\n    let lastRound = calculateLongestRound(startRound, endRound);\r\n\r\n    return restOfRounds.reduce((acc, round) => {\r\n      if (round.roundNumber < lastRound.roundNumber) {\r\n        return acc; // Skip this iteration (like continue)\r\n      }\r\n\r\n      const startRnd = lastRound;\r\n      const endRnd = round;\r\n      const time =\r\n        goalTime -\r\n        (getRoundDurationFrameMs(endRnd) +\r\n          (endRnd.roundNumber - startRnd.roundNumber - 1) * SEND_DELAY_MS);\r\n\r\n      console.log({\r\n        start: startRnd.roundNumber,\r\n        end: endRnd.roundNumber,\r\n        time,\r\n      });\r\n\r\n      lastRound = endRnd;\r\n\r\n      if (endRnd.roundNumber > startRnd.roundNumber) {\r\n        acc.push({ startRound: startRnd, endRound: endRnd, time: time });\r\n      }\r\n\r\n      return acc;\r\n    }, [] as { startRound: typeof lastRound; endRound: typeof lastRound; time: number }[]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!roundLoading) {\r\n      //setEndRound(80);\r\n      setEndRound(roundData.rounds.length);\r\n    }\r\n  }, [roundLoading]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center align-center justify-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Race Time Calculator\r\n      </p>\r\n\r\n      {roundLoading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div className=\"flex flex-col w-1/2 items-center justify-center align-center gap-2\">\r\n          <div className=\"flex items-center gap-2 w-3/4\">\r\n            <p className=\"w-1/2\">Round Set:</p>\r\n            <select\r\n              id=\"tile-select\"\r\n              className=\"select select-bordered w-full max-w-xs my-4\"\r\n              onChange={(e) => {\r\n                setRoundSetPos(e.target.options.selectedIndex);\r\n                console.log(roundSetPos);\r\n              }}\r\n              value={roundSets[roundSetPos].name}\r\n            >\r\n              {roundSets.map((x, i) => (\r\n                <option key={i} disabled={!x.isComplete}>\r\n                  {x.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"flex w-full items-center gap-4 pt-4\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={roundData.rounds.length}\r\n              value={startRound}\r\n              onChange={handleStartChange}\r\n              className=\"range\"\r\n            />\r\n            <label className=\"input input-bordered flex items-center gap-2\">\r\n              <input\r\n                className=\"font-medium text-lg max-w-10\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"Start\"\r\n                value={startRound}\r\n                onChange={handleStartChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"flex w-full items-center gap-4\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={roundData.rounds.length}\r\n              value={endRound}\r\n              onChange={handleEndChange}\r\n              className=\"range\"\r\n            />\r\n            <label className=\"input input-bordered flex items-center gap-2\">\r\n              <input\r\n                className=\"font-medium text-lg max-w-10\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"End\"\r\n                value={endRound}\r\n                onChange={handleEndChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <SelectionRow\r\n            selectionId={selectedCalc}\r\n            selectionName={calcToString()}\r\n            selections={[\r\n              {\r\n                ids: [\"rtime\"],\r\n                name: \"Race Time\",\r\n                onClickFunction: () => {\r\n                  setSelectedCalc(\"rtime\");\r\n                },\r\n              },\r\n              {\r\n                ids: [\"goal\"],\r\n                name: \"Goal Time\",\r\n                onClickFunction: () => {\r\n                  setSelectedCalc(\"goal\");\r\n                },\r\n              },\r\n            ]}\r\n          />\r\n          {selectedCalc === \"goal\" ? (\r\n            <div className=\"items-center text-center py-6\">\r\n              <p>Time you want to achieve:</p>\r\n              <TimeInput value={goalMs} onChange={setGoalMs} />\r\n            </div>\r\n          ) : (\r\n            <div className=\"items-center text-center py-6\">\r\n              <p>\r\n                Send from Round{\" \"}\r\n                <span className=\"text-xl font-bold\">{startRound}</span> to Round{\" \"}\r\n                <span className=\"text-xl font-bold\">\r\n                  {calculateLongestRound(startRound, endRound).roundNumber}\r\n                </span>{\" \"}\r\n                at:\r\n              </p>\r\n              <TimeInput value={inputMs} onChange={setInputMs} />\r\n            </div>\r\n          )}\r\n          <div className=\"flex flex-col gap-2 items-center outline outline-2 outline-white/50 p-4\">\r\n            {selectedCalc === \"goal\" ? (\r\n              <>\r\n                {goalMs <\r\n                addDelay(\r\n                  calculateTime(startRound, endRound, inputMs),\r\n                  inputMs\r\n                ) ? (\r\n                  <p>Not possible.</p>\r\n                ) : (\r\n                  <>\r\n                    <p className=\"text-center\">\r\n                      You need to send from Round{\" \"}\r\n                      <span className=\"text-xl font-bold\">{startRound}</span> to\r\n                      Round{\" \"}\r\n                      <span className=\"text-xl font-bold\">\r\n                        {\r\n                          calculateLongestRound(startRound, endRound)\r\n                            .roundNumber\r\n                        }\r\n                      </span>{\" \"}\r\n                      before:\r\n                    </p>\r\n                    <div className=\"text-3xl font-semibold flex items-center gap-2\">\r\n                      <img src={raceImage} className=\"h-[32px]\" />\r\n                      {convertMsToTimeFormat(\r\n                        calculateGoalTime(startRound, endRound, goalMs)\r\n                      )}\r\n                      <img src={raceImage} className=\"h-[32px]\" />\r\n                    </div>\r\n                    <p>\r\n                      in order to get{\" \"}\r\n                      <span className=\"text-xl font-bold\">\r\n                        {convertMsToTimeFormat(goalMs)}\r\n                      </span>\r\n                      , assuming you perfect clean.\r\n                    </p>\r\n                  </>\r\n                )}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <p className=\"text-center\">You will get</p>\r\n                <div className=\"text-3xl font-semibold flex items-center gap-2\">\r\n                  <img src={raceImage} className=\"h-[32px]\" />\r\n                  {convertMsToTimeFormat(\r\n                    addDelay(\r\n                      calculateTime(startRound, endRound, inputMs),\r\n                      inputMs\r\n                    )\r\n                  )}\r\n                  <img src={raceImage} className=\"h-[32px]\" />\r\n                </div>\r\n                <p>\r\n                  assuming you perfect clean Round{\" \"}\r\n                  <span className=\"text-xl font-bold\">\r\n                    {calculateLongestRound(startRound, endRound).roundNumber}\r\n                  </span>{\" \"}\r\n                  (\r\n                  <span className=\"text-lg font-medium\">\r\n                    {getRoundDurationMs(\r\n                      calculateLongestRound(startRound, endRound)\r\n                    ) / 1000}\r\n                  </span>{\" \"}\r\n                  seconds).\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <ul className=\"list-disc items-center\">\r\n            {calculateMoreData(\r\n              selectedCalc === \"rtime\"\r\n                ? calculateTime(startRound, endRound, inputMs)\r\n                : goalMs\r\n            ).map((x, i) => (\r\n              <li key={i}>\r\n                then send from Round{\" \"}\r\n                <span className=\"text-xl font-bold\">\r\n                  {x.startRound.roundNumber}\r\n                </span>{\" \"}\r\n                to Round{\" \"}\r\n                <span className=\"text-xl font-bold\">\r\n                  {x.endRound.roundNumber}\r\n                </span>{\" \"}\r\n                before{\" \"}\r\n                <span className=\"text-xl font-bold\">\r\n                  {convertMsToTimeFormat(x.time)}\r\n                </span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"divider\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaceTimeCalculator;\r\n","import RaceTimeCalculator from \"./RaceTimeCalculator\";\r\nexport default RaceTimeCalculator;\r\n","export type RoundSet = {\r\n  rounds: Round[];\r\n  scale?: number;\r\n};\r\n\r\nexport type Round = {\r\n  bloonGroups: BloonGroup[];\r\n  roundNumber: number;\r\n  addToRound: boolean;\r\n};\r\n\r\nexport type BloonGroup = {\r\n  bloon: Bloon;\r\n  count: number;\r\n  start: number;\r\n  duration: number;\r\n};\r\n\r\nexport type RoundSetDef = {\r\n  name: string;\r\n  path: string;\r\n  isComplete: boolean;\r\n};\r\n\r\nexport type Bloon =\r\n  | \"Bad\"\r\n  | \"BadFortified\"\r\n  | \"Bfb\"\r\n  | \"BfbFortified\"\r\n  | \"Black\"\r\n  | \"BlackCamo\"\r\n  | \"BlackRegrow\"\r\n  | \"BlackRegrowCamo\"\r\n  | \"Blue\"\r\n  | \"BlueCamo\"\r\n  | \"BlueRegrow\"\r\n  | \"BlueRegrowCamo\"\r\n  | \"Ceramic\"\r\n  | \"CeramicCamo\"\r\n  | \"CeramicFortified\"\r\n  | \"CeramicFortifiedCamo\"\r\n  | \"CeramicRegrow\"\r\n  | \"CeramicRegrowCamo\"\r\n  | \"CeramicRegrowFortified\"\r\n  | \"CeramicRegrowFortifiedCamo\"\r\n  | \"DdtCamo\"\r\n  | \"DdtFortifiedCamo\"\r\n  | \"Green\"\r\n  | \"GreenCamo\"\r\n  | \"GreenRegrow\"\r\n  | \"GreenRegrowCamo\"\r\n  | \"Lead\"\r\n  | \"LeadCamo\"\r\n  | \"LeadFortified\"\r\n  | \"LeadFortifiedCamo\"\r\n  | \"LeadRegrow\"\r\n  | \"LeadRegrowCamo\"\r\n  | \"LeadRegrowFortified\"\r\n  | \"LeadRegrowFortifiedCamo\"\r\n  | \"Moab\"\r\n  | \"MoabFortified\"\r\n  | \"Pink\"\r\n  | \"PinkCamo\"\r\n  | \"PinkRegrow\"\r\n  | \"PinkRegrowCamo\"\r\n  | \"Purple\"\r\n  | \"PurpleCamo\"\r\n  | \"PurpleRegrow\"\r\n  | \"PurpleRegrowCamo\"\r\n  | \"Rainbow\"\r\n  | \"RainbowCamo\"\r\n  | \"RainbowRegrow\"\r\n  | \"RainbowRegrowCamo\"\r\n  | \"Red\"\r\n  | \"RedCamo\"\r\n  | \"RedRegrow\"\r\n  | \"RedRegrowCamo\"\r\n  | \"White\"\r\n  | \"WhiteCamo\"\r\n  | \"WhiteRegrow\"\r\n  | \"WhiteRegrowCamo\"\r\n  | \"Yellow\"\r\n  | \"YellowCamo\"\r\n  | \"YellowRegrow\"\r\n  | \"YellowRegrowCamo\"\r\n  | \"Zebra\"\r\n  | \"ZebraCamo\"\r\n  | \"ZebraRegrow\"\r\n  | \"ZebraRegrowCamo\"\r\n  | \"Zomg\"\r\n  | \"ZomgFortified\";\r\n\r\nexport const bloonArray: Bloon[] = [\r\n  \"Red\",\r\n  \"RedCamo\",\r\n  \"RedRegrow\",\r\n  \"RedRegrowCamo\",\r\n  \"Blue\",\r\n  \"BlueCamo\",\r\n  \"BlueRegrow\",\r\n  \"BlueRegrowCamo\",\r\n  \"Green\",\r\n  \"GreenCamo\",\r\n  \"GreenRegrow\",\r\n  \"GreenRegrowCamo\",\r\n  \"Yellow\",\r\n  \"YellowCamo\",\r\n  \"YellowRegrow\",\r\n  \"YellowRegrowCamo\",\r\n  \"Pink\",\r\n  \"PinkCamo\",\r\n  \"PinkRegrow\",\r\n  \"PinkRegrowCamo\",\r\n  \"Black\",\r\n  \"BlackCamo\",\r\n  \"BlackRegrow\",\r\n  \"BlackRegrowCamo\",\r\n  \"White\",\r\n  \"WhiteCamo\",\r\n  \"WhiteRegrow\",\r\n  \"WhiteRegrowCamo\",\r\n  \"Purple\",\r\n  \"PurpleCamo\",\r\n  \"PurpleRegrow\",\r\n  \"PurpleRegrowCamo\",\r\n  \"Zebra\",\r\n  \"ZebraCamo\",\r\n  \"ZebraRegrow\",\r\n  \"ZebraRegrowCamo\",\r\n  \"Lead\",\r\n  \"LeadCamo\",\r\n  \"LeadFortified\",\r\n  \"LeadFortifiedCamo\",\r\n  \"LeadRegrow\",\r\n  \"LeadRegrowCamo\",\r\n  \"LeadRegrowFortified\",\r\n  \"LeadRegrowFortifiedCamo\",\r\n  \"Rainbow\",\r\n  \"RainbowCamo\",\r\n  \"RainbowRegrow\",\r\n  \"RainbowRegrowCamo\",\r\n  \"Ceramic\",\r\n  \"CeramicCamo\",\r\n  \"CeramicFortified\",\r\n  \"CeramicFortifiedCamo\",\r\n  \"CeramicRegrow\",\r\n  \"CeramicRegrowCamo\",\r\n  \"CeramicRegrowFortified\",\r\n  \"CeramicRegrowFortifiedCamo\",\r\n  \"Moab\",\r\n  \"MoabFortified\",\r\n  \"Bfb\",\r\n  \"BfbFortified\",\r\n  \"Zomg\",\r\n  \"ZomgFortified\",\r\n  \"DdtCamo\",\r\n  \"DdtFortifiedCamo\",\r\n  \"Bad\",\r\n  \"BadFortified\",\r\n];\r\n\r\nexport const getRoundDurationMs = (round: Round): number => {\r\n  const rawDuration = round.bloonGroups.reduce((maxEnd, group) => {\r\n    const endTime = group.start + group.duration;\r\n    return Math.max(maxEnd, endTime);\r\n  }, 0);\r\n\r\n  return Math.round(rawDuration * 100) * 10;\r\n};\r\n\r\nexport const getRoundDurationFrameMs = (round: Round): number => {\r\n  const rawDuration = round.bloonGroups.reduce((maxEnd, group) => {\r\n    const endTime = group.start + group.duration;\r\n    return Math.max(maxEnd, endTime);\r\n  }, 0);\r\n\r\n  return (Math.ceil(rawDuration * 60) / 60) * 1000;\r\n};\r\n"],"names":["_ref","selectionName","selectionId","selections","_jsx","className","children","map","selection","ids","includes","onClick","onClickFunction","name","useLocalRoundData","pos","data","setData","useState","roundSetsDefs","path","isComplete","loading","setLoading","useEffect","async","response","fetch","ok","Error","jsonData","json","rounds","filter","x","roundNumber","uniqueBloons","round","group","bloonGroups","bloon","push","error","console","log","fetchData","value","onChange","time","setTime","convertMsToTimeFormat","_jsxs","src","raceImage","type","e","target","min","left","split","sec","ms","length","milliseconds","parseInt","seconds","rounded","Math","ceil","totalMs","placeholder","RaceTimeCalculator","startRound","setStartRound","endRound","setEndRound","roundSetPos","setRoundSetPos","roundData","roundSets","roundLoading","selectedCalc","setSelectedCalc","inputMs","setInputMs","goalMs","setGoalMs","SEND_DELAY_MS","handleStartChange","handleEndChange","calculateTime","start","end","delay","longestRound","calculateLongestRound","getRoundDurationFrameMs","addDelay","sendDelay","reduce","duration","getRoundDurationMs","Loading","id","options","selectedIndex","i","disabled","max","inputMode","SelectionRow","TimeInput","_Fragment","calculateGoalTime","goal","finalMs","goalTime","restOfRounds","slice","sort","y","lastRound","acc","startRnd","endRnd","calculateMoreData","bloonArray","rawDuration","maxEnd","endTime"],"sourceRoot":""}