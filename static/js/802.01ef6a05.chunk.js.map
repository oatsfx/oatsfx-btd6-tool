{"version":3,"file":"static/js/802.01ef6a05.chunk.js","mappings":"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","sources":["hooks/useCtData.tsx","hooks/useCtEventRelics.tsx","hooks/useCtEvents.tsx","hooks/useLeaderboard.tsx","pages/Playground/Playground.tsx","pages/Playground/index.tsx","hooks/useCtDailyRelics.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\r\nimport { CTData, Tile } from \"types/ct\";\r\n\r\nexport const useCtData = (eventId: number) => {\r\n  const url =\r\n    \"https://storage.googleapis.com/btd6-ct-map/events/\" +\r\n    eventId +\r\n    \"/tiles.json\";\r\n\r\n  const [data, setData] = useState<CTData>({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: CTData = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [eventId]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { Relic } from \"types/ct\";\r\n\r\nexport const useCtEventRelics = (eventId: number) => {\r\n  const url =\r\n    \"https://storage.googleapis.com/btd6-ct-map/events/\" +\r\n    eventId +\r\n    \"/event_relics.json\";\r\n  const [data, setData] = useState<Relic[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: Relic[] = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [eventId]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { CTData, CTSeed, Tile } from \"types/ct\";\r\n\r\nexport const useCtEvents = () => {\r\n  const url = \"https://storage.googleapis.com/btd6-ct-map/event-seeds.json\";\r\n\r\n  const [data, setData] = useState<CTSeed[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: string[] = await response.json();\r\n        //jsonData.reverse();\r\n        const newData: CTSeed[] = jsonData.flatMap((x, i) =>\r\n          x ? [{ id: x, number: i }] : []\r\n        );\r\n        newData.reverse();\r\n        setData(newData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { BossMode, EventType } from \"types/events\";\r\nimport { LeaderboardData, LeaderboardEntry } from \"types/leaderboards\";\r\nimport { Event } from \"types/events\";\r\n\r\nexport const useLeaderboard = (\r\n  eventType: EventType,\r\n  eventPos: number,\r\n  page: number,\r\n  bossMode?: BossMode,\r\n  numOfPages: number = 1\r\n) => {\r\n  const [data, setData] = useState<LeaderboardData<LeaderboardEntry[]>>(\r\n    {} as LeaderboardData<LeaderboardEntry[]>\r\n  );\r\n  const [events, setEvents] = useState<Event[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useMemo(() => {\r\n    const raceUrl = \"https://data.ninjakiwi.com/btd6/races/\";\r\n    const bossUrl = \"https://data.ninjakiwi.com/btd6/bosses/\";\r\n    const ctUrl = \"https://data.ninjakiwi.com/btd6/ct/\";\r\n\r\n    const headers: RequestInit = { mode: \"cors\" };\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(false);\r\n      console.log(\"fetching leaderboards\");\r\n      try {\r\n        let url = \"\";\r\n        if (eventType === \"Race\") {\r\n          const racesResponse = await fetch(raceUrl);\r\n          const raceData = await racesResponse.json();\r\n          setEvents(raceData.body);\r\n\r\n          url = raceData.body[eventPos].leaderboard;\r\n        } else if (eventType === \"Boss\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            url = bossData.body[eventPos].leaderboard_elite_players_1;\r\n          } else {\r\n            url = bossData.body[eventPos].leaderboard_standard_players_1;\r\n          }\r\n        } else if (eventType === \"Boss2\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n              \"2\";\r\n          } else {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) + \"2\";\r\n          }\r\n        } else if (eventType === \"Boss3\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n              \"3\";\r\n          } else {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) + \"3\";\r\n          }\r\n        } else if (eventType === \"Boss4\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n              \"4\";\r\n          } else {\r\n            url =\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) + \"4\";\r\n          }\r\n        } else if (eventType === \"CtTeam\") {\r\n          const ctResponse = await fetch(ctUrl);\r\n          const ctData = await ctResponse.json();\r\n          setEvents(ctData.body);\r\n\r\n          url = ctData.body[eventPos].leaderboard_team;\r\n        } else {\r\n          const ctResponse = await fetch(ctUrl);\r\n          const ctData = await ctResponse.json();\r\n          setEvents(ctData.body);\r\n          console.log(ctData);\r\n\r\n          url = ctData.body[eventPos].leaderboard_player;\r\n        }\r\n\r\n        const response = await fetch(url + \"?page=\" + page, headers);\r\n\r\n        const jsonData: LeaderboardData<LeaderboardEntry[]> =\r\n          await response.json();\r\n\r\n        if (!jsonData.success) {\r\n          throw new Error(\"Unsuccessful: \" + jsonData.error);\r\n        }\r\n\r\n        // Add additional pages to the original JSON.\r\n        // Start at 1 since we already did the 1st page.\r\n        // This starts us at page 2, assuming page = 1.\r\n        console.log(numOfPages);\r\n        for (let i = 1; i < numOfPages; i++) {\r\n          const response = await fetch(url + \"?page=\" + (page + i), headers);\r\n\r\n          if (!response.ok) {\r\n            throw new Error(\"Failed to fetch data\");\r\n          }\r\n\r\n          const newJsonData: LeaderboardData<LeaderboardEntry[]> =\r\n            await response.json();\r\n\r\n          jsonData.body = jsonData.body.concat(newJsonData.body);\r\n          console.log(\"got page: \", i);\r\n        }\r\n\r\n        if (\r\n          eventType === \"Boss2\" ||\r\n          eventType === \"Boss3\" ||\r\n          eventType === \"Boss4\"\r\n        ) {\r\n          let nextPlayersToCheck = 0;\r\n          switch (eventType) {\r\n            case \"Boss2\":\r\n              nextPlayersToCheck = 1;\r\n              break;\r\n            case \"Boss3\":\r\n              nextPlayersToCheck = 2;\r\n              break;\r\n            case \"Boss4\":\r\n              nextPlayersToCheck = 3;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          const players: { displayName: string; profile: string }[][] = [];\r\n          const indecesToSplice: number[] = [];\r\n          for (let i = 0; i < jsonData.body.length; i++) {\r\n            const playersEntry: { displayName: string; profile: string }[] = [];\r\n            // playersEntry.push({\r\n            //   displayName: jsonData.body[i].displayName,\r\n            //   profile: jsonData.body[i].profile,\r\n            // });\r\n            const currentPlayerIndex = i;\r\n            for (\r\n              let j = currentPlayerIndex + 1;\r\n              j <= currentPlayerIndex + nextPlayersToCheck;\r\n              j++\r\n            ) {\r\n              if (j >= jsonData.body.length) {\r\n                break;\r\n              }\r\n              if (\r\n                jsonData.body[i].scoreParts[0].score ===\r\n                jsonData.body[j].scoreParts[0].score\r\n              ) {\r\n                playersEntry.push({\r\n                  displayName: jsonData.body[j].displayName,\r\n                  profile: jsonData.body[j].profile,\r\n                });\r\n                indecesToSplice.push(j);\r\n                i++;\r\n              }\r\n              players.push(playersEntry);\r\n              jsonData.body[currentPlayerIndex].otherPlayers = playersEntry;\r\n            }\r\n          }\r\n          indecesToSplice.reverse().map((x) => {\r\n            jsonData.body.splice(x, 1);\r\n          });\r\n        }\r\n\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        setError(true);\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [eventType, eventPos, page, bossMode]);\r\n\r\n  return { data, events, loading, error };\r\n};\r\n","import { Loading } from \"components/Loading\";\r\nimport { useCtDailyRelics } from \"hooks/useCtDailyRelics\";\r\nimport { useCtData } from \"hooks/useCtData\";\r\nimport { useCtEventRelics } from \"hooks/useCtEventRelics\";\r\nimport { useCtEvents } from \"hooks/useCtEvents\";\r\nimport { useLeaderboard } from \"hooks/useLeaderboard\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { FaEye, FaHandshake } from \"react-icons/fa\";\r\nimport { LocalBattle, LocalTeam } from \"types/localBattle\";\r\nimport {\r\n  appendOrdinalSuffix,\r\n  formatDateToEventHighlightDate,\r\n  formatGameEntityName,\r\n  formatGoldenAppleDiscordEmote,\r\n  placeToCtHistoryEmote,\r\n  placeToCtTeamLocalMedal,\r\n  placeToCtTeamMedal,\r\n  roundEven5,\r\n} from \"util/converters\";\r\n\r\nconst Playground: React.FC = () => {\r\n  const [playgroundInput, setPlaygroundInput] = useState<number>(0);\r\n\r\n  const { data: ctEventData, loading: ctEventLoading } = useCtEvents();\r\n  const [eventNum, setEventNum] = useState<number>(ctEventData.length - 1);\r\n\r\n  const { data: ctData, loading: ctLoading } = useCtData(eventNum);\r\n  const { data: eventRelics, loading: eventRelicsLoading } =\r\n    useCtEventRelics(eventNum);\r\n  const { data: dailyRelics, loading: dailyRelicsLoading } =\r\n    useCtDailyRelics(eventNum);\r\n\r\n  const [localBattles, setLocalBattles] = useState<LocalBattle[]>([]);\r\n\r\n  const createDefaultTeam = (): LocalTeam => ({\r\n    name: \"\",\r\n    globalPosition: -1,\r\n    truce: false,\r\n    isAyo: false,\r\n  });\r\n\r\n  const [inProgressLocalBattle, setInProgressLocalBattle] =\r\n    useState<LocalBattle>({\r\n      teams: Array.from({ length: 6 }, createDefaultTeam),\r\n    });\r\n\r\n  const [selectedLocalBattle, setSelectedLocalBattle] = useState(-1);\r\n\r\n  const [page, setPage] = useState(1);\r\n\r\n  const {\r\n    data: leaderboardData,\r\n    events: eventData,\r\n    loading,\r\n    error,\r\n  } = useLeaderboard(\r\n    \"CtTeam\",\r\n    ctEventData.length - eventNum,\r\n    page,\r\n    undefined,\r\n    4\r\n  );\r\n\r\n  const totalLoading =\r\n    loading || ctLoading || eventRelicsLoading || dailyRelicsLoading;\r\n  const isError = error;\r\n\r\n  const addLocalBattle = () => {\r\n    const newLocalBattles = [...localBattles];\r\n\r\n    if (inProgressLocalBattle.teams.filter((x) => x.name).length <= 1) {\r\n      return;\r\n    }\r\n\r\n    if (newLocalBattles.includes(inProgressLocalBattle)) {\r\n      return;\r\n    }\r\n\r\n    newLocalBattles.push(inProgressLocalBattle);\r\n    console.log(newLocalBattles);\r\n    setLocalBattles(newLocalBattles);\r\n    setInProgressLocalBattle({\r\n      teams: Array.from({ length: 6 }, createDefaultTeam),\r\n    });\r\n  };\r\n\r\n  const deleteLocalBattle = (index: number) => {\r\n    const newLocalBattles = [...localBattles];\r\n\r\n    newLocalBattles.splice(index, 1);\r\n    console.log(newLocalBattles);\r\n    console.log(localBattles);\r\n    setSelectedLocalBattle(-1);\r\n    setLocalBattles(newLocalBattles);\r\n  };\r\n\r\n  const addLocalTeam = (battle: LocalBattle) => {\r\n    if (battle.teams.length === 6) {\r\n      return battle;\r\n    }\r\n    const newTeams = [...battle.teams];\r\n    newTeams.push(createDefaultTeam());\r\n    battle.teams = newTeams;\r\n    console.log(battle);\r\n    return battle;\r\n  };\r\n\r\n  const updateLocalBattle = (index: number = -1) => {\r\n    const localBattle: LocalBattle = { teams: [] };\r\n    const battle = index >= 0 ? localBattles[index] : inProgressLocalBattle;\r\n    console.log(battle);\r\n    const battles = [...localBattles];\r\n    battle.teams.map((x, index) => {\r\n      const teamName = document.getElementById(\r\n        `team-${index}-name`\r\n      ) as HTMLSelectElement;\r\n      const ayo = document.getElementById(\r\n        `team-${index}-ayo`\r\n      ) as HTMLInputElement;\r\n      const truce = document.getElementById(\r\n        `team-${index}-truce`\r\n      ) as HTMLInputElement;\r\n\r\n      const globalPosition = leaderboardData.body.findIndex(\r\n        (team) => team.displayName === teamName.value.toUpperCase()\r\n      );\r\n\r\n      localBattle.teams.push({\r\n        name: teamName.value,\r\n        globalPosition: globalPosition,\r\n        truce: truce.checked,\r\n        isAyo: ayo.checked,\r\n      });\r\n    });\r\n    console.log(localBattle);\r\n\r\n    battles[index] = localBattle;\r\n    setLocalBattles([...battles]);\r\n\r\n    setInProgressLocalBattle(localBattle);\r\n  };\r\n\r\n  const updateExistingBattle = (index: number) => {\r\n    const localBattle: LocalBattle = { teams: [] };\r\n    console.log(localBattles[index].teams.length);\r\n    console.log(localBattles);\r\n    localBattles[index].teams.map((x, index) => {\r\n      const teamName = document.getElementById(\r\n        `edit-team-${index}-name`\r\n      ) as HTMLSelectElement;\r\n      const ayo = document.getElementById(\r\n        `edit-team-${index}-ayo`\r\n      ) as HTMLInputElement;\r\n      const truce = document.getElementById(\r\n        `edit-team-${index}-truce`\r\n      ) as HTMLInputElement;\r\n\r\n      const globalPosition = leaderboardData.body.findIndex(\r\n        (team) => team.displayName === teamName.value.toUpperCase()\r\n      );\r\n\r\n      localBattle.teams.push({\r\n        name: teamName.value,\r\n        globalPosition: globalPosition,\r\n        truce: truce.checked,\r\n        isAyo: ayo.checked,\r\n      });\r\n    });\r\n    console.log(localBattle);\r\n    const newLocalBattles = [...localBattles];\r\n    newLocalBattles[index] = localBattle;\r\n    setLocalBattles(newLocalBattles);\r\n  };\r\n\r\n  const getMedalNum = (pos: number): number => {\r\n    if (pos >= 1 && pos <= 3) return pos;\r\n    if (pos > 3 && pos <= 25) return 25;\r\n    if (pos > 25 && pos <= 100) return 100;\r\n    return -1;\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center align-center justify-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Playground\r\n      </p>\r\n      <div className=\"flex items-center gap-4 py-2\">\r\n        <label className=\"input input-bordered flex items-center gap-2\">\r\n          <input\r\n            className=\"font-medium text-lg max-w-40\"\r\n            type=\"text\"\r\n            inputMode=\"numeric\"\r\n            placeholder=\"roundEven5 Playground\"\r\n            onChange={(e: any) => {\r\n              setPlaygroundInput(Number(e.target.value));\r\n            }}\r\n          />\r\n        </label>\r\n        <p id=\"roundEven5-result\">\r\n          {roundEven5(playgroundInput * 0.85)} ({playgroundInput * 0.85})\r\n        </p>\r\n      </div>\r\n      <div className=\"divider\" />\r\n      <div className=\"flex flex-col items-center gap-4 py-2 w-full\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <p className=\"text-nowrap\">Select a CT event:</p>\r\n          <select\r\n            id=\"ct-select\"\r\n            className=\"select select-bordered w-full max-w-xs\"\r\n            onChange={(e) => {\r\n              console.log(e.target.options.selectedIndex);\r\n            }}\r\n            value={eventNum}\r\n          >\r\n            {ctEventData\r\n              .filter((x) => eventData.some((e) => e.id === x.id))\r\n              .map((x) => (\r\n                <option\r\n                  key={x.number}\r\n                  value={x.number}\r\n                  onClick={() => setEventNum(x.number)}\r\n                >\r\n                  {x.number} ({x.id})\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n        <p>Click the text you want to copy.</p>\r\n        <div className=\"divider\" />\r\n\r\n        {totalLoading ? (\r\n          <Loading />\r\n        ) : (\r\n          <>\r\n            <div className=\"w-3/4\">\r\n              <label>\r\n                Forum Post Title:\r\n                <textarea\r\n                  readOnly\r\n                  className=\"textarea textarea-bordered w-full\"\r\n                  value={`Event ${eventNum} (${formatDateToEventHighlightDate(\r\n                    eventData[ctEventData.length - eventNum].start\r\n                  )}-${formatDateToEventHighlightDate(\r\n                    eventData[ctEventData.length - eventNum].end\r\n                  )})`\r\n                    .split(\"\\n\")\r\n                    .map((line) => line.trim())\r\n                    .join(\"\\n\")}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className=\"divider\" />\r\n            <div className=\"w-3/4\">\r\n              <label>\r\n                Initial Event Highlight Message:\r\n                <textarea\r\n                  readOnly\r\n                  className=\"textarea textarea-bordered w-full min-h-96\"\r\n                  value={`## Event ID: \\`${\r\n                    eventData[ctEventData.length - eventNum].id\r\n                  }\\`\r\n\r\n                ## Event Timeline:\r\n                <t:${\r\n                  eventData[ctEventData.length - eventNum].start / 1000\r\n                }> - <t:${eventData[ctEventData.length - eventNum].end / 1000}>\r\n                \r\n                ### Event Relics:\r\n                ${eventRelics\r\n                  .map(\r\n                    (x) =>\r\n                      `- ${formatGameEntityName(\r\n                        x\r\n                      )} ${formatGoldenAppleDiscordEmote(x)}`\r\n                  )\r\n                  .join(\"\\n\")}\r\n                  \r\n                ### Daily Relics:\r\n                ${dailyRelics\r\n                  .map(\r\n                    (x) =>\r\n                      `- ${formatGameEntityName(\r\n                        x\r\n                      )} ${formatGoldenAppleDiscordEmote(x)}`\r\n                  )\r\n                  .join(\"\\n\")}`\r\n                    .split(\"\\n\")\r\n                    .map((line) => line.trim())\r\n                    .join(\"\\n\")}\r\n                />\r\n              </label>\r\n            </div>\r\n\r\n            <div className=\"divider\" />\r\n\r\n            {isError ? (\r\n              <>Failed to load data. {error}</>\r\n            ) : (\r\n              <>\r\n                <button\r\n                  className={\"btn\"}\r\n                  onClick={() =>\r\n                    (\r\n                      document.getElementById(\r\n                        \"local-battle-modal\"\r\n                      ) as HTMLFormElement\r\n                    ).showModal()\r\n                  }\r\n                >\r\n                  Manage Local Battles\r\n                </button>\r\n                <dialog id=\"local-battle-modal\" className=\"modal\">\r\n                  <div className=\"modal-box max-w-3xl\">\r\n                    <h3 className=\"font-bold text-lg text-primary\">\r\n                      Add Local Battle\r\n                    </h3>\r\n                    <p>Add a local battle that appeared this week.</p>\r\n                    <p className=\"py-4\">\r\n                      This tool will attempt to find the team's name in the top\r\n                      100 global leaderboard when you create the local battle.\r\n                      For it to do that, enter it as it appears in-game. Not\r\n                      case sensitive.\r\n                    </p>\r\n                    <div className=\"flex flex-col items-center gap-2\">\r\n                      <div className=\"flex gap-2\">\r\n                        {localBattles.map((battle, index) => (\r\n                          <div\r\n                            className={\r\n                              \"border rounded-lg p-4 hover:bg-black/25 hover:cursor-pointer\" +\r\n                              (selectedLocalBattle === index\r\n                                ? \" border-success\"\r\n                                : \" border-transparent\")\r\n                            }\r\n                            onClick={() => {\r\n                              console.log(index);\r\n                              console.log(selectedLocalBattle);\r\n\r\n                              if (index === selectedLocalBattle) {\r\n                                setSelectedLocalBattle(-1);\r\n                              } else {\r\n                                setSelectedLocalBattle(index);\r\n                              }\r\n                            }}\r\n                          >\r\n                            {battle.teams\r\n                              .filter((x) => x.name)\r\n                              .map((team, teamIndex) => (\r\n                                <p className=\"flex items-center gap-1\">\r\n                                  {appendOrdinalSuffix(teamIndex + 1)}\r\n                                  {team.isAyo ? <FaEye /> : <></>}\r\n                                  {team.globalPosition + 1 <= 100 &&\r\n                                  team.globalPosition > 0\r\n                                    ? `GT${getMedalNum(\r\n                                        team.globalPosition + 1\r\n                                      )}`\r\n                                    : \"\"}{\" \"}\r\n                                  {team.name}\r\n                                  {team.truce ? <FaHandshake /> : <></>}\r\n                                </p>\r\n                              ))}\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                      {(selectedLocalBattle >= 0\r\n                        ? localBattles[selectedLocalBattle]\r\n                        : inProgressLocalBattle\r\n                      ).teams.map((x, index) => (\r\n                        <div className=\"w-2/3 flex flex-col items-center gap-1\">\r\n                          <label className=\"input input-bordered flex items-center gap-2 w-full\">\r\n                            <img\r\n                              src={placeToCtTeamLocalMedal(index + 1)}\r\n                              className=\"w-[24px]\"\r\n                            />\r\n                            <img\r\n                              src={placeToCtTeamMedal(\r\n                                x.globalPosition + 1,\r\n                                eventData[ctEventData.length - eventNum]\r\n                                  .totalScores!\r\n                              )}\r\n                              className=\"w-[24px]\"\r\n                            />\r\n                            <input\r\n                              className=\"font-semibold w-full\"\r\n                              type=\"text\"\r\n                              placeholder=\"Team Name\"\r\n                              value={x.name}\r\n                              id={\"team-\" + index + \"-name\"}\r\n                              onChange={(x) => {\r\n                                updateLocalBattle(selectedLocalBattle);\r\n                              }}\r\n                            />\r\n                          </label>\r\n                          <div className=\"flex gap-4\">\r\n                            <label className=\"flex gap-4 cursor-pointer items-center\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                className=\"checkbox\"\r\n                                checked={x.truce}\r\n                                id={\"team-\" + index + \"-truce\"}\r\n                                onChange={(x) => {\r\n                                  updateLocalBattle(selectedLocalBattle);\r\n                                }}\r\n                              />\r\n                              <span className=\"label-text\">Truce</span>\r\n                            </label>\r\n                            <label className=\"flex gap-4 cursor-pointer items-center\">\r\n                              <input\r\n                                type=\"checkbox\"\r\n                                className=\"checkbox\"\r\n                                id={\"team-\" + index + \"-ayo\"}\r\n                                checked={x.isAyo}\r\n                                onChange={(x) => {\r\n                                  updateLocalBattle(selectedLocalBattle);\r\n                                }}\r\n                              />\r\n                              <span className=\"label-text\">👀</span>\r\n                            </label>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                      <div className=\"flex gap-2\">\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          disabled={selectedLocalBattle >= 0}\r\n                          onClick={() => {\r\n                            addLocalBattle();\r\n                          }}\r\n                        >\r\n                          Add Battle\r\n                        </button>\r\n                        <button\r\n                          className=\"btn btn-error\"\r\n                          disabled={selectedLocalBattle < 0}\r\n                          onClick={() => {\r\n                            deleteLocalBattle(selectedLocalBattle);\r\n                          }}\r\n                        >\r\n                          Delete Battle\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"modal-action\">\r\n                      <form method=\"dialog\">\r\n                        {/* if there is a button in form, it will close the modal */}\r\n                        <button className=\"btn outline outline-1 outline-error text-error\">\r\n                          Close\r\n                        </button>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                  <form method=\"dialog\" className=\"modal-backdrop\">\r\n                    <button>close</button>\r\n                  </form>\r\n                </dialog>\r\n                <div className=\"w-3/4\">\r\n                  <label>\r\n                    Leaderboard, Battles, and Other Events:\r\n                    <textarea\r\n                      readOnly\r\n                      className=\"textarea textarea-bordered w-full min-h-96\"\r\n                      value={`# Event Leaderboard:\r\n                      ${leaderboardData.body\r\n                        .slice(0, 3)\r\n                        .map(\r\n                          (x, index) =>\r\n                            `${placeToCtHistoryEmote(\r\n                              index + 1,\r\n                              eventData[ctEventData.length - eventNum]\r\n                                .totalScores!\r\n                            )} **${x.displayName}** | :CTPoints: \\`${\r\n                              x.score\r\n                            }\\` ${\r\n                              leaderboardData.body[0].score - x.score > 0\r\n                                ? `(:small_red_triangle_down: \\`${\r\n                                    leaderboardData.body[0].score - x.score\r\n                                  }\\`)`\r\n                                : \"\"\r\n                            }`\r\n                        )\r\n                        .join(\"\\n\")}\r\n                        \r\n                        # Local Battles:\r\n                        ${localBattles\r\n                          .map((battle, index) =>\r\n                            battle.teams\r\n                              .filter((x) => x.name)\r\n                              .map(\r\n                                (team, teamIndex) =>\r\n                                  `${\r\n                                    teamIndex <= 3\r\n                                      ? `:LT${teamIndex + 1}:`\r\n                                      : \":x:\"\r\n                                  }${team.isAyo ? \":eyes:\" : \"\"}${\r\n                                    team.globalPosition + 1 <= 100 &&\r\n                                    team.globalPosition > 0\r\n                                      ? `:GT${getMedalNum(\r\n                                          team.globalPosition + 1\r\n                                        )}:`\r\n                                      : \"\"\r\n                                  } ${teamIndex === 0 ? \"**\" : \"\"}${team.name}${\r\n                                    teamIndex === 0 ? \"**\" : \"\"\r\n                                  }${team.truce ? \" :handshake:\" : \"\"}`\r\n                              )\r\n                              .join(\"\\n\")\r\n                          )\r\n                          .join(\"\\n\\n\")}\r\n\r\n                        # Other Events:`\r\n                        .split(\"\\n\")\r\n                        .map((line) => line.trim())\r\n                        .join(\"\\n\")}\r\n                    />\r\n                  </label>\r\n                </div>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"divider\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playground;\r\n","import Playground from \"./Playground\";\r\nexport default Playground;\r\n","import { useMemo, useState } from \"react\";\r\nimport { Relic } from \"types/ct\";\r\n\r\nexport const useCtDailyRelics = (eventId: number) => {\r\n  const url =\r\n    \"https://storage.googleapis.com/btd6-ct-map/events/\" +\r\n    eventId +\r\n    \"/daily_powers.json\";\r\n  const [data, setData] = useState<Relic[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: Relic[] = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [eventId]);\r\n\r\n  return { data, loading };\r\n};\r\n"],"names":["useCtData","eventId","url","data","setData","useState","loading","setLoading","useMemo","async","response","fetch","ok","Error","jsonData","json","console","log","error","fetchData","useCtEventRelics","useCtEvents","newData","flatMap","x","i","id","number","reverse","useLeaderboard","eventType","eventPos","page","bossMode","numOfPages","arguments","length","undefined","events","setEvents","setError","bossUrl","ctUrl","headers","mode","racesResponse","raceData","body","leaderboard","bossesResponse","bossData","leaderboard_elite_players_1","leaderboard_standard_players_1","slice","ctResponse","ctData","leaderboard_team","leaderboard_player","success","newJsonData","concat","nextPlayersToCheck","players","indecesToSplice","playersEntry","currentPlayerIndex","j","scoreParts","score","push","displayName","profile","otherPlayers","map","splice","Playground","playgroundInput","setPlaygroundInput","ctEventData","ctEventLoading","eventNum","setEventNum","ctLoading","eventRelics","eventRelicsLoading","dailyRelics","dailyRelicsLoading","useCtDailyRelics","localBattles","setLocalBattles","createDefaultTeam","name","globalPosition","truce","isAyo","inProgressLocalBattle","setInProgressLocalBattle","teams","Array","from","selectedLocalBattle","setSelectedLocalBattle","setPage","leaderboardData","eventData","totalLoading","isError","updateLocalBattle","index","localBattle","battle","battles","teamName","document","getElementById","ayo","findIndex","team","value","toUpperCase","checked","getMedalNum","pos","_jsxs","className","children","_jsx","type","inputMode","placeholder","onChange","e","Number","target","roundEven5","options","selectedIndex","filter","some","onClick","Loading","_Fragment","readOnly","formatDateToEventHighlightDate","start","end","split","line","trim","join","formatGameEntityName","formatGoldenAppleDiscordEmote","showModal","teamIndex","appendOrdinalSuffix","FaEye","FaHandshake","src","placeToCtTeamLocalMedal","placeToCtTeamMedal","totalScores","disabled","addLocalBattle","newLocalBattles","includes","deleteLocalBattle","method","placeToCtHistoryEmote"],"sourceRoot":""}