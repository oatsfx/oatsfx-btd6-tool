{"version":3,"file":"static/js/790.9c3ffd2b.chunk.js","mappings":"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","sources":["components/SelectionRow/SelectionRow.tsx","components/TileDisplay/TileDisplay.tsx","components/TileSelector/TileSelector.tsx","components/TowerDisplay/TowerDisplay.tsx","hooks/useCtData.tsx","hooks/useCtEvents.tsx","hooks/useLocalRoundData.tsx","components/TimeInput/TimeInput.tsx","pages/RaceTimeCalculator/RaceTimeCalculator.tsx","pages/RaceTimeCalculator/index.tsx","types/roundSet.ts"],"sourcesContent":["import { EventType } from \"types/events\";\r\n\r\nconst SelectionRow = ({\r\n  selectionName,\r\n  selectionId,\r\n  selections,\r\n}: {\r\n  selectionName: string;\r\n  selectionId: string;\r\n  selections: { ids: string[]; name: string; onClickFunction: () => void }[];\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      {selections.map((selection) => (\r\n        <a\r\n          className={\r\n            \"py-2 px-2 transition ease-in-out border-b bg-black hover:bg-opacity-70 hover:cursor-pointer hover:text-accent hover:border-b-2\" +\r\n            (selection.ids.includes(selectionId)\r\n              ? \" bg-black bg-opacity-30 text-primary border-b-2\"\r\n              : \" bg-opacity-0\")\r\n          }\r\n          onClick={() => {\r\n            selection.onClickFunction();\r\n          }}\r\n          key={selection.name}\r\n        >\r\n          {selection.name}\r\n        </a>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectionRow;\r\n","import {\r\n  towerImages,\r\n  mapImages,\r\n  relicImages,\r\n  tileImages,\r\n  gameTypeImages,\r\n} from \"util/formatters\";\r\nimport { Tile } from \"types/ct\";\r\n\r\nimport noSellingImage from \"images/modifiers/selling_disabled.webp\";\r\nimport noMkImage from \"images/modifiers/monkey_knowledge_disabled.webp\";\r\nimport { TowerDisplay } from \"components/TowerDisplay\";\r\nimport { convertGameTypeToString, formatGameEntityName } from \"util/converters\";\r\n\r\nconst TileDisplay = ({ tileCode, tile }: { tileCode: string; tile: Tile }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"indicator w-full flex flex-col outline outline-1 outline-white/50 rounded-xl items-center my-8 py-4 pb-6 bg-no-repeat bg-top bg-cover bg-clip-border \" +\r\n        mapImages[tile.GameData.selectedMap as keyof typeof mapImages]\r\n      }\r\n    >\r\n      <div className=\"indicator-item indicator-top indicator-center badge badge-ghost font-semibold gap-1 px-5 py-3 outline outline-1 outline-white/25\">\r\n        <img\r\n          src={\r\n            gameTypeImages[\r\n              tile.GameData.subGameType as keyof typeof gameTypeImages\r\n            ]\r\n          }\r\n          className=\"w-[16px]\"\r\n        />\r\n        {formatGameEntityName(\r\n          convertGameTypeToString(tile.GameData.subGameType)\r\n        )}\r\n      </div>\r\n      <p className=\"font-bold text-2xl text-center\">{tileCode}</p>\r\n      <p className=\"font-medium text-md text-center\">\r\n        {formatGameEntityName(tile.GameData.selectedMap as string)} //{\" \"}\r\n        {formatGameEntityName(tile.GameData.selectedDifficulty as string)}\r\n      </p>\r\n      <p className=\"text-md text-center\">\r\n        {`$${tile.GameData.dcModel.startRules.cash?.toLocaleString()} // `}{\" \"}\r\n        {`Round ${tile.GameData.dcModel.startRules.round}-${tile.GameData.dcModel.startRules.endRound}`}\r\n      </p>\r\n      <div className=\"flex flex-wrap gap-2 pt-2 justify-center items-center\">\r\n        {tile.GameData.dcModel.disableSelling ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={\"Selling Disabled\"}\r\n          >\r\n            <img src={noSellingImage} className=\"w-[34px]\" />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {tile.GameData.dcModel.disableMK ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={\"Monkey Knowledge Disabled\"}\r\n          >\r\n            <img src={noMkImage} className=\"w-[34px]\" />\r\n          </div>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        {tile.TileType === \"Relic\" ? (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={formatGameEntityName(tile.RelicType as string)}\r\n          >\r\n            <img\r\n              src={relicImages[tile.RelicType as keyof typeof relicImages]}\r\n              className=\"w-[34px]\"\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className=\"tooltip indicator before:z-50\"\r\n            data-tip={formatGameEntityName(tile.TileType as string)}\r\n          >\r\n            <img src={tileImages[tile.TileType]} className=\"w-[34px]\" />\r\n          </div>\r\n        )}\r\n      </div>\r\n      {tile.GameData.dcModel.towers._items.filter(\r\n        (x) => x.isHero && x.max !== 0\r\n      ).length ? (\r\n        <>\r\n          <div className=\"divider px-4\">\r\n            {tile.GameData.dcModel.towers._items.filter(\r\n              (x) => x.isHero && x.max !== 0\r\n            ).length >\r\n            tile.GameData.dcModel.towers._items.filter((x) => x.isHero).length /\r\n              2\r\n              ? \"Heroes Excluded\"\r\n              : \"Heroes\"}\r\n          </div>\r\n          <div className=\"flex flex-wrap gap-2 gap-y-3 justify-center\">\r\n            {tile.GameData.dcModel.towers._items.filter(\r\n              (x) => x.isHero && x.max !== 0\r\n            ).length >\r\n            tile.GameData.dcModel.towers._items.filter((x) => x.isHero).length /\r\n              2\r\n              ? tile.GameData.dcModel.towers._items\r\n                  .filter(\r\n                    (x) =>\r\n                      x.isHero && x.max === 0 && x.tower !== \"ChosenPrimaryHero\"\r\n                  )\r\n                  .map((hero) => (\r\n                    <TowerDisplay\r\n                      name={hero.tower}\r\n                      image={towerImages[hero.tower]}\r\n                      key={hero.tower}\r\n                    />\r\n                  ))\r\n              : tile.GameData.dcModel.towers._items\r\n                  .filter((x) => x.isHero && x.max !== 0)\r\n                  .map((hero) => (\r\n                    <TowerDisplay\r\n                      name={hero.tower}\r\n                      image={towerImages[hero.tower]}\r\n                      key={hero.tower}\r\n                    />\r\n                  ))}\r\n          </div>\r\n        </>\r\n      ) : null}\r\n      <div className=\"divider px-4\">Towers</div>\r\n      <div className=\"flex flex-wrap gap-2 gap-y-3 justify-center\">\r\n        {tile.GameData.dcModel.towers._items\r\n          .filter((x) => !x.isHero && x.max !== 0)\r\n          .map((tower) => (\r\n            <TowerDisplay\r\n              name={tower.tower}\r\n              image={towerImages[tower.tower]}\r\n              indicator={tower.max > 0 ? tower.max : \"∞\"}\r\n              key={tower.tower}\r\n            />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileDisplay;\r\n","import { TileDisplay } from \"components/TileDisplay\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\n\r\nimport bannerImage from \"images/ct/banner_s.webp\";\r\nimport relicImage from \"images/ct/relic_s.webp\";\r\nimport blankImage from \"images/ct/regular_s.webp\";\r\nimport { CTData, GameType, Relic, Tile, TileType } from \"types/ct\";\r\nimport { relicImages } from \"util/formatters\";\r\nimport {\r\n  formatGameEntityName,\r\n  gameTypeToSubGameTypeVal,\r\n} from \"util/converters\";\r\n\r\nconst TileSelector = ({\r\n  data,\r\n  loading,\r\n  selectedTile,\r\n  gameType,\r\n  changeTile,\r\n}: {\r\n  data: CTData;\r\n  loading: boolean;\r\n  selectedTile: string;\r\n  gameType: GameType;\r\n  changeTile: (tile: string) => void;\r\n}) => {\r\n  const [tileFilter, setTileFilter] = useState<TileType | \"All\">(\"All\");\r\n  const [filteredTileCodes, setFilteredTileCodes] = useState<{\r\n    [key: string]: Tile;\r\n  }>({});\r\n\r\n  const handleFilter = (e: any) => {\r\n    setTileFilter(e.target.value);\r\n  };\r\n\r\n  const handleSelection = (e: any) => {\r\n    const tile = e.target.value as string;\r\n    changeTile(tile);\r\n  };\r\n\r\n  const handleRelicSelection = (e: any, tile: string) => {\r\n    setTileFilter(\"Relic\");\r\n    changeTile(tile);\r\n    (document.getElementById(\"tile-select\") as HTMLSelectElement).value =\r\n      e.target.id;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filtered = Object.keys(data)\r\n      .sort()\r\n      .reduce((filtered: { [key: string]: Tile }, key) => {\r\n        if (\r\n          data[key].GameData.subGameType ===\r\n            gameTypeToSubGameTypeVal[gameType] &&\r\n          (tileFilter === \"All\" || data[key].TileType === tileFilter)\r\n        ) {\r\n          filtered[key] = data[key];\r\n        }\r\n        return filtered;\r\n      }, {});\r\n    if (!Object.keys(filtered).includes(selectedTile) && selectedTile !== \"\") {\r\n      changeTile(Object.keys(filtered).at(0) as any);\r\n    }\r\n\r\n    setFilteredTileCodes(filtered);\r\n  }, [tileFilter, data]);\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <div className=\"w-full justify-center\">\r\n        <p className=\"text-lg font-medium text-center\">Select a Tile</p>\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"flex gap-4 py-1 justify-center\">\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Banner\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"Banner\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={bannerImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Relic\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"Relic\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={relicImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"Regular\"\r\n                  className=\"radio\"\r\n                  checked={\r\n                    tileFilter === \"Regular\" ||\r\n                    tileFilter === \"TeamFirstCapture\"\r\n                  }\r\n                  onChange={handleFilter}\r\n                />\r\n                <img className=\"w-[28px] py-2\" src={blankImage} />\r\n              </label>\r\n              <label className=\"label flex-col cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"radio-1\"\r\n                  value=\"All\"\r\n                  className=\"radio\"\r\n                  checked={tileFilter === \"All\"}\r\n                  onChange={handleFilter}\r\n                />\r\n                <p className=\"text-sm py-3\">All</p>\r\n              </label>\r\n            </div>\r\n            <div className=\"flex items-center justify-center gap-6\">\r\n              <select\r\n                id=\"tile-select\"\r\n                className=\"select select-bordered w-full max-w-xs\"\r\n                onChange={handleSelection}\r\n                defaultValue={\"Select a tile\"}\r\n              >\r\n                <option disabled>Select a tile</option>\r\n                {Object.entries(filteredTileCodes).map((tileCode) => (\r\n                  <option id={tileCode[0]} key={tileCode[0]}>\r\n                    {tileCode[0]}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <details className=\"dropdown dropdown-right dropdown-center\">\r\n                <summary className=\"btn w-24\">Quick Relic</summary>\r\n                <ul className=\"p-2 shadow-xl menu dropdown-content z-[1] bg-base-100 rounded-box w-52 outline outline-white/25 outline-1\">\r\n                  {Object.entries(data).map((tile) =>\r\n                    tile[1].TileType === \"Relic\" &&\r\n                    tile[1].GameData.subGameType ===\r\n                      gameTypeToSubGameTypeVal[gameType] ? (\r\n                      <li key={tile[1].RelicType as string}>\r\n                        <a\r\n                          id={tile[0]}\r\n                          onClick={(e) => {\r\n                            handleRelicSelection(e, tile[0]);\r\n                          }}\r\n                        >\r\n                          <img\r\n                            className=\"w-[20px]\"\r\n                            src={\r\n                              relicImages[\r\n                                tile[1].RelicType as keyof typeof relicImages\r\n                              ]\r\n                            }\r\n                          />\r\n                          {formatGameEntityName(tile[1].RelicType as string)}\r\n                        </a>\r\n                      </li>\r\n                    ) : null\r\n                  )}\r\n                </ul>\r\n              </details>\r\n            </div>\r\n            {selectedTile ? (\r\n              <TileDisplay tileCode={selectedTile} tile={data[selectedTile]} />\r\n            ) : (\r\n              <p className=\"text-center\">No tile selected.</p>\r\n            )}\r\n          </>\r\n        ) : (\r\n          <div className=\"flex flex-col gap-2 w-full py-2 items-center\">\r\n            <div className=\"skeleton h-12 w-full\" />\r\n            <div className=\"skeleton h-3 w-full\" />\r\n            <div className=\"flex gap-2\">\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n              <div className=\"skeleton w-8 h-8 rounded-full shrink-0\" />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileSelector;\r\n","import { formatGameEntityName } from \"util/converters\";\r\nimport boxOfMonkeyImage from \"images/relics/box_of_monkey.webp\";\r\n\r\nconst TowerDisplay = ({\r\n  name,\r\n  image,\r\n  indicator,\r\n  boxOfMonkey,\r\n}: {\r\n  name: string;\r\n  image: string;\r\n  indicator?: string | number;\r\n  boxOfMonkey?: boolean;\r\n}) => {\r\n  return (\r\n    <div\r\n      className=\"tooltip before:z-50 before:content-[attr(data-tip)] \"\r\n      data-tip={formatGameEntityName(name)}\r\n    >\r\n      {indicator ? (\r\n        <span className=\"indicator-item indicator-bottom indicator-center badge px-2 outline outline-white/25 outline-1 rounded-[4px] font-medium shadow-lg\">\r\n          {indicator}\r\n        </span>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {boxOfMonkey ? (\r\n        <span className=\"indicator-item indicator-top font-medium shadow-lg\">\r\n          <img src={boxOfMonkeyImage} className=\"w-[24px]\" />\r\n        </span>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <div className=\"avatar\">\r\n        <div className=\"w-8 rounded-full shadow outline outline-1 outline-white/25\">\r\n          <img src={image} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TowerDisplay;\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { CTData, Tile } from \"types/ct\";\r\n\r\nexport const useCtData = (eventId: number) => {\r\n  const url =\r\n    \"https://storage.googleapis.com/btd6-ct-map/events/\" +\r\n    eventId +\r\n    \"/tiles.json\";\r\n\r\n  const [data, setData] = useState<CTData>({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: CTData = await response.json();\r\n        setData(jsonData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [eventId]);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { CTData, CTSeed, Tile } from \"types/ct\";\r\n\r\nexport const useCtEvents = () => {\r\n  const url = \"https://storage.googleapis.com/btd6-ct-map/event-seeds.json\";\r\n\r\n  const [data, setData] = useState<CTSeed[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useMemo(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: string[] = await response.json();\r\n        //jsonData.reverse();\r\n        const newData: CTSeed[] = jsonData.flatMap((x, i) =>\r\n          x ? [{ id: x, number: i }] : []\r\n        );\r\n        newData.reverse();\r\n        setData(newData);\r\n        console.log(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return { data, loading };\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Bloon, RoundSet, RoundSetDef } from \"types/roundSet\";\r\n\r\nexport const useLocalRoundData = (pos: number) => {\r\n  const [data, setData] = useState<RoundSet>({} as RoundSet);\r\n\r\n  const roundSetsDefs: RoundSetDef[] = [\r\n    { name: \"Regular\", path: \"data/OriginalRounds.json\", isComplete: true },\r\n    {\r\n      name: \"Alternate Bloons Rounds\",\r\n      path: \"data/alternateRound140.json\",\r\n      isComplete: true,\r\n    },\r\n    { name: \"Bloonarius\", path: \"data/bloonarius.json\", isComplete: true },\r\n    { name: \"Lych\", path: \"data/lych.json\", isComplete: true },\r\n    { name: \"Vortex\", path: \"data/vortex.json\", isComplete: true },\r\n    { name: \"Dreadbloon\", path: \"data/dreadbloon.json\", isComplete: true },\r\n    { name: \"Phayze\", path: \"data/phayze.json\", isComplete: true },\r\n    {\r\n      name: \"Race #291: Density Insanity\",\r\n      path: \"data/raceExperiment.json\",\r\n      isComplete: true,\r\n    },\r\n  ];\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(roundSetsDefs[pos].path);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        jsonData.rounds = jsonData.rounds.filter(\r\n          (x: any) => x.roundNumber !== 0\r\n        );\r\n        const uniqueBloons: Bloon[] = [];\r\n        for (let round of jsonData.rounds) {\r\n          for (let group of round.bloonGroups) {\r\n            if (!uniqueBloons.includes(group.bloon)) {\r\n              uniqueBloons.push(group.bloon);\r\n            }\r\n          }\r\n        }\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [pos]);\r\n\r\n  return { data, roundSetsDefs, loading };\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport raceImage from \"images/game_types/race.webp\";\r\nimport { convertMsToTimeFormat } from \"util/converters\";\r\n\r\ninterface TimeInputProps {\r\n  value: number;\r\n  onChange: (milliseconds: number) => void;\r\n}\r\n\r\nconst TimeInput = ({ value = 0, onChange }: TimeInputProps) => {\r\n  const [time, setTime] = useState(convertMsToTimeFormat(value));\r\n\r\n  useEffect(() => {\r\n    setTime(convertMsToTimeFormat(value)); // Update time when prop changes\r\n  }, [value]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTime(e.target.value);\r\n    const [min, left] = e.target.value.split(\":\");\r\n    if (!left) {\r\n      return;\r\n    }\r\n    const [sec, ms] = left.split(\".\");\r\n    if (sec.length > 2) {\r\n      return;\r\n    }\r\n    if (!ms) {\r\n      return;\r\n    }\r\n\r\n    console.log(e.target.value);\r\n\r\n    const milliseconds = ms\r\n      ? parseInt(ms, 10) * (ms.length === 1 ? 100 : ms.length === 2 ? 10 : 1)\r\n      : 0;\r\n    const seconds = sec ? parseInt(sec, 10) * (sec.length === 1 ? 10 : 1) : 0;\r\n\r\n    const rounded = Math.ceil((milliseconds % 1000) / 10) * 10;\r\n\r\n    const totalMs =\r\n      (min === null ? 0 : parseInt(min) * 60 * 1000) + seconds * 1000 + rounded;\r\n\r\n    console.log(totalMs);\r\n    onChange(totalMs);\r\n  };\r\n\r\n  const handleBlur = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const regex = /(\\d{1,2}):(\\d{1,2})\\.(\\d{1,3})/; // Matches MM:SS.MSS format\r\n    const match = e.target.value.match(regex);\r\n\r\n    console.log(e.target.value);\r\n    console.log(match);\r\n\r\n    if (!match) {\r\n      return;\r\n    }\r\n\r\n    const min = match[1];\r\n    const sec = match[2];\r\n    const ms = match[3];\r\n    console.log(`${min}:${sec}.${ms}`);\r\n\r\n    const totalMs =\r\n      parseInt(min) * 60 * 1000 + parseInt(sec) * 1000 + parseInt(ms);\r\n    console.log(totalMs);\r\n    const formattedTime = convertMsToTimeFormat(totalMs);\r\n    onChange(totalMs);\r\n  };\r\n\r\n  return (\r\n    <label className=\"input input-bordered flex items-center gap-2\">\r\n      <img src={raceImage} className=\"w-[24px]\" />\r\n      <input\r\n        type=\"text\"\r\n        value={time}\r\n        onChange={handleChange}\r\n        placeholder=\"00:00.00\"\r\n        className=\"text-xl max-w-40\"\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default TimeInput;\r\n","import raceImage from \"images/game_types/race.webp\";\r\nimport { Loading } from \"components/Loading\";\r\nimport { SelectionRow } from \"components/SelectionRow\";\r\nimport { TimeInput } from \"components/TimeInput\";\r\nimport { useLocalRoundData } from \"hooks/useLocalRoundData\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  getRoundDurationFrameMs,\r\n  getRoundDurationMs,\r\n  Round,\r\n} from \"types/roundSet\";\r\nimport { convertMsToTimeFormat } from \"util/converters\";\r\nimport { TileSelector } from \"components/TileSelector\";\r\nimport { useCtData } from \"hooks/useCtData\";\r\nimport { useCtEvents } from \"hooks/useCtEvents\";\r\n\r\nconst RaceTimeCalculator: React.FC = () => {\r\n  const [startRound, setStartRound] = useState(1);\r\n  const [endRound, setEndRound] = useState(2);\r\n  const [roundSetPos, setRoundSetPos] = useState(0);\r\n  const {\r\n    data: roundData,\r\n    roundSetsDefs: roundSets,\r\n    loading: roundLoading,\r\n  } = useLocalRoundData(roundSetPos);\r\n  const [selectedCalc, setSelectedCalc] = useState<\"goal\" | \"rtime\">(\"rtime\");\r\n  const [inputMs, setInputMs] = useState(0);\r\n  const [goalMs, setGoalMs] = useState(0);\r\n\r\n  const { data: ctEventData, loading: ctEventLoading } = useCtEvents();\r\n  const [eventNum, setEventNum] = useState<number>(ctEventData.length - 1);\r\n\r\n  const { data: ctData, loading: ctLoading } = useCtData(eventNum);\r\n  const [ctScore, setCtScore] = useState(0);\r\n  const [ctMode, setCtMode] = useState(false);\r\n  const [selectedTile, setSelectedTile] = useState(\"\");\r\n\r\n  const loading = ctLoading || roundLoading;\r\n  const SEND_DELAY_MS = 200;\r\n\r\n  const handleStartChange = (e: any) => {\r\n    const value: number = parseInt(e.target.value, 10);\r\n\r\n    if (value > roundData.rounds.length) {\r\n      setStartRound(roundData.rounds.length);\r\n    } else {\r\n      setStartRound(value);\r\n    }\r\n\r\n    // End Round management.\r\n    if (value >= endRound) {\r\n      setEndRound(value);\r\n    }\r\n  };\r\n\r\n  const handleEndChange = (e: any) => {\r\n    const value: number = parseInt(e.target.value, 10);\r\n\r\n    if (value > roundData.rounds.length) {\r\n      setEndRound(roundData.rounds.length);\r\n    } else {\r\n      setEndRound(value);\r\n    }\r\n\r\n    // Start Round management.\r\n    if (value <= startRound) {\r\n      setStartRound(value);\r\n    }\r\n  };\r\n\r\n  const changeTile = (tile: string) => {\r\n    setSelectedTile(tile);\r\n    console.log(tile);\r\n    console.log(ctData[tile]);\r\n    setEndRound(ctData[tile].GameData.dcModel.startRules.endRound);\r\n  };\r\n\r\n  const calculateTime = (start: number, end: number, delay: number): number => {\r\n    const longestRound = calculateLongestRound(start, end);\r\n    const longestRoundDuration = getRoundDurationFrameMs(longestRound);\r\n    const timeToSend = SEND_DELAY_MS * (longestRound.roundNumber - start);\r\n\r\n    const finalMs = longestRoundDuration + timeToSend + delay;\r\n\r\n    return finalMs;\r\n  };\r\n\r\n  const addDelay = (time: number, sendDelay: number) => {\r\n    //const delayFrame = Math.ceil((sendDelay * 60) / 1000) / (60 / 1000);\r\n    return time + 1000 / 60;\r\n    // return time + delayFrame + 1000 / 60;\r\n  };\r\n\r\n  const calculateLongestRound = (start: number, end: number): Round => {\r\n    return roundData.rounds\r\n      .filter((x) => x.roundNumber >= start && x.roundNumber <= end)\r\n      .reduce((longestRound, round) => {\r\n        const duration =\r\n          getRoundDurationMs(round) +\r\n          (round.roundNumber - start) * SEND_DELAY_MS;\r\n        const longestDuration =\r\n          getRoundDurationMs(longestRound) +\r\n          (longestRound.roundNumber - start) * SEND_DELAY_MS;\r\n        return longestDuration > duration ? longestRound : round;\r\n      });\r\n  };\r\n\r\n  const calculateGoalTime = (\r\n    start: number,\r\n    end: number,\r\n    goal: number,\r\n    ctTime?: number\r\n  ): number => {\r\n    const longestRound = calculateLongestRound(start, end);\r\n    const longestRoundDuration = getRoundDurationFrameMs(longestRound);\r\n    const timeToSend = SEND_DELAY_MS * (longestRound.roundNumber - start);\r\n    const finalMs = goal - (longestRoundDuration + timeToSend + 1000 / 60);\r\n\r\n    if (ctTime && ctTime > finalMs && ctMode) {\r\n      return ctTime - finalMs;\r\n    }\r\n\r\n    return finalMs < 0 ? 0 : finalMs;\r\n  };\r\n\r\n  const calcToString = () =>\r\n    selectedCalc === \"goal\" ? \"Goal Time\" : \"Race Time\";\r\n\r\n  const calculateMoreData = (goalTime: number) => {\r\n    const restOfRounds = roundData.rounds\r\n      .slice(calculateLongestRound(startRound, endRound).roundNumber, endRound)\r\n      .sort((x, y) => getRoundDurationMs(y) - getRoundDurationMs(x));\r\n\r\n    console.log(restOfRounds);\r\n\r\n    let lastRound = calculateLongestRound(startRound, endRound);\r\n\r\n    return restOfRounds.reduce((acc, round) => {\r\n      if (round.roundNumber < lastRound.roundNumber) {\r\n        return acc; // Skip this iteration (like continue)\r\n      }\r\n\r\n      const startRnd = lastRound;\r\n      const endRnd = round;\r\n      const time =\r\n        goalTime -\r\n        (getRoundDurationFrameMs(endRnd) +\r\n          (endRnd.roundNumber - startRnd.roundNumber - 1) * SEND_DELAY_MS);\r\n\r\n      console.log({\r\n        start: startRnd.roundNumber,\r\n        end: endRnd.roundNumber,\r\n        time,\r\n      });\r\n\r\n      lastRound = endRnd;\r\n\r\n      if (endRnd.roundNumber > startRnd.roundNumber) {\r\n        acc.push({ startRound: startRnd, endRound: endRnd, time: time });\r\n      }\r\n\r\n      return acc;\r\n    }, [] as { startRound: typeof lastRound; endRound: typeof lastRound; time: number }[]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!roundLoading) {\r\n      //setEndRound(80);\r\n      setEndRound(roundData.rounds.length);\r\n    }\r\n  }, [roundLoading]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center align-center justify-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Race Time Calculator\r\n      </p>\r\n\r\n      {roundLoading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div className=\"flex flex-col w-1/2 items-center justify-center align-center gap-2\">\r\n          <div className=\"flex items-center gap-2 w-3/4\">\r\n            <p className=\"w-1/2\">Round Set:</p>\r\n            <select\r\n              id=\"tile-select\"\r\n              className=\"select select-bordered w-full max-w-xs my-4\"\r\n              onChange={(e) => {\r\n                setRoundSetPos(e.target.options.selectedIndex);\r\n                console.log(roundSetPos);\r\n              }}\r\n              value={roundSets[roundSetPos].name}\r\n            >\r\n              {roundSets.map((x, i) => (\r\n                <option key={i} disabled={!x.isComplete}>\r\n                  {x.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"flex w-full items-center gap-4 pt-4\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={roundData.rounds.length}\r\n              value={startRound}\r\n              onChange={handleStartChange}\r\n              disabled={ctMode && selectedCalc === \"goal\"}\r\n              className=\"range\"\r\n            />\r\n            <label className=\"input input-bordered flex items-center gap-2\">\r\n              <input\r\n                className=\"font-medium text-lg max-w-10\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"Start\"\r\n                value={startRound}\r\n                onChange={handleStartChange}\r\n                disabled={ctMode && selectedCalc === \"goal\"}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"flex w-full items-center gap-4\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={roundData.rounds.length}\r\n              value={endRound}\r\n              onChange={handleEndChange}\r\n              disabled={ctMode && selectedCalc === \"goal\"}\r\n              className=\"range\"\r\n            />\r\n            <label className=\"input input-bordered flex items-center gap-2\">\r\n              <input\r\n                className=\"font-medium text-lg max-w-10\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"End\"\r\n                value={endRound}\r\n                onChange={handleEndChange}\r\n                disabled={ctMode && selectedCalc === \"goal\"}\r\n              />\r\n            </label>\r\n          </div>\r\n          <SelectionRow\r\n            selectionId={selectedCalc}\r\n            selectionName={calcToString()}\r\n            selections={[\r\n              {\r\n                ids: [\"rtime\"],\r\n                name: \"Race Time\",\r\n                onClickFunction: () => {\r\n                  setSelectedCalc(\"rtime\");\r\n                },\r\n              },\r\n              {\r\n                ids: [\"goal\"],\r\n                name: \"Goal Time\",\r\n                onClickFunction: () => {\r\n                  setSelectedCalc(\"goal\");\r\n                },\r\n              },\r\n            ]}\r\n          />\r\n          {selectedCalc === \"goal\" ? (\r\n            <>\r\n              <div className=\"pt-4\">\r\n                <label className=\"flex gap-4 cursor-pointer items-center\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={ctMode}\r\n                    className=\"checkbox\"\r\n                    onChange={() => setCtMode((p) => !p)}\r\n                  />\r\n                  <span className=\"label-text\">CT Mode</span>\r\n                </label>\r\n              </div>\r\n              {ctMode ? (\r\n                <TileSelector\r\n                  data={ctData}\r\n                  loading={loading}\r\n                  selectedTile={selectedTile}\r\n                  gameType=\"race\"\r\n                  changeTile={changeTile}\r\n                />\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <div className=\"flex gap-6 items-center py-4\">\r\n                <div className=\"items-center text-center\">\r\n                  <p>Time you want to achieve:</p>\r\n                  <TimeInput value={goalMs} onChange={setGoalMs} />\r\n                </div>\r\n\r\n                {ctMode ? (\r\n                  <div className=\"items-center text-center\">\r\n                    <p>Time on the CT Tile:</p>\r\n                    <TimeInput value={ctScore} onChange={setCtScore} />\r\n                  </div>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"items-center text-center py-6\">\r\n              <p>\r\n                Send from Round{\" \"}\r\n                <span className=\"text-xl font-bold\">{startRound}</span> to Round{\" \"}\r\n                <span className=\"text-xl font-bold\">\r\n                  {calculateLongestRound(startRound, endRound).roundNumber}\r\n                </span>{\" \"}\r\n                at:\r\n              </p>\r\n              <TimeInput value={inputMs} onChange={setInputMs} />\r\n            </div>\r\n          )}\r\n          <div className=\"flex flex-col gap-2 items-center outline outline-2 outline-white/50 p-4\">\r\n            {selectedCalc === \"goal\" ? (\r\n              <>\r\n                {goalMs <\r\n                addDelay(\r\n                  calculateTime(startRound, endRound, inputMs),\r\n                  inputMs\r\n                ) ? (\r\n                  <p>Not possible.</p>\r\n                ) : (\r\n                  <>\r\n                    <p className=\"text-center\">\r\n                      You need to send from Round{\" \"}\r\n                      <span className=\"text-xl font-bold\">{startRound}</span> to\r\n                      Round{\" \"}\r\n                      <span className=\"text-xl font-bold\">\r\n                        {\r\n                          calculateLongestRound(startRound, endRound)\r\n                            .roundNumber\r\n                        }\r\n                      </span>{\" \"}\r\n                      before:\r\n                    </p>\r\n                    <div className=\"text-3xl font-semibold flex items-center gap-2\">\r\n                      <img src={raceImage} className=\"h-[32px]\" />\r\n                      {convertMsToTimeFormat(\r\n                        calculateGoalTime(startRound, endRound, goalMs, ctScore)\r\n                      )}\r\n                      <img src={raceImage} className=\"h-[32px]\" />\r\n                    </div>\r\n                    <p>\r\n                      in order to get{\" \"}\r\n                      <span className=\"text-xl font-bold\">\r\n                        {convertMsToTimeFormat(goalMs)}\r\n                      </span>\r\n                      , assuming you perfect clean.\r\n                    </p>\r\n                  </>\r\n                )}\r\n              </>\r\n            ) : (\r\n              <>\r\n                <p className=\"text-center\">You will get</p>\r\n                <div className=\"text-3xl font-semibold flex items-center gap-2\">\r\n                  <img src={raceImage} className=\"h-[32px]\" />\r\n                  {convertMsToTimeFormat(\r\n                    addDelay(\r\n                      calculateTime(startRound, endRound, inputMs),\r\n                      inputMs\r\n                    )\r\n                  )}\r\n                  <img src={raceImage} className=\"h-[32px]\" />\r\n                </div>\r\n                <p>\r\n                  assuming you perfect clean Round{\" \"}\r\n                  <span className=\"text-xl font-bold\">\r\n                    {calculateLongestRound(startRound, endRound).roundNumber}\r\n                  </span>{\" \"}\r\n                  (\r\n                  <span className=\"text-lg font-medium\">\r\n                    {getRoundDurationMs(\r\n                      calculateLongestRound(startRound, endRound)\r\n                    ) / 1000}\r\n                  </span>{\" \"}\r\n                  seconds).\r\n                </p>\r\n              </>\r\n            )}\r\n          </div>\r\n          <ul className=\"list-disc items-center\">\r\n            {goalMs <\r\n            addDelay(calculateTime(startRound, endRound, inputMs), inputMs) ? (\r\n              <></>\r\n            ) : (\r\n              calculateMoreData(\r\n                selectedCalc === \"rtime\"\r\n                  ? calculateTime(startRound, endRound, inputMs)\r\n                  : goalMs\r\n              ).map((x, i) => (\r\n                <li key={i}>\r\n                  then send from Round{\" \"}\r\n                  <span className=\"text-xl font-bold\">\r\n                    {x.startRound.roundNumber}\r\n                  </span>{\" \"}\r\n                  to Round{\" \"}\r\n                  <span className=\"text-xl font-bold\">\r\n                    {x.endRound.roundNumber}\r\n                  </span>{\" \"}\r\n                  before{\" \"}\r\n                  <span className=\"text-xl font-bold\">\r\n                    {convertMsToTimeFormat(ctMode ? ctScore - x.time : x.time)}\r\n                  </span>\r\n                </li>\r\n              ))\r\n            )}\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"divider\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaceTimeCalculator;\r\n","import RaceTimeCalculator from \"./RaceTimeCalculator\";\r\nexport default RaceTimeCalculator;\r\n","export type RoundSet = {\r\n  rounds: Round[];\r\n  scale?: number;\r\n};\r\n\r\nexport type Round = {\r\n  bloonGroups: BloonGroup[];\r\n  roundNumber: number;\r\n  addToRound: boolean;\r\n};\r\n\r\nexport type BloonGroup = {\r\n  bloon: Bloon;\r\n  count: number;\r\n  start: number;\r\n  duration: number;\r\n};\r\n\r\nexport type RoundSetDef = {\r\n  name: string;\r\n  path: string;\r\n  isComplete: boolean;\r\n};\r\n\r\nexport type Bloon =\r\n  | \"Bad\"\r\n  | \"BadFortified\"\r\n  | \"Bfb\"\r\n  | \"BfbFortified\"\r\n  | \"Black\"\r\n  | \"BlackCamo\"\r\n  | \"BlackRegrow\"\r\n  | \"BlackRegrowCamo\"\r\n  | \"Blue\"\r\n  | \"BlueCamo\"\r\n  | \"BlueRegrow\"\r\n  | \"BlueRegrowCamo\"\r\n  | \"Ceramic\"\r\n  | \"CeramicCamo\"\r\n  | \"CeramicFortified\"\r\n  | \"CeramicFortifiedCamo\"\r\n  | \"CeramicRegrow\"\r\n  | \"CeramicRegrowCamo\"\r\n  | \"CeramicRegrowFortified\"\r\n  | \"CeramicRegrowFortifiedCamo\"\r\n  | \"DdtCamo\"\r\n  | \"DdtFortifiedCamo\"\r\n  | \"Green\"\r\n  | \"GreenCamo\"\r\n  | \"GreenRegrow\"\r\n  | \"GreenRegrowCamo\"\r\n  | \"Lead\"\r\n  | \"LeadCamo\"\r\n  | \"LeadFortified\"\r\n  | \"LeadFortifiedCamo\"\r\n  | \"LeadRegrow\"\r\n  | \"LeadRegrowCamo\"\r\n  | \"LeadRegrowFortified\"\r\n  | \"LeadRegrowFortifiedCamo\"\r\n  | \"Moab\"\r\n  | \"MoabFortified\"\r\n  | \"Pink\"\r\n  | \"PinkCamo\"\r\n  | \"PinkRegrow\"\r\n  | \"PinkRegrowCamo\"\r\n  | \"Purple\"\r\n  | \"PurpleCamo\"\r\n  | \"PurpleRegrow\"\r\n  | \"PurpleRegrowCamo\"\r\n  | \"Rainbow\"\r\n  | \"RainbowCamo\"\r\n  | \"RainbowRegrow\"\r\n  | \"RainbowRegrowCamo\"\r\n  | \"Red\"\r\n  | \"RedCamo\"\r\n  | \"RedRegrow\"\r\n  | \"RedRegrowCamo\"\r\n  | \"White\"\r\n  | \"WhiteCamo\"\r\n  | \"WhiteRegrow\"\r\n  | \"WhiteRegrowCamo\"\r\n  | \"Yellow\"\r\n  | \"YellowCamo\"\r\n  | \"YellowRegrow\"\r\n  | \"YellowRegrowCamo\"\r\n  | \"Zebra\"\r\n  | \"ZebraCamo\"\r\n  | \"ZebraRegrow\"\r\n  | \"ZebraRegrowCamo\"\r\n  | \"Zomg\"\r\n  | \"ZomgFortified\";\r\n\r\nexport const bloonArray: Bloon[] = [\r\n  \"Red\",\r\n  \"RedCamo\",\r\n  \"RedRegrow\",\r\n  \"RedRegrowCamo\",\r\n  \"Blue\",\r\n  \"BlueCamo\",\r\n  \"BlueRegrow\",\r\n  \"BlueRegrowCamo\",\r\n  \"Green\",\r\n  \"GreenCamo\",\r\n  \"GreenRegrow\",\r\n  \"GreenRegrowCamo\",\r\n  \"Yellow\",\r\n  \"YellowCamo\",\r\n  \"YellowRegrow\",\r\n  \"YellowRegrowCamo\",\r\n  \"Pink\",\r\n  \"PinkCamo\",\r\n  \"PinkRegrow\",\r\n  \"PinkRegrowCamo\",\r\n  \"Black\",\r\n  \"BlackCamo\",\r\n  \"BlackRegrow\",\r\n  \"BlackRegrowCamo\",\r\n  \"White\",\r\n  \"WhiteCamo\",\r\n  \"WhiteRegrow\",\r\n  \"WhiteRegrowCamo\",\r\n  \"Purple\",\r\n  \"PurpleCamo\",\r\n  \"PurpleRegrow\",\r\n  \"PurpleRegrowCamo\",\r\n  \"Zebra\",\r\n  \"ZebraCamo\",\r\n  \"ZebraRegrow\",\r\n  \"ZebraRegrowCamo\",\r\n  \"Lead\",\r\n  \"LeadCamo\",\r\n  \"LeadFortified\",\r\n  \"LeadFortifiedCamo\",\r\n  \"LeadRegrow\",\r\n  \"LeadRegrowCamo\",\r\n  \"LeadRegrowFortified\",\r\n  \"LeadRegrowFortifiedCamo\",\r\n  \"Rainbow\",\r\n  \"RainbowCamo\",\r\n  \"RainbowRegrow\",\r\n  \"RainbowRegrowCamo\",\r\n  \"Ceramic\",\r\n  \"CeramicCamo\",\r\n  \"CeramicFortified\",\r\n  \"CeramicFortifiedCamo\",\r\n  \"CeramicRegrow\",\r\n  \"CeramicRegrowCamo\",\r\n  \"CeramicRegrowFortified\",\r\n  \"CeramicRegrowFortifiedCamo\",\r\n  \"Moab\",\r\n  \"MoabFortified\",\r\n  \"Bfb\",\r\n  \"BfbFortified\",\r\n  \"Zomg\",\r\n  \"ZomgFortified\",\r\n  \"DdtCamo\",\r\n  \"DdtFortifiedCamo\",\r\n  \"Bad\",\r\n  \"BadFortified\",\r\n];\r\n\r\nexport const getRoundDurationMs = (round: Round): number => {\r\n  const rawDuration = round.bloonGroups.reduce((maxEnd, group) => {\r\n    const endTime = group.start + group.duration;\r\n    return Math.max(maxEnd, endTime);\r\n  }, 0);\r\n\r\n  return Math.round(rawDuration * 100) * 10;\r\n};\r\n\r\nexport const getRoundDurationFrameMs = (round: Round): number => {\r\n  const rawDuration = round.bloonGroups.reduce((maxEnd, group) => {\r\n    const endTime = group.start + group.duration;\r\n    return Math.max(maxEnd, endTime);\r\n  }, 0);\r\n\r\n  return (Math.ceil(rawDuration * 60) / 60) * 1000;\r\n};\r\n"],"names":["_ref","selectionName","selectionId","selections","_jsx","className","children","map","selection","ids","includes","onClick","onClickFunction","name","_tile$GameData$dcMode","tileCode","tile","_jsxs","mapImages","GameData","selectedMap","src","gameTypeImages","subGameType","formatGameEntityName","convertGameTypeToString","selectedDifficulty","concat","dcModel","startRules","cash","toLocaleString","round","endRound","disableSelling","noSellingImage","_Fragment","disableMK","noMkImage","TileType","RelicType","relicImages","tileImages","towers","_items","filter","x","isHero","max","length","tower","hero","TowerDisplay","image","towerImages","indicator","data","loading","selectedTile","gameType","changeTile","tileFilter","setTileFilter","useState","filteredTileCodes","setFilteredTileCodes","handleFilter","e","target","value","useEffect","filtered","Object","keys","sort","reduce","key","gameTypeToSubGameTypeVal","at","type","checked","onChange","bannerImage","relicImage","blankImage","id","defaultValue","disabled","entries","handleRelicSelection","document","getElementById","TileDisplay","boxOfMonkey","boxOfMonkeyImage","useCtData","eventId","url","setData","setLoading","useMemo","async","response","fetch","ok","Error","jsonData","json","console","log","error","fetchData","useCtEvents","newData","flatMap","i","number","reverse","useLocalRoundData","pos","roundSetsDefs","path","isComplete","rounds","roundNumber","uniqueBloons","group","bloonGroups","bloon","push","time","setTime","convertMsToTimeFormat","raceImage","min","left","split","sec","ms","milliseconds","parseInt","seconds","rounded","Math","ceil","totalMs","placeholder","RaceTimeCalculator","startRound","setStartRound","setEndRound","roundSetPos","setRoundSetPos","roundData","roundSets","roundLoading","selectedCalc","setSelectedCalc","inputMs","setInputMs","goalMs","setGoalMs","ctEventData","ctEventLoading","eventNum","setEventNum","ctData","ctLoading","ctScore","setCtScore","ctMode","setCtMode","setSelectedTile","SEND_DELAY_MS","handleStartChange","handleEndChange","calculateTime","start","end","delay","longestRound","calculateLongestRound","getRoundDurationFrameMs","addDelay","sendDelay","duration","getRoundDurationMs","Loading","options","selectedIndex","inputMode","SelectionRow","p","TileSelector","TimeInput","calculateGoalTime","goal","ctTime","finalMs","goalTime","restOfRounds","slice","y","lastRound","acc","startRnd","endRnd","calculateMoreData","bloonArray","rawDuration","maxEnd","endTime"],"sourceRoot":""}