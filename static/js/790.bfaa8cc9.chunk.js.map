{"version":3,"file":"static/js/790.bfaa8cc9.chunk.js","mappings":"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","sources":["components/Loading/Loading.tsx","configs/ctIds.config.ts","configs/badges.config.ts","configs/verifiedUsers.config.ts","components/Badges/Badges.tsx","hooks/useProfileData.tsx","components/ProfileModal/ProfileModal.tsx","components/LeaderboardCard/LeaderboardCard.tsx","components/SelectionRow/SelectionRow.tsx","hooks/useLeaderboard.tsx","pages/Leaderboard/index.tsx","pages/Leaderboard/Leaderboard.tsx","util/converters.ts"],"sourcesContent":["import loading from \"images/misc/loading.gif\";\r\n\r\nconst Loading = ({ size }: { size?: number }) => {\r\n  return <img src={loading} alt=\"Loading\" style={{ width: size }} />;\r\n};\r\n\r\nexport default Loading;\r\n","const ctIds = [\r\n  {\r\n    id: \"m5k2an8p\",\r\n    number: 64,\r\n  },\r\n  {\r\n    id: \"m4q6vtme\",\r\n    number: 63,\r\n  },\r\n  {\r\n    id: \"m4q6ddt7\",\r\n    number: 62,\r\n  },\r\n  {\r\n    id: \"m4adofkk\",\r\n    number: 61,\r\n  },\r\n  {\r\n    id: \"m3rvyepv\",\r\n    number: 60,\r\n  },\r\n  {\r\n    id: \"m34yd7qs\",\r\n    number: 59,\r\n  },\r\n  {\r\n    id: \"m2kwlt60\",\r\n    number: 58,\r\n  },\r\n  {\r\n    id: \"m22b3l2q\",\r\n    number: 57,\r\n  },\r\n  {\r\n    id: \"m18f2i05\",\r\n    number: 56,\r\n  },\r\n  {\r\n    id: \"m0n34q7z\",\r\n    number: 55,\r\n  },\r\n  {\r\n    id: \"m05t53n4\",\r\n    number: 54,\r\n  },\r\n  {\r\n    id: \"lzt9vnfv\",\r\n    number: 53,\r\n  },\r\n  {\r\n    id: \"lywiirac\",\r\n    number: 52,\r\n  },\r\n  {\r\n    id: \"lygltxgu\",\r\n    number: 51,\r\n  },\r\n  {\r\n    id: \"lxo2ds1k\",\r\n    number: 50,\r\n  },\r\n  {\r\n    id: \"lx9ho5f2\",\r\n    number: 49,\r\n  },\r\n  {\r\n    id: \"lwsgoq2e\",\r\n    number: 48,\r\n  },\r\n  {\r\n    id: \"lw3zptqw\",\r\n    number: 47,\r\n  },\r\n  {\r\n    id: \"lvk1it2j\",\r\n    number: 46,\r\n  },\r\n  {\r\n    id: \"luub1xz5\",\r\n    number: 45,\r\n  },\r\n  {\r\n    id: \"lug12fgd\",\r\n    number: 44,\r\n  },\r\n  {\r\n    id: \"lts2aqan\",\r\n    number: 43,\r\n  },\r\n  {\r\n    id: \"ltkys2el\",\r\n    number: 42,\r\n  },\r\n  {\r\n    id: \"lswkbyus\",\r\n    number: 41,\r\n  },\r\n  {\r\n    id: \"ls2jg6ct\",\r\n    number: 40,\r\n  },\r\n  {\r\n    id: \"lrlbwtxn\",\r\n    number: 39,\r\n  },\r\n  {\r\n    id: \"lr3uz1d8\",\r\n    number: 38,\r\n  },\r\n  {\r\n    id: \"lqa43ghl\",\r\n    number: 37,\r\n  },\r\n  {\r\n    id: \"lq63jr4t\",\r\n    number: 36,\r\n  },\r\n  {\r\n    id: \"lphkfmue\",\r\n    number: 35,\r\n  },\r\n  {\r\n    id: \"lorujl6k\",\r\n    number: 34,\r\n  },\r\n  {\r\n    id: \"lo3dbb57\",\r\n    number: 33,\r\n  },\r\n  {\r\n    id: \"lncmwv1g\",\r\n    number: 32,\r\n  },\r\n  {\r\n    id: \"lndqbo35\",\r\n    number: 31,\r\n  },\r\n  {\r\n    id: \"lmpnzhq6\",\r\n    number: 30,\r\n  },\r\n  {\r\n    id: \"lm77zack\",\r\n    number: 29,\r\n  },\r\n  {\r\n    id: \"lleh5fpm\",\r\n    number: 28,\r\n  },\r\n  {\r\n    id: \"ll1f7vl8\",\r\n    number: 27,\r\n  },\r\n  {\r\n    id: \"lkj6emus\",\r\n    number: 26,\r\n  },\r\n  {\r\n    id: \"ljxai1s8\",\r\n    number: 25,\r\n  },\r\n  {\r\n    id: \"ljetrjjf\",\r\n    number: 24,\r\n  },\r\n  {\r\n    id: \"lisaoa37\",\r\n    number: 23,\r\n  },\r\n  {\r\n    id: \"lhzbbljg\",\r\n    number: 22,\r\n  },\r\n  {\r\n    id: \"lhgt6hxj\",\r\n    number: 21,\r\n  },\r\n  {\r\n    id: \"lgzmgxif\",\r\n    number: 20,\r\n  },\r\n  {\r\n    id: \"lgli8qmt\",\r\n    number: 19,\r\n  },\r\n  {\r\n    id: \"lg1ioh3o\",\r\n    number: 18,\r\n  },\r\n  {\r\n    id: \"lfbp5rsx\",\r\n    number: 17,\r\n  },\r\n  {\r\n    id: \"lenh39dp\",\r\n    number: 16,\r\n  },\r\n  {\r\n    id: \"ledh1q44\",\r\n    number: 15,\r\n  },\r\n  {\r\n    id: \"ldkqe7g6\",\r\n    number: 14,\r\n  },\r\n  {\r\n    id: \"ld2c7egr\",\r\n    number: 13,\r\n  },\r\n  {\r\n    id: \"lcjmdijk\",\r\n    number: 12,\r\n  },\r\n  {\r\n    id: \"lbn286o5\",\r\n    number: 11,\r\n  },\r\n  {\r\n    id: \"lbei2nd1\",\r\n    number: 10,\r\n  },\r\n  {\r\n    id: \"lau3vdb5\",\r\n    number: 9,\r\n  },\r\n  {\r\n    id: \"labw9mm1\",\r\n    number: 8,\r\n  },\r\n  {\r\n    id: \"l9qakvod\",\r\n    number: 7,\r\n  },\r\n  {\r\n    id: \"l9dkq0ma\",\r\n    number: 6,\r\n  },\r\n  {\r\n    id: \"l8t9h7wa\",\r\n    number: 5,\r\n  },\r\n  {\r\n    id: \"l884uw8u\",\r\n    number: 4,\r\n  },\r\n  {\r\n    id: \"l7i90j39\",\r\n    number: 3,\r\n  },\r\n  {\r\n    id: \"l76rtr72\",\r\n    number: 2,\r\n  },\r\n  {\r\n    id: \"l6efnna0\",\r\n    number: 1,\r\n  },\r\n];\r\n\r\nexport default ctIds;\r\n","const badges = [\r\n  {\r\n    profileUrl:\r\n      \"https://data.ninjakiwi.com/btd6/users/9fbf128f8cc5fcf61c14894f5a25e5259a521fbf9743d96e\",\r\n    badgeName: \"Developer\",\r\n    badgeTip: \"Developed this site.\",\r\n  },\r\n  // {\r\n  //   profileUrl:\r\n  //     \"https://data.ninjakiwi.com/btd6/users/9fbf128f8cc5fcf61c14894f5a25e5259a521fbf9743d96e\",\r\n  //   badgeName: \"Supporter\",\r\n  //   badgeTip: \"Supported the developer.\",\r\n  // },\r\n];\r\n\r\nexport default badges;\r\n","const verifiedUsers = [\r\n  {\r\n    profileUrl:\r\n      \"https://data.ninjakiwi.com/btd6/users/9fbf128f8cc5fcf61c14894f5a25e5259a521fbf9743d96e\",\r\n    name: \"OatsFX\",\r\n  },\r\n  {\r\n    profileUrl:\r\n      \"https://data.ninjakiwi.com/btd6/users/9cb91089ddc5fea31f468c195e70b426cc0d1abe9d44da69\",\r\n    name: \"ISAB\",\r\n  },\r\n];\r\nexport default verifiedUsers;\r\n","import badges from \"configs/badges.config\";\r\nimport verifiedUsers from \"configs/verifiedUsers.config\";\r\nimport { LeaderboardEntry } from \"types/leaderboards\";\r\n\r\nconst Badges = ({ name, profileUrl }: { name: string; profileUrl: string }) => {\r\n  const matchedUser = verifiedUsers.find(\r\n    (x) => x.name.toLowerCase() === name.toLowerCase()\r\n  );\r\n\r\n  return (\r\n    <div className=\"flex gap-1\">\r\n      {badges.some((x) => x.profileUrl === profileUrl) ? (\r\n        badges\r\n          .filter((x) => x.profileUrl === profileUrl)\r\n          .map((badge) => (\r\n            <div\r\n              className=\"badge badge-neutral tooltip bg-opacity-50 badge-sm -mt-[0.3rem] pb-0.5 hover:text-accent\"\r\n              data-tip={badge.badgeTip}\r\n              key={badge.badgeName}\r\n            >\r\n              <p className=\"pointer-events-none\">{badge.badgeName}</p>\r\n            </div>\r\n          ))\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {matchedUser ? (\r\n        <div\r\n          className=\"badge badge-neutral tooltip bg-opacity-50 badge-sm -mt-[0.3rem] pb-0.5 hover:text-accent\"\r\n          data-tip={`This is ${\r\n            matchedUser.profileUrl !== profileUrl ? \"not\" : \"\"\r\n          } the real ${matchedUser.name}.`}\r\n          key={\"verify\"}\r\n        >\r\n          <p className=\"pointer-events-none\">\r\n            {matchedUser.profileUrl !== profileUrl\r\n              ? \"Impersonation\"\r\n              : \"Verified\"}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Badges;\r\n","import { useState } from \"react\";\r\nimport { GuildProfileData, PlayerProfileData } from \"types/leaderboards\";\r\n\r\nexport const useProfileData = (url: string) => {\r\n  const [data, setData] = useState<PlayerProfileData | GuildProfileData>(\r\n    {} as PlayerProfileData\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n  const [fetched, setFetched] = useState(false);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch data\");\r\n      }\r\n      const jsonData = await response.json();\r\n      console.log(url);\r\n      if (jsonData.model.name === \"_btd6userprofile\") {\r\n        setData(jsonData.body as PlayerProfileData);\r\n      } else {\r\n        setData(jsonData.body as GuildProfileData);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n    setFetched(true);\r\n  };\r\n\r\n  return { data, loading, fetchData, fetched };\r\n};\r\n","import rankImage from \"images/misc/rank.webp\";\r\nimport vetRankImage from \"images/misc/rank_veteran.webp\";\r\nimport {\r\n  PlayerProfileData,\r\n  PlayerMedal,\r\n  PlayerEventMedals,\r\n  PlayerCtMedals,\r\n  GuildProfileData,\r\n} from \"types/leaderboards\";\r\nimport { formatToUpperCase } from \"util/converters\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  raceMedalImages,\r\n  raceMedalReward,\r\n} from \"util/formatters\";\r\nimport { Loading } from \"components/Loading\";\r\nimport { Badges } from \"components/Badges\";\r\nimport { useProfileData } from \"hooks/useProfileData\";\r\n\r\nconst ProfileModal = ({\r\n  profileUrl,\r\n  fetched,\r\n  profileData,\r\n  profileLoading,\r\n  isPlayer,\r\n}: {\r\n  profileUrl: string;\r\n  fetched: boolean;\r\n  profileData: PlayerProfileData | GuildProfileData;\r\n  profileLoading: boolean;\r\n  isPlayer: boolean;\r\n}) => {\r\n  const guildData = profileData as GuildProfileData;\r\n  const playerData = profileData as PlayerProfileData;\r\n\r\n  const {\r\n    data: ownerData,\r\n    loading: ownerLoading,\r\n    fetchData,\r\n    fetched: ownerFetched,\r\n  } = useProfileData(guildData.owner);\r\n\r\n  const displayMedals = () => {\r\n    if (isPlayer) {\r\n      return (\r\n        <div className=\"indicator items-center w-full px-12 py-4 gap-2 flex-wrap\">\r\n          {Object.keys(raceMedalImages)\r\n            .filter(\r\n              (medal) =>\r\n                playerData._medalsRace[\r\n                  formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                ]! > 0\r\n            )\r\n            .map((medal) => (\r\n              <div\r\n                className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n              >\r\n                <img\r\n                  src={raceMedalImages[medal as keyof typeof raceMedalImages]}\r\n                  className=\"h-[28px]\"\r\n                />\r\n                <div className=\"indicator-item indicator-bottom indicator-center badge badge-sm bg-opacity-90\">\r\n                  {playerData._medalsRace[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ] ?? 0}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {Object.keys(bossNormalMedalImages)\r\n            .filter(\r\n              (medal) =>\r\n                playerData._medalsBoss[\r\n                  formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                ]! > 0\r\n            )\r\n            .map((medal) => (\r\n              <div\r\n                className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n              >\r\n                <img\r\n                  src={\r\n                    bossNormalMedalImages[medal as keyof typeof raceMedalImages]\r\n                  }\r\n                  className=\"h-[28px]\"\r\n                />\r\n                <div className=\"indicator-item indicator-bottom indicator-center badge badge-sm bg-opacity-90\">\r\n                  {playerData._medalsBoss[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ] ?? 0}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {Object.keys(bossEliteMedalImages)\r\n            .filter(\r\n              (medal) =>\r\n                playerData._medalsBossElite[\r\n                  formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                ]! > 0\r\n            )\r\n            .map((medal) => (\r\n              <div\r\n                className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n              >\r\n                <img\r\n                  src={\r\n                    bossEliteMedalImages[medal as keyof typeof raceMedalImages]\r\n                  }\r\n                  className=\"h-[28px]\"\r\n                />\r\n                <div className=\"indicator-item indicator-bottom indicator-center badge badge-sm bg-opacity-90\">\r\n                  {playerData._medalsBossElite[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ] ?? 0}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {Object.keys(ctPlayerMedalImages)\r\n            .filter(\r\n              (medal) =>\r\n                playerData._medalsCTGlobal[\r\n                  formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                ]! > 0\r\n            )\r\n            .map((medal) =>\r\n              playerData._medalsCTGlobal[\r\n                formatToUpperCase(medal) as keyof PlayerCtMedals\r\n              ]! > 0 ? (\r\n                <div\r\n                  className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                  data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                >\r\n                  <img\r\n                    src={\r\n                      ctPlayerMedalImages[\r\n                        medal as keyof typeof ctPlayerMedalImages\r\n                      ]\r\n                    }\r\n                    className=\"h-[28px]\"\r\n                  />\r\n                  <div className=\"indicator-item indicator-bottom indicator-center badge badge-sm bg-opacity-90\">\r\n                    {playerData._medalsCTGlobal[\r\n                      formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                    ] ?? 0}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )\r\n            )}\r\n        </div>\r\n      );\r\n    } else {\r\n      // We are displaying a team's information. Now, I wish we could display players, but NK can't do that for us...\r\n      return <i className=\"text-xs\">Nothing to see here... Literally</i>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <dialog id={`${profileUrl}`} className=\"modal\">\r\n      <div\r\n        className=\"modal-box max-w-3xl bg-top bg-no-repeat bg-contain outline outline-1 outline-white/25\"\r\n        style={{\r\n          backgroundImage: `linear-gradient(to bottom, rgba(17, 17, 23, 0), rgba(17, 17, 23, 0.5)), url(${profileData.bannerURL})`,\r\n        }}\r\n      >\r\n        <div className=\"modal-action\">\r\n          <form method=\"dialog\">\r\n            {/* if there is a button in form, it will close the modal */}\r\n            <button className=\"btn bg-opacity-80 btn-circle btn-sm outline outline-1 absolute right-6 top-6 outline-error text-error\">\r\n              X\r\n            </button>\r\n          </form>\r\n        </div>\r\n        {fetched && !profileLoading ? (\r\n          <>\r\n            <div className=\"flex gap-4 items-end pt-8\">\r\n              <img\r\n                src={isPlayer ? playerData.avatarURL : guildData.frameURL}\r\n                className=\"w-[80px] h-[80px] rounded-xs\"\r\n              />\r\n              {!isPlayer ? (\r\n                <img\r\n                  src={guildData.iconURL}\r\n                  className=\"w-[80px] h-[80px] rounded-xs absolute\"\r\n                />\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <div className=\"flex flex-col\">\r\n                <div className=\"flex gap-2 items-center\">\r\n                  <p className=\"font-bold font-btd6 text-2xl drop-shadow-[0_1.2px_1.2px_rgba(0,0,0,0.8)]\">\r\n                    {isPlayer ? playerData.displayName : guildData.name}\r\n                  </p>\r\n                  <Badges\r\n                    name={isPlayer ? playerData.displayName : guildData.name}\r\n                    profileUrl={profileUrl}\r\n                  />\r\n                </div>\r\n                {isPlayer ? (\r\n                  <div className=\"flex gap-2\">\r\n                    <div className=\"flex gap-2 tooltip\" data-tip={\"Rank\"}>\r\n                      <img\r\n                        src={rankImage}\r\n                        className=\"h-[32px] drop-shadow-xl\"\r\n                      />\r\n                      <p className=\"absolute pt-1 font-black drop-shadow-[0_1.2px_1.2px_rgba(0,0,0,0.8)] text-center w-[32px] pointer-events-none\">\r\n                        {playerData.rank}\r\n                      </p>\r\n                    </div>\r\n                    {playerData.veteranRank !== 0 ? (\r\n                      <div\r\n                        className=\"flex gap-2 tooltip\"\r\n                        data-tip={\"Veteran Rank\"}\r\n                      >\r\n                        <img\r\n                          src={vetRankImage}\r\n                          className=\"h-[32px] drop-shadow-xl\"\r\n                        />\r\n                        <p className=\"absolute pt-1 font-black drop-shadow-[0_1.2px_1.2px_rgba(0,0,0,0.8)] text-center w-[32px] pointer-events-none\">\r\n                          {playerData.veteranRank}\r\n                        </p>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"flex gap-2\"></div>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex gap-2\">\r\n                    <img className=\"h-[32px] drop-shadow-xl\" />\r\n                    <p className=\"absolute pt-1 font-black drop-shadow-[0_1.2px_1.2px_rgba(0,0,0,0.8)] text-center w-[32px]\">\r\n                      {guildData.status}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            {!isPlayer ? (\r\n              <div className=\"overflow-x-hidden w-full max-h-56 h-32 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n                <p className=\"font-semibold text-lg\">\r\n                  Players: {guildData.numMembers}\r\n                </p>\r\n                <ProfileModal\r\n                  profileUrl={guildData.owner}\r\n                  fetched={ownerFetched}\r\n                  profileData={ownerData}\r\n                  profileLoading={ownerLoading}\r\n                  isPlayer={true}\r\n                />\r\n                <button\r\n                  className=\"btn\"\r\n                  onClick={() => {\r\n                    (\r\n                      document.getElementById(\r\n                        `${guildData.owner}`\r\n                      ) as HTMLFormElement\r\n                    ).showModal();\r\n                    fetchData();\r\n                  }}\r\n                >\r\n                  View Owner\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <div className=\"overflow-x-hidden w-full max-h-56 h-56 my-2 py-4 flex flex-col items-center bg-base-200 rounded-xl\">\r\n              <p className=\"font-semibold text-lg\">Medals</p>\r\n\r\n              {displayMedals()}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"flex justify-center\">\r\n            <Loading />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <form method=\"dialog\" className=\"modal-backdrop\">\r\n        <button>close</button>\r\n      </form>\r\n    </dialog>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import leastCashImage from \"images/misc/least_cash_s.webp\";\r\nimport leastTiersImage from \"images/misc/least_tiers_s.webp\";\r\nimport ctPointsImage from \"images/ct/ct_points_s.webp\";\r\nimport {\r\n  LeaderboardEntry,\r\n  PlayerMedal,\r\n  PlayerEventMedals,\r\n  PlayerCtMedals,\r\n  PlayerProfileData,\r\n  GuildProfileData,\r\n} from \"types/leaderboards\";\r\nimport {\r\n  appendOrdinalSuffix,\r\n  convertMsToTimeFormat,\r\n  formatToUpperCase,\r\n  placeToBossEliteMedal,\r\n  placeToBossNormalMedal,\r\n  placeToCtPlayerMedal,\r\n  placeToCtTeamMedal,\r\n  placeToRaceMedal,\r\n  timeAgo,\r\n} from \"util/converters\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  raceMedalImages,\r\n  raceMedalReward,\r\n} from \"util/formatters\";\r\nimport { BossMode, Event, EventType } from \"types/events\";\r\nimport { Badges } from \"components/Badges\";\r\nimport { ProfileModal } from \"components/ProfileModal\";\r\nimport { useProfileData } from \"hooks/useProfileData\";\r\n\r\nconst LeaderboardCard = ({\r\n  entry,\r\n  index,\r\n  event,\r\n  eventType,\r\n  delta,\r\n  showDelta,\r\n  bossMode,\r\n}: {\r\n  entry: LeaderboardEntry;\r\n  index: number;\r\n  event: Event;\r\n  eventType: EventType;\r\n  delta: number;\r\n  showDelta: boolean;\r\n  bossMode: BossMode;\r\n}) => {\r\n  const isPlayer = eventType !== \"CtTeam\";\r\n\r\n  const {\r\n    data: profileData,\r\n    loading: profileLoading,\r\n    fetchData,\r\n    fetched,\r\n  } = useProfileData(entry.profile);\r\n\r\n  const guildData = profileData as GuildProfileData;\r\n  const playerData = profileData as PlayerProfileData;\r\n\r\n  const handleMainScore = () => {\r\n    let scoreString = \"\";\r\n    let image = \"\";\r\n\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        scoreString = convertMsToTimeFormat(entry.score);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        switch (entry.scoreParts[0].name) {\r\n          case \"Game Time\":\r\n            scoreString = convertMsToTimeFormat(entry.score);\r\n            break;\r\n          case \"Cash Spent\":\r\n            image = leastCashImage;\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n          case \"Tiers\":\r\n            image = leastTiersImage;\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n          default:\r\n            scoreString = entry.score.toLocaleString();\r\n            break;\r\n        }\r\n        break;\r\n      case \"CtPlayer\":\r\n      case \"CtTeam\":\r\n        image = ctPointsImage;\r\n        scoreString = entry.score.toLocaleString();\r\n        break;\r\n    }\r\n    return (\r\n      <div className=\"text-right text-lg flex gap-1 justify-end items-center font-semibold text-nowrap -mt-1 \">\r\n        <img src={image} className=\"w-[18px]\" />\r\n        <span className=\"font-btd6 drop-shadow-[0_2px_0px_rgba(0,0,0,0.4)]\">\r\n          {scoreString}\r\n        </span>\r\n        {handleDelta()}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleSecondaryScore = () => {\r\n    let scoreString = \"\";\r\n    let dataTip = \"\";\r\n    if (!entry.scoreParts) return;\r\n\r\n    switch (event.scoringType) {\r\n      case undefined:\r\n      case \"GameTime\":\r\n        scoreString = timeAgo(\r\n          event.start +\r\n            entry.scoreParts.filter(\r\n              (part) => part.name === \"Time after event start\"\r\n            )[0].score\r\n        );\r\n        dataTip = new Date(\r\n          event.start +\r\n            entry.scoreParts.filter(\r\n              (part) => part.name === \"Time after event start\"\r\n            )[0].score\r\n        ).toLocaleString();\r\n        break;\r\n      default:\r\n        scoreString = convertMsToTimeFormat(\r\n          entry.scoreParts.filter((part) => part.name === \"Game Time\")[0].score\r\n        );\r\n        dataTip = \"Game Time\";\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <span\r\n        className=\"text-right text-sm tooltip font-normal text-nowrap -mt-1 drop-shadow-[0_1px_0px_rgba(0,0,0,0.3)]\"\r\n        data-tip={dataTip}\r\n      >\r\n        {scoreString}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const handleDelta = () => {\r\n    if (!showDelta) {\r\n      return <></>;\r\n    }\r\n    let scoreString = \"\";\r\n    let isLowerBad = false;\r\n\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        scoreString = convertMsToTimeFormat(delta);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        switch (event.scoringType) {\r\n          case \"GameTime\":\r\n            scoreString = convertMsToTimeFormat(delta);\r\n            break;\r\n          case \"LeastCash\":\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n          case \"LeastTiers\":\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n          default:\r\n            scoreString = delta.toLocaleString();\r\n            break;\r\n        }\r\n        break;\r\n      case \"CtPlayer\":\r\n      case \"CtTeam\":\r\n        isLowerBad = true;\r\n        scoreString =\r\n          delta !== 0 ? (delta * -1).toLocaleString() : delta.toLocaleString();\r\n        break;\r\n    }\r\n    return (\r\n      <p\r\n        className={\r\n          \"font-semibold text-sm drop-shadow-[0_1px_0px_rgba(0,0,0,0.4)]\" +\r\n          ((isLowerBad ? delta >= 0 : delta <= 0)\r\n            ? \" text-success\"\r\n            : \" text-error\")\r\n        }\r\n      >\r\n        {delta <= 0 ? \"-\" : \"+\"}\r\n        {scoreString}\r\n      </p>\r\n    );\r\n  };\r\n\r\n  const handleMedal = () => {\r\n    let medal = \"\";\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        medal = placeToRaceMedal(index + 1, event.totalScores as number);\r\n        break;\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        if (bossMode === \"Standard\") {\r\n          medal = placeToBossNormalMedal(\r\n            index + 1,\r\n            event.totalScores_standard as number\r\n          );\r\n        } else {\r\n          medal = placeToBossEliteMedal(\r\n            index + 1,\r\n            event.totalScores_standard as number\r\n          );\r\n        }\r\n        break;\r\n      case \"CtTeam\":\r\n        medal = placeToCtTeamMedal(index + 1, event.totalScores_team as number);\r\n        break;\r\n      case \"CtPlayer\":\r\n        medal = placeToCtPlayerMedal(\r\n          index + 1,\r\n          event.totalScores_player as number\r\n        );\r\n        break;\r\n    }\r\n    return <img src={medal} className=\"w-[26px]\" />;\r\n  };\r\n\r\n  const handleDisplayMedals = () => {\r\n    switch (eventType) {\r\n      case \"Race\":\r\n        return fetched ? (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {Object.keys(raceMedalImages)\r\n              .filter(\r\n                (medal) =>\r\n                  playerData._medalsRace[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ]! > 0\r\n              )\r\n              .slice(0, 5)\r\n              .map((medal) =>\r\n                playerData._medalsRace[\r\n                  formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                ]! > 0 ? (\r\n                  <div\r\n                    className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                    data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        raceMedalImages[medal as keyof typeof raceMedalImages]\r\n                      }\r\n                      className=\"h-[28px]\"\r\n                    />\r\n                    <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                      {playerData._medalsRace[\r\n                        formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                      ] ?? 0}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <></>\r\n                )\r\n              )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n          </div>\r\n        );\r\n      case \"Boss\":\r\n      case \"Boss2\":\r\n      case \"Boss3\":\r\n      case \"Boss4\":\r\n        if (bossMode === \"Standard\") {\r\n          return fetched ? (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {Object.keys(bossNormalMedalImages)\r\n                .filter(\r\n                  (medal) =>\r\n                    playerData._medalsBoss[\r\n                      formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                    ]! > 0\r\n                )\r\n                .slice(0, 5)\r\n                .map((medal) =>\r\n                  playerData._medalsBoss[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ]! > 0 ? (\r\n                    <div\r\n                      className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                      data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                    >\r\n                      <img\r\n                        src={\r\n                          bossNormalMedalImages[\r\n                            medal as keyof typeof bossNormalMedalImages\r\n                          ]\r\n                        }\r\n                        className=\"h-[28px]\"\r\n                      />\r\n                      <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                        {playerData._medalsBoss[\r\n                          formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                        ] ?? 0}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )\r\n                )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n            </div>\r\n          );\r\n        } else {\r\n          return fetched ? (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {Object.keys(bossEliteMedalImages)\r\n                .filter(\r\n                  (medal) =>\r\n                    playerData._medalsBossElite[\r\n                      formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                    ]! > 0\r\n                )\r\n                .slice(0, 5)\r\n                .map((medal) =>\r\n                  playerData._medalsBossElite[\r\n                    formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                  ]! > 0 ? (\r\n                    <div\r\n                      className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                      data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                    >\r\n                      <img\r\n                        src={\r\n                          bossEliteMedalImages[\r\n                            medal as keyof typeof bossEliteMedalImages\r\n                          ]\r\n                        }\r\n                        className=\"h-[28px]\"\r\n                      />\r\n                      <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                        {playerData._medalsBossElite[\r\n                          formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                        ] ?? 0}\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )\r\n                )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex h-full gap-3 items-center\">\r\n              {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n            </div>\r\n          );\r\n        }\r\n      case \"CtTeam\":\r\n        return (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n          </div>\r\n        );\r\n      case \"CtPlayer\":\r\n        return fetched ? (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {Object.keys(ctPlayerMedalImages)\r\n              .filter(\r\n                (medal) =>\r\n                  playerData._medalsCTGlobal[\r\n                    formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                  ]! > 0\r\n              )\r\n              .slice(0, 5)\r\n              .map((medal) =>\r\n                playerData._medalsCTGlobal[\r\n                  formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                ]! > 0 ? (\r\n                  <div\r\n                    className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                    data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        ctPlayerMedalImages[\r\n                          medal as keyof typeof ctPlayerMedalImages\r\n                        ]\r\n                      }\r\n                      className=\"h-[28px]\"\r\n                    />\r\n                    <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                      {playerData._medalsCTGlobal[\r\n                        formatToUpperCase(medal) as keyof PlayerCtMedals\r\n                      ] ?? 0}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <></>\r\n                )\r\n              )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <div className=\"flex h-full gap-3 items-center\">\r\n            {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-1 w-5/6 items-end\">\r\n      <ProfileModal\r\n        profileUrl={entry.profile}\r\n        fetched={fetched}\r\n        profileData={profileData}\r\n        profileLoading={profileLoading}\r\n        isPlayer={isPlayer}\r\n      />\r\n      <div\r\n        key={entry.profile}\r\n        className=\"indicator w-full flex outline outline-2 outline-white/30 hover:cursor-pointer justify-between px-6 py-1 bg-center bg-cover\"\r\n        style={{\r\n          backgroundImage: fetched\r\n            ? `linear-gradient(to bottom, rgba(17, 17, 23, 0.2), rgba(17, 17, 23, 0.6)), url(${profileData.bannerURL})`\r\n            : \"linear-gradient(to bottom, rgba(17, 17, 23, 0.2), rgba(17, 17, 23, 0.6)), url(https://static-api.nkstatic.com/appdocs/4/assets/opendata/bbd8e1412f656b91db7df7aabbc1598b_TeamsBannerDeafult.png)\",\r\n        }}\r\n        onClick={() => {\r\n          (\r\n            document.getElementById(`${entry.profile}`) as HTMLFormElement\r\n          ).showModal();\r\n          fetchData();\r\n        }}\r\n      >\r\n        <div className=\"flex justify-start w-1/2\">\r\n          <div className=\"flex items-center gap-2 w-20\">\r\n            {handleMedal()}\r\n            <p className=\"font-medium\">{appendOrdinalSuffix(index + 1)}</p>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2 w-1/4\">\r\n            <img\r\n              src={\r\n                fetched\r\n                  ? isPlayer\r\n                    ? playerData.avatarURL\r\n                    : guildData.frameURL\r\n                  : isPlayer\r\n                  ? \"https://static-api.nkstatic.com/appdocs/4/assets/opendata/db32af61df5646951a18c60fe0013a31_ProfileAvatar01.png\"\r\n                  : \"https://static-api.nkstatic.com/appdocs/4/assets/opendata/4570fe44e0c89a609dd4853af7751bdb_TeamFrame1.png\"\r\n              }\r\n              className=\"w-[38px]\"\r\n            />\r\n            {!isPlayer ? (\r\n              <img src={guildData.iconURL} className=\"w-[38px] absolute\" />\r\n            ) : (\r\n              <></>\r\n            )}\r\n\r\n            <div className=\"flex flex-col flex-nowrap\">\r\n              <p className=\"[text-shadow:_0_2px_0_rgb(0_0_0)] font-semibold tracking-wider font-btd6 text-lg text-nowrap\">\r\n                {entry.displayName}\r\n              </p>\r\n              <Badges name={entry.displayName} profileUrl={entry.profile} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-between w-1/2 gap-[1.2rem]\">\r\n          {handleDisplayMedals()}\r\n\r\n          <div className=\"flex flex-col h-full w-1/4 justify-center items-end\">\r\n            {handleMainScore()}\r\n            {handleSecondaryScore()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {entry.otherPlayers?.map((player) => (\r\n        <div\r\n          key={player.profile}\r\n          className=\"indicator w-full flex outline outline-1 outline-white/30 hover:cursor-pointer justify-between px-6 py-1 bg-center bg-cover\"\r\n          style={{\r\n            backgroundImage: fetched\r\n              ? `linear-gradient(to bottom, rgba(17, 17, 23, 0.4), rgba(17, 17, 23, 1)), url(${profileData.bannerURL})`\r\n              : \"linear-gradient(to bottom, rgba(17, 17, 23, 0.2), rgba(17, 17, 23, 0.6)), url(https://static-api.nkstatic.com/appdocs/4/assets/opendata/bbd8e1412f656b91db7df7aabbc1598b_TeamsBannerDeafult.png)\",\r\n          }}\r\n          onClick={() => {\r\n            console.log(`clicked ${player.profile}`);\r\n          }}\r\n        >\r\n          <div className=\"flex justify-start w-1/2\">\r\n            <div className=\"flex items-center gap-2 w-20\"></div>\r\n\r\n            <div className=\"flex items-center gap-2 w-1/4\">\r\n              <img\r\n                src={\r\n                  fetched\r\n                    ? playerData.avatarURL\r\n                    : \"https://static-api.nkstatic.com/appdocs/4/assets/opendata/db32af61df5646951a18c60fe0013a31_ProfileAvatar01.png\"\r\n                }\r\n                className=\"w-[38px]\"\r\n              />\r\n\r\n              <div className=\"flex flex-col flex-nowrap\">\r\n                <p className=\"font-semibold text-lg text-nowrap\">\r\n                  {player.displayName}\r\n                </p>\r\n                <Badges name={player.displayName} profileUrl={player.profile} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-start w-1/2 gap-[1.2rem]\">\r\n            {fetched ? (\r\n              <div className=\"flex gap-3 items-center\">\r\n                {Object.keys(raceMedalImages)\r\n                  .filter(\r\n                    (medal) =>\r\n                      playerData._medalsRace[\r\n                        formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                      ]! > 0\r\n                  )\r\n                  .slice(0, 5)\r\n                  .map((medal) =>\r\n                    playerData._medalsRace[\r\n                      formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                    ]! > 0 ? (\r\n                      <div\r\n                        className=\"flex flex-col items-center tooltip indicator hidden lg:block\"\r\n                        data-tip={`${raceMedalReward[medal as PlayerMedal]}`}\r\n                      >\r\n                        <img\r\n                          src={\r\n                            raceMedalImages[\r\n                              medal as keyof typeof raceMedalImages\r\n                            ]\r\n                          }\r\n                          className=\"h-[28px]\"\r\n                        />\r\n                        <div className=\"indicator-item indicator-bottom indicator-center badge bg-opacity-90\">\r\n                          {playerData._medalsRace[\r\n                            formatToUpperCase(medal) as keyof PlayerEventMedals\r\n                          ] ?? 0}\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <></>\r\n                    )\r\n                  )}\r\n              </div>\r\n            ) : (\r\n              <div className=\"flex h-full gap-3 items-center\">\r\n                {/* <p className=\"text-xs\">If I had medals, they'd be here</p> */}\r\n              </div>\r\n            )}\r\n            <div className=\"flex flex-col h-full w-16 justify-center items-end\"></div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeaderboardCard;\r\n","import { EventType } from \"types/events\";\r\n\r\nconst SelectionRow = ({\r\n  selectionName,\r\n  selectionId,\r\n  selections,\r\n}: {\r\n  selectionName: string;\r\n  selectionId: string;\r\n  selections: { ids: string[]; name: string; onClickFunction: () => void }[];\r\n}) => {\r\n  return (\r\n    <div className=\"flex gap-2\">\r\n      {selections.map((selection) => (\r\n        <a\r\n          className={\r\n            \"py-2 px-2 transition ease-in-out border-b bg-black hover:bg-opacity-70 hover:cursor-pointer hover:text-accent hover:border-b-2\" +\r\n            (selection.ids.includes(selectionId)\r\n              ? \" bg-black bg-opacity-30 text-primary border-b-2\"\r\n              : \" bg-opacity-0\")\r\n          }\r\n          onClick={() => {\r\n            selection.onClickFunction();\r\n          }}\r\n          key={selection.name}\r\n        >\r\n          {selection.name}\r\n        </a>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectionRow;\r\n","import { useMemo, useState } from \"react\";\r\nimport { BossMode, EventType } from \"types/events\";\r\nimport { LeaderboardData, LeaderboardEntry } from \"types/leaderboards\";\r\nimport { Event } from \"types/events\";\r\n\r\nexport const useLeaderboard = (\r\n  eventType: EventType,\r\n  eventPos: number,\r\n  page: number,\r\n  bossMode?: BossMode\r\n) => {\r\n  const [data, setData] = useState<LeaderboardData<LeaderboardEntry[]>>(\r\n    {} as LeaderboardData<LeaderboardEntry[]>\r\n  );\r\n  const [events, setEvents] = useState<Event[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useMemo(() => {\r\n    const raceUrl = \"https://data.ninjakiwi.com/btd6/races/\";\r\n    const bossUrl = \"https://data.ninjakiwi.com/btd6/bosses/\";\r\n    const ctUrl = \"https://data.ninjakiwi.com/btd6/ct/\";\r\n\r\n    const headers: RequestInit = { mode: \"cors\" };\r\n\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(false);\r\n      try {\r\n        let response = null;\r\n        if (eventType === \"Race\") {\r\n          const racesResponse = await fetch(raceUrl);\r\n          const raceData = await racesResponse.json();\r\n          setEvents(raceData.body);\r\n\r\n          response = await fetch(\r\n            raceData.body[eventPos].leaderboard + \"?page=\" + page,\r\n            headers\r\n          );\r\n        } else if (eventType === \"Boss\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_elite_players_1 +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          } else {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_standard_players_1 +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          }\r\n        } else if (eventType === \"Boss2\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n                \"2\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          } else {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) +\r\n                \"2\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          }\r\n        } else if (eventType === \"Boss3\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n                \"3\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          } else {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) +\r\n                \"3\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          }\r\n        } else if (eventType === \"Boss4\") {\r\n          const bossesResponse = await fetch(bossUrl);\r\n          const bossData = await bossesResponse.json();\r\n          setEvents(bossData.body);\r\n\r\n          if (bossMode === \"Elite\") {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_elite_players_1.slice(0, -1) +\r\n                \"4\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          } else {\r\n            response = await fetch(\r\n              bossData.body[eventPos].leaderboard_standard_players_1.slice(\r\n                0,\r\n                -1\r\n              ) +\r\n                \"4\" +\r\n                \"?page=\" +\r\n                page,\r\n              headers\r\n            );\r\n          }\r\n        } else if (eventType === \"CtTeam\") {\r\n          const ctResponse = await fetch(ctUrl);\r\n          const ctData = await ctResponse.json();\r\n          setEvents(ctData.body);\r\n\r\n          response = await fetch(\r\n            ctData.body[eventPos].leaderboard_team + \"?page=\" + page,\r\n            headers\r\n          );\r\n        } else {\r\n          const ctResponse = await fetch(ctUrl);\r\n          const ctData = await ctResponse.json();\r\n          setEvents(ctData.body);\r\n          console.log(ctData);\r\n\r\n          response = await fetch(\r\n            ctData.body[eventPos].leaderboard_player + \"?page=\" + page,\r\n            headers\r\n          );\r\n        }\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData: LeaderboardData<LeaderboardEntry[]> =\r\n          await response.json();\r\n\r\n        if (!jsonData.success) {\r\n          throw new Error(\"Unsuccessful: \" + jsonData.error);\r\n        }\r\n\r\n        if (\r\n          eventType === \"Boss2\" ||\r\n          eventType === \"Boss3\" ||\r\n          eventType === \"Boss4\"\r\n        ) {\r\n          let nextPlayersToCheck = 0;\r\n          switch (eventType) {\r\n            case \"Boss2\":\r\n              nextPlayersToCheck = 1;\r\n              break;\r\n            case \"Boss3\":\r\n              nextPlayersToCheck = 2;\r\n              break;\r\n            case \"Boss4\":\r\n              nextPlayersToCheck = 3;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          const players: { displayName: string; profile: string }[][] = [];\r\n          const indecesToSplice: number[] = [];\r\n          for (let i = 0; i < jsonData.body.length; i++) {\r\n            const playersEntry: { displayName: string; profile: string }[] = [];\r\n            // playersEntry.push({\r\n            //   displayName: jsonData.body[i].displayName,\r\n            //   profile: jsonData.body[i].profile,\r\n            // });\r\n            const currentPlayerIndex = i;\r\n            for (\r\n              let j = currentPlayerIndex + 1;\r\n              j <= currentPlayerIndex + nextPlayersToCheck;\r\n              j++\r\n            ) {\r\n              if (j >= jsonData.body.length) {\r\n                break;\r\n              }\r\n              if (\r\n                jsonData.body[i].scoreParts[0].score ===\r\n                jsonData.body[j].scoreParts[0].score\r\n              ) {\r\n                playersEntry.push({\r\n                  displayName: jsonData.body[j].displayName,\r\n                  profile: jsonData.body[j].profile,\r\n                });\r\n                indecesToSplice.push(j);\r\n                i++;\r\n              }\r\n              players.push(playersEntry);\r\n              jsonData.body[currentPlayerIndex].otherPlayers = playersEntry;\r\n            }\r\n          }\r\n          indecesToSplice.reverse().map((x) => {\r\n            jsonData.body.splice(x, 1);\r\n          });\r\n        }\r\n\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        setError(true);\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [eventType, eventPos, page, bossMode]);\r\n\r\n  return { data, events, loading, error };\r\n};\r\n","import Leaderboard from \"./Leaderboard\";\r\nexport default Leaderboard;\r\n","import { LeaderboardCard } from \"components/LeaderboardCard\";\r\nimport { Loading } from \"components/Loading\";\r\nimport { SelectionRow } from \"components/SelectionRow\";\r\nimport ctIds from \"configs/ctIds.config\";\r\nimport { useLeaderboard } from \"hooks/useLeaderboard\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { BossMode, EventType } from \"types/events\";\r\nimport { Alert } from \"types/util\";\r\nimport { appendOrdinalSuffix, prettyEventNames } from \"util/converters\";\r\n\r\nconst Leaderboard: React.FC = () => {\r\n  const [alert, setAlert] = useState<Alert>({\r\n    alertType: \"alert\",\r\n    message: \"\",\r\n  });\r\n\r\n  const [leaderboardType, setLeaderboardType] = useState<EventType>(\"Race\");\r\n  const [eventPos, setEventPos] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [bossMode, setBossMode] = useState<BossMode>(\"Standard\");\r\n  const [firstPlaceScore, setFirstPlaceScore] = useState<number>(-1);\r\n  const [showDelta, setShowDelta] = useState(false);\r\n\r\n  const {\r\n    data: leaderboardData,\r\n    events: eventData,\r\n    loading,\r\n    error,\r\n  } = useLeaderboard(leaderboardType, eventPos, page, bossMode);\r\n\r\n  const handlePageInput = (e: any) => {\r\n    const re = /^[0-9\\b]*$/;\r\n\r\n    // if value is not blank, then test the regex\r\n    const value: string = e.target.value;\r\n\r\n    if (value === \"\" || re.test(value)) {\r\n      const numVal = Number(value) < 1 ? 1 : Number(value);\r\n      setPage(numVal);\r\n    }\r\n  };\r\n\r\n  const getTotalScores = (): number => {\r\n    switch (leaderboardType) {\r\n      case \"Boss\":\r\n        if (bossMode === \"Standard\") {\r\n          return eventData[eventPos].totalScores_standard !== undefined\r\n            ? (eventData[eventPos].totalScores_standard as number)\r\n            : 0;\r\n        } else {\r\n          return eventData[eventPos].totalScores_elite !== undefined\r\n            ? (eventData[eventPos].totalScores_elite as number)\r\n            : 0;\r\n        }\r\n      case \"CtPlayer\":\r\n        return eventData[eventPos].totalScores_player !== undefined\r\n          ? (eventData[eventPos].totalScores_player as number)\r\n          : 0;\r\n      case \"CtTeam\":\r\n        return eventData[eventPos].totalScores_team !== undefined\r\n          ? (eventData[eventPos].totalScores_team as number)\r\n          : 0;\r\n      default:\r\n        return eventData[eventPos].totalScores !== undefined\r\n          ? (eventData[eventPos].totalScores as number)\r\n          : 0;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!loading && !error && page === 1) {\r\n      setFirstPlaceScore(leaderboardData.body[0].score);\r\n    }\r\n  }, [loading]);\r\n\r\n  return (\r\n    <div className=\"flex w-full flex-col items-center gap-4\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        {prettyEventNames[leaderboardType]} Leaderboard\r\n      </p>\r\n\r\n      <div className=\"flex gap-4 w-full items-center justify-center\">\r\n        <div className=\"flex flex-col w-full gap-2 items-center\">\r\n          <SelectionRow\r\n            selectionId={leaderboardType}\r\n            selectionName={leaderboardType}\r\n            selections={[\r\n              {\r\n                ids: [\"Race\"],\r\n                name: \"Race\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"Race\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n              {\r\n                ids: [\"Boss\", \"Boss2\", \"Boss3\", \"Boss4\"],\r\n                name: \"Boss\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"Boss\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n              {\r\n                ids: [\"CtTeam\", \"CtPlayer\"],\r\n                name: \"Contested Territory\",\r\n                onClickFunction: () => {\r\n                  setLeaderboardType(\"CtTeam\");\r\n                  setEventPos(0);\r\n                  setAlert({\r\n                    alertType: \"alert\",\r\n                    message: \"\",\r\n                  });\r\n                  setPage(1);\r\n                },\r\n              },\r\n            ]}\r\n          />\r\n\r\n          {leaderboardType === \"CtTeam\" || leaderboardType === \"CtPlayer\" ? (\r\n            <SelectionRow\r\n              selectionId={leaderboardType}\r\n              selectionName={leaderboardType}\r\n              selections={[\r\n                {\r\n                  ids: [\"CtTeam\"],\r\n                  name: \"Team\",\r\n                  onClickFunction: () => {\r\n                    setLeaderboardType(\"CtTeam\");\r\n                    setPage(1);\r\n                  },\r\n                },\r\n                {\r\n                  ids: [\"CtPlayer\"],\r\n                  name: \"Player\",\r\n                  onClickFunction: () => {\r\n                    setLeaderboardType(\"CtPlayer\");\r\n                    setPage(1);\r\n                  },\r\n                },\r\n              ]}\r\n            />\r\n          ) : (\r\n            <></>\r\n          )}\r\n\r\n          {leaderboardType === \"Boss\" ||\r\n          leaderboardType === \"Boss2\" ||\r\n          leaderboardType === \"Boss3\" ||\r\n          leaderboardType === \"Boss4\" ? (\r\n            <>\r\n              <SelectionRow\r\n                selectionId={bossMode}\r\n                selectionName={bossMode}\r\n                selections={[\r\n                  {\r\n                    ids: [\"Standard\"],\r\n                    name: \"Standard\",\r\n                    onClickFunction: () => {\r\n                      setBossMode(\"Standard\");\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Elite\"],\r\n                    name: \"Elite\",\r\n                    onClickFunction: () => {\r\n                      setBossMode(\"Elite\");\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n              <SelectionRow\r\n                selectionId={leaderboardType}\r\n                selectionName={leaderboardType}\r\n                selections={[\r\n                  {\r\n                    ids: [\"Boss\"],\r\n                    name: \"Solo\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss\");\r\n                      setAlert({\r\n                        alertType: \"alert\",\r\n                        message: \"\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss2\"],\r\n                    name: \"Duo\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss2\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported by NinjaKiwi. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss3\"],\r\n                    name: \"Trio\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss3\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported by NinjaKiwi. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                  {\r\n                    ids: [\"Boss4\"],\r\n                    name: \"Quad\",\r\n                    onClickFunction: () => {\r\n                      setLeaderboardType(\"Boss4\");\r\n                      setAlert({\r\n                        alertType: \"alert-warning\",\r\n                        message:\r\n                          \"Co-op leaderboards aren't offically supported yet. Some values will be wrong, I can't fix that.\",\r\n                      });\r\n                      setPage(1);\r\n                    },\r\n                  },\r\n                ]}\r\n              />\r\n            </>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"divider divider-horizontal\" />\r\n        <div className=\"flex items-center w-full gap-4\">\r\n          <p className=\"text-nowrap\">\r\n            Select a {prettyEventNames[leaderboardType]} event:\r\n          </p>\r\n          {!loading ? (\r\n            <select\r\n              id=\"tile-select\"\r\n              className=\"select select-bordered w-full max-w-xs\"\r\n              onChange={(e) => {\r\n                console.log(e.target.options.selectedIndex);\r\n                setEventPos(e.target.options.selectedIndex);\r\n              }}\r\n              value={\r\n                eventData[eventPos].name\r\n                  ? eventData[eventPos].name\r\n                  : leaderboardType === \"CtPlayer\" ||\r\n                    leaderboardType === \"CtTeam\"\r\n                  ? `${\r\n                      ctIds.filter((x) => x.id === eventData[eventPos].id)[0]\r\n                        .number\r\n                    } (${\r\n                      ctIds.filter((x) => x.id === eventData[eventPos].id)[0].id\r\n                    })`\r\n                  : eventData[eventPos].id\r\n              }\r\n            >\r\n              {eventData.map((x, index) => (\r\n                <option key={index}>\r\n                  {x.name\r\n                    ? x.name\r\n                    : leaderboardType === \"CtPlayer\" ||\r\n                      leaderboardType === \"CtTeam\"\r\n                    ? `${ctIds.filter((a) => a.id === x.id)[0].number} (${\r\n                        ctIds.filter((a) => a.id === x.id)[0].id\r\n                      })`\r\n                    : eventData[eventPos].id}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          ) : (\r\n            <div className=\"skeleton h-12 w-full max-w-xs\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {!error ? (\r\n        <>\r\n          <div className=\"join\">\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(1)}\r\n            >\r\n              «\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev - 1)}\r\n            >\r\n              ‹\r\n            </button>\r\n            <label className=\"input join-item bg-base-200 hover:bg-base-300 flex items-center gap-2 z-50\">\r\n              {/* <img src={leastCashImage} className=\"w-[28px]\" /> */}\r\n              <input\r\n                className=\"font-medium text-lg max-w-40 text-center\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"Score\"\r\n                value={page}\r\n                onChange={handlePageInput}\r\n              />\r\n            </label>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev + 1)}\r\n            >\r\n              ›\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn btn-disabled tooltip\" +\r\n                (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(25)}\r\n              data-tip=\"I don't know the max pages for this event.\"\r\n            >\r\n              »\r\n            </button>\r\n          </div>\r\n          <label className=\"flex gap-4 cursor-pointer items-center\">\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showDelta}\r\n              className=\"checkbox\"\r\n              onChange={() => setShowDelta((prev) => !prev)}\r\n            />\r\n            <span className=\"label-text\">Show Delta</span>\r\n          </label>\r\n          {!loading ? (\r\n            <p>\r\n              Showing players{\" \"}\r\n              {appendOrdinalSuffix(\r\n                (page - 1) * leaderboardData.body.length + 1\r\n              )}\r\n              -{appendOrdinalSuffix(page * leaderboardData.body.length)} of{\" \"}\r\n              {getTotalScores().toLocaleString()} entries.\r\n            </p>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {alert.message.length > 0 ? (\r\n        <div role=\"alert\" className={\"alert w-2/3 \" + alert.alertType}>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"stroke-current shrink-0 h-6 w-6\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth=\"2\"\r\n              d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n            />\r\n          </svg>\r\n          <span>{alert.message}</span>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n\r\n      {error ? (\r\n        <p>Failed to grab data.</p>\r\n      ) : (\r\n        <>\r\n          {!loading ? (\r\n            leaderboardData.body.map((entry, index) => (\r\n              <LeaderboardCard\r\n                entry={entry}\r\n                index={index + (page - 1) * leaderboardData.body.length}\r\n                event={eventData[eventPos]}\r\n                eventType={leaderboardType}\r\n                delta={entry.score - firstPlaceScore}\r\n                showDelta={showDelta}\r\n                key={index}\r\n                bossMode={bossMode}\r\n              />\r\n            ))\r\n          ) : (\r\n            <Loading />\r\n          )}\r\n        </>\r\n      )}\r\n      {!error && !loading ? (\r\n        <>\r\n          <div className=\"join\">\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(1)}\r\n            >\r\n              «\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.prev ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev - 1)}\r\n            >\r\n              ‹\r\n            </button>\r\n            <label className=\"input join-item bg-base-200 hover:bg-base-300 flex items-center gap-2 z-50\">\r\n              {/* <img src={leastCashImage} className=\"w-[28px]\" /> */}\r\n              <input\r\n                className=\"font-medium text-lg max-w-40 text-center\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"Score\"\r\n                value={page}\r\n                onChange={handlePageInput}\r\n              />\r\n            </label>\r\n            <button\r\n              className={\r\n                \"join-item btn\" + (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage((prev) => prev + 1)}\r\n            >\r\n              ›\r\n            </button>\r\n            <button\r\n              className={\r\n                \"join-item btn btn-disabled tooltip\" +\r\n                (!leaderboardData.next ? \" btn-disabled\" : \"\")\r\n              }\r\n              onClick={() => setPage(25)}\r\n              data-tip=\"I don't know the max pages for this event.\"\r\n            >\r\n              »\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n","import { Tower } from \"types/ct\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  ctTeamMedalImages,\r\n  raceMedalImages,\r\n} from \"./formatters\";\r\nimport { EventType } from \"types/events\";\r\nimport ctIds from \"configs/ctIds.config\";\r\n\r\nexport type TowerType = \"primary\" | \"military\" | \"magic\" | \"support\" | \"hero\";\r\n\r\nexport const roundEven5 = (num: number) => {\r\n  if (num % 5 === 2.5) {\r\n    return Math.floor(num / 5) * 5;\r\n  }\r\n  return Math.round(num / 5) * 5;\r\n};\r\n\r\nexport const convertMsToTimeFormat = (ms: number): string => {\r\n  // Calculate the hours, minutes, seconds, and milliseconds\r\n  const hours = Math.floor(ms / 3600000);\r\n  const minutes = Math.floor((ms % 3600000) / 60000);\r\n  const seconds = Math.floor((ms % 60000) / 1000);\r\n  const milliseconds = Math.floor((ms % 1000) / 10); // Extract two digits of milliseconds\r\n\r\n  // Format each part to ensure two digits\r\n  const formattedHours = hours > 0 ? hours.toString().padStart(2, \"0\") : \"\";\r\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\r\n  const formattedSeconds = seconds.toString().padStart(2, \"0\");\r\n  const formattedMilliseconds = milliseconds.toString().padStart(2, \"0\");\r\n\r\n  // Combine and return the formatted string\r\n  return formattedHours\r\n    ? `${formattedHours}:${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`\r\n    : `${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`;\r\n};\r\n\r\nexport const timeAgo = (timestamp: number): string => {\r\n  const now = Date.now();\r\n  const elapsed = now - timestamp;\r\n\r\n  const msPerSecond = 1000;\r\n  const msPerMinute = msPerSecond * 60;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    const seconds = Math.floor(elapsed / msPerSecond);\r\n    return `${seconds} second${seconds !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerHour) {\r\n    const minutes = Math.floor(elapsed / msPerMinute);\r\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerDay) {\r\n    const hours = Math.floor(elapsed / msPerHour);\r\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\r\n  } else {\r\n    const days = Math.floor(elapsed / msPerDay);\r\n    return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\r\n  }\r\n};\r\n\r\nexport const formatGameEntityName = (entity: string): string => {\r\n  const wordsToExclude = [\"or\", \"the\", \"a\", \"of\"];\r\n\r\n  return entity\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space before capitals\r\n    .replace(/\\b(Or|The|A|Of)\\b/g, (match) => match.toLowerCase()); // Lowercase specific words\r\n};\r\n\r\nexport const formatToUpperCase = (entity: string): string => {\r\n  return entity\r\n    .split(\"_\")\r\n    .map((word) => {\r\n      return word.charAt(0).toUpperCase() + word.slice(1);\r\n    })\r\n    .join(\"\");\r\n};\r\n\r\nexport const placeToRaceMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return raceMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return raceMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return raceMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return raceMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return raceMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return raceMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return raceMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return raceMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return raceMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossNormalMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossNormalMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossNormalMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossNormalMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossNormalMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossNormalMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossNormalMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossNormalMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossNormalMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossNormalMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossEliteMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossEliteMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossEliteMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossEliteMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossEliteMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossEliteMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossEliteMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossEliteMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossEliteMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossEliteMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtPlayerMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place <= 25) {\r\n    return ctPlayerMedalImages.diamond;\r\n  } else if (place <= 100) {\r\n    return ctPlayerMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return ctPlayerMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return ctPlayerMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctPlayerMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return ctPlayerMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctPlayerMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtTeamMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return ctTeamMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return ctTeamMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return ctTeamMedalImages.diamond;\r\n  } else if (place <= 25) {\r\n    return ctTeamMedalImages.gold_diamond;\r\n  } else if (place <= 100) {\r\n    return ctTeamMedalImages.double_gold;\r\n  } else if (percentile <= 1) {\r\n    return ctTeamMedalImages.gold_silver;\r\n  } else if (percentile <= 10) {\r\n    return ctTeamMedalImages.double_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctTeamMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctTeamMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const appendOrdinalSuffix = (number: number): string => {\r\n  const j = number % 10;\r\n  const k = number % 100;\r\n  if (j === 1 && k !== 11) {\r\n    return number + \"st\";\r\n  }\r\n  if (j === 2 && k !== 12) {\r\n    return number + \"nd\";\r\n  }\r\n  if (j === 3 && k !== 13) {\r\n    return number + \"rd\";\r\n  }\r\n  return number + \"th\";\r\n};\r\n\r\nexport const convertGameTypeToString = (gameType: number): string => {\r\n  switch (gameType) {\r\n    case 2:\r\n      return \"Race\";\r\n    case 4:\r\n      return \"Boss\";\r\n    case 8:\r\n      return \"LeastCash\";\r\n    case 9:\r\n      return \"LeastTiers\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const towerTypes: { [key in Tower]: TowerType } = {\r\n  Alchemist: \"magic\",\r\n  BananaFarm: \"support\",\r\n  BeastHandler: \"support\",\r\n  BoomerangMonkey: \"primary\",\r\n  BombShooter: \"primary\",\r\n  DartMonkey: \"primary\",\r\n  DartlingGunner: \"military\",\r\n  Druid: \"magic\",\r\n  EngineerMonkey: \"support\",\r\n  GlueGunner: \"primary\",\r\n  HeliPilot: \"military\",\r\n  IceMonkey: \"primary\",\r\n  Mermonkey: \"magic\",\r\n  MonkeyAce: \"military\",\r\n  MonkeyBuccaneer: \"military\",\r\n  MonkeySub: \"military\",\r\n  MonkeyVillage: \"support\",\r\n  MortarMonkey: \"military\",\r\n  NinjaMonkey: \"magic\",\r\n  SniperMonkey: \"military\",\r\n  SpikeFactory: \"support\",\r\n  SuperMonkey: \"magic\",\r\n  TackShooter: \"primary\",\r\n  WizardMonkey: \"magic\",\r\n  // Heroes\r\n  AdmiralBrickell: \"hero\",\r\n  Adora: \"hero\",\r\n  Benjamin: \"hero\",\r\n  CaptainChurchill: \"hero\",\r\n  Corvus: \"hero\",\r\n  Etienne: \"hero\",\r\n  Ezili: \"hero\",\r\n  Geraldo: \"hero\",\r\n  Gwendolin: \"hero\",\r\n  ObynGreenfoot: \"hero\",\r\n  PatFusty: \"hero\",\r\n  Psi: \"hero\",\r\n  Quincy: \"hero\",\r\n  Rosalia: \"hero\",\r\n  Sauda: \"hero\",\r\n  StrikerJones: \"hero\",\r\n  ChosenPrimaryHero: \"hero\",\r\n};\r\n\r\nexport const prettyEventNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Boss\",\r\n  Boss2: \"Boss\",\r\n  Boss3: \"Boss\",\r\n  Boss4: \"Boss\",\r\n  CtPlayer: \"Contested Territory\",\r\n  CtTeam: \"Contested Territory\",\r\n};\r\n\r\nexport const prettyNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Solo\",\r\n  Boss2: \"Duo\",\r\n  Boss3: \"Trio\",\r\n  Boss4: \"Quad\",\r\n  CtPlayer: \"Player\",\r\n  CtTeam: \"Team\",\r\n};\r\n"],"names":["_ref","size","_jsx","src","loading","alt","style","width","id","number","profileUrl","badgeName","badgeTip","name","matchedUser","verifiedUsers","find","x","toLowerCase","_jsxs","className","children","badges","some","filter","map","badge","_Fragment","concat","useProfileData","url","data","setData","useState","setLoading","fetched","setFetched","fetchData","async","response","fetch","ok","Error","jsonData","json","console","log","model","body","error","ProfileModal","profileData","profileLoading","isPlayer","guildData","playerData","ownerData","ownerLoading","ownerFetched","owner","backgroundImage","bannerURL","method","avatarURL","frameURL","iconURL","displayName","Badges","rankImage","rank","veteranRank","vetRankImage","status","numMembers","onClick","document","getElementById","showModal","Object","keys","raceMedalImages","medal","_medalsRace","formatToUpperCase","_playerData$_medalsRa","raceMedalReward","bossNormalMedalImages","_medalsBoss","_playerData$_medalsBo","bossEliteMedalImages","_medalsBossElite","_playerData$_medalsBo2","ctPlayerMedalImages","_medalsCTGlobal","_playerData$_medalsCT","Loading","_entry$otherPlayers","entry","index","event","eventType","delta","showDelta","bossMode","profile","handleDelta","scoreString","isLowerBad","convertMsToTimeFormat","scoringType","toLocaleString","handleMedal","placeToRaceMedal","totalScores","placeToBossNormalMedal","totalScores_standard","placeToBossEliteMedal","placeToCtTeamMedal","totalScores_team","placeToCtPlayerMedal","totalScores_player","appendOrdinalSuffix","handleDisplayMedals","slice","handleMainScore","image","score","scoreParts","leastCashImage","leastTiersImage","ctPointsImage","handleSecondaryScore","dataTip","undefined","timeAgo","start","part","Date","otherPlayers","player","_playerData$_medalsRa2","selectionName","selectionId","selections","selection","ids","includes","onClickFunction","Leaderboard","alert","setAlert","alertType","message","leaderboardType","setLeaderboardType","eventPos","setEventPos","page","setPage","setBossMode","firstPlaceScore","setFirstPlaceScore","setShowDelta","leaderboardData","events","eventData","useLeaderboard","setEvents","setError","useMemo","bossUrl","ctUrl","headers","mode","racesResponse","raceData","leaderboard","bossesResponse","bossData","leaderboard_elite_players_1","leaderboard_standard_players_1","ctResponse","ctData","leaderboard_team","leaderboard_player","success","nextPlayersToCheck","players","indecesToSplice","i","length","playersEntry","currentPlayerIndex","j","push","reverse","splice","handlePageInput","e","value","target","test","numVal","Number","useEffect","prettyEventNames","SelectionRow","onChange","options","selectedIndex","ctIds","a","prev","type","inputMode","placeholder","next","checked","getTotalScores","totalScores_elite","role","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","LeaderboardCard","roundEven5","num","Math","floor","round","ms","hours","minutes","seconds","milliseconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","formattedMilliseconds","timestamp","elapsed","now","msPerMinute","msPerSecond","msPerHour","msPerDay","days","formatGameEntityName","entity","replace","match","split","word","charAt","toUpperCase","join","place","totalEntries","percentile","black_diamond","red_diamond","diamond","gold_diamond","double_gold","gold_silver","double_silver","silver","bronze","ctTeamMedalImages","k","convertGameTypeToString","gameType","towerTypes","Alchemist","BananaFarm","BeastHandler","BoomerangMonkey","BombShooter","DartMonkey","DartlingGunner","Druid","EngineerMonkey","GlueGunner","HeliPilot","IceMonkey","Mermonkey","MonkeyAce","MonkeyBuccaneer","MonkeySub","MonkeyVillage","MortarMonkey","NinjaMonkey","SniperMonkey","SpikeFactory","SuperMonkey","TackShooter","WizardMonkey","AdmiralBrickell","Adora","Benjamin","CaptainChurchill","Corvus","Etienne","Ezili","Geraldo","Gwendolin","ObynGreenfoot","PatFusty","Psi","Quincy","Rosalia","Sauda","StrikerJones","ChosenPrimaryHero","Race","Boss","Boss2","Boss3","Boss4","CtPlayer","CtTeam"],"sourceRoot":""}