{"version":3,"file":"static/js/941.a7cbb2b9.chunk.js","mappings":"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","sources":["hooks/useLocalRoundData.tsx","pages/RaceTimeCalculator/RaceTimeCalculator.tsx","pages/RaceTimeCalculator/index.tsx","types/roundSet.ts","util/converters.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Bloon, RoundSet, RoundSetDef } from \"types/roundSet\";\r\n\r\nexport const useLocalRoundData = (pos: number) => {\r\n  const [data, setData] = useState<RoundSet>({} as RoundSet);\r\n\r\n  const roundSetsDefs: RoundSetDef[] = [\r\n    { name: \"Regular\", path: \"data/OriginalRounds.json\", isComplete: true },\r\n    {\r\n      name: \"Alternate Bloons Rounds\",\r\n      path: \"data/alternateRound140.json\",\r\n      isComplete: true,\r\n    },\r\n    { name: \"Bloonarius\", path: \"data/bloonarius.json\", isComplete: true },\r\n    { name: \"Lych\", path: \"data/lych.json\", isComplete: true },\r\n    { name: \"Vortex\", path: \"data/vortex.json\", isComplete: true },\r\n    { name: \"Dreadbloon\", path: \"data/dreadbloon.json\", isComplete: true },\r\n    { name: \"Phayze\", path: \"data/phayze.json\", isComplete: true },\r\n    {\r\n      name: \"Race #291: Density Insanity\",\r\n      path: \"data/raceExperiment.json\",\r\n      isComplete: true,\r\n    },\r\n  ];\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(roundSetsDefs[pos].path);\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch data\");\r\n        }\r\n        const jsonData = await response.json();\r\n        jsonData.rounds = jsonData.rounds.filter(\r\n          (x: any) => x.roundNumber !== 0\r\n        );\r\n        const uniqueBloons: Bloon[] = [];\r\n        for (let round of jsonData.rounds) {\r\n          for (let group of round.bloonGroups) {\r\n            if (!uniqueBloons.includes(group.bloon)) {\r\n              uniqueBloons.push(group.bloon);\r\n            }\r\n          }\r\n        }\r\n        setData(jsonData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [pos]);\r\n\r\n  return { data, roundSetsDefs, loading };\r\n};\r\n","import { Loading } from \"components/Loading\";\r\nimport { useLocalRoundData } from \"hooks/useLocalRoundData\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  getRoundDurationFrameMs,\r\n  getRoundDurationMs,\r\n  Round,\r\n  RoundSetDef,\r\n} from \"types/roundSet\";\r\nimport { convertMsToTimeFormat } from \"util/converters\";\r\n\r\nconst RaceTimeCalculator: React.FC = () => {\r\n  const [startRound, setStartRound] = useState(1);\r\n  const [endRound, setEndRound] = useState(2);\r\n  const [roundSetPos, setRoundSetPos] = useState(0);\r\n  const {\r\n    data: roundData,\r\n    roundSetsDefs: roundSets,\r\n    loading: roundLoading,\r\n  } = useLocalRoundData(roundSetPos);\r\n\r\n  const SEND_DELAY_MS = 200;\r\n\r\n  const handleStartChange = (e: any) => {\r\n    const value: number = parseInt(e.target.value, 10);\r\n\r\n    if (value > roundData.rounds.length) {\r\n      setStartRound(roundData.rounds.length);\r\n    } else {\r\n      setStartRound(value);\r\n    }\r\n\r\n    // End Round management.\r\n    if (value >= endRound) {\r\n      setEndRound(value);\r\n    }\r\n  };\r\n\r\n  const handleEndChange = (e: any) => {\r\n    const value: number = parseInt(e.target.value, 10);\r\n\r\n    if (value > roundData.rounds.length) {\r\n      setEndRound(roundData.rounds.length);\r\n    } else {\r\n      setEndRound(value);\r\n    }\r\n\r\n    // Start Round management.\r\n    if (value <= startRound) {\r\n      setStartRound(value);\r\n    }\r\n  };\r\n\r\n  const calculateTime = (start: number, end: number): number => {\r\n    let longestRoundCalc = calculateLongestRound(start, end);\r\n    const longestRoundDuration = getRoundDurationFrameMs(longestRoundCalc);\r\n    const longestRoundTimeSentAt =\r\n      SEND_DELAY_MS * (longestRoundCalc.roundNumber - start);\r\n    return Math.ceil(longestRoundTimeSentAt + longestRoundDuration + 1000 / 60);\r\n  };\r\n\r\n  const calculateLongestRound = (start: number, end: number): Round => {\r\n    return roundData.rounds\r\n      .filter((x) => x.roundNumber >= start && x.roundNumber <= end)\r\n      .reduce((longestRound, round) => {\r\n        const duration =\r\n          getRoundDurationMs(round) +\r\n          (round.roundNumber - start) * SEND_DELAY_MS;\r\n        const longestDuration =\r\n          getRoundDurationMs(longestRound) +\r\n          (longestRound.roundNumber - start) * SEND_DELAY_MS;\r\n        return longestDuration > duration ? longestRound : round;\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!roundLoading) {\r\n      //setEndRound(80);\r\n      setEndRound(roundData.rounds.length);\r\n    }\r\n  }, [roundLoading]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center align-center justify-center\">\r\n      <p className=\"font-bold text-2xl py-2 font-display tracking-tighter text-accent\">\r\n        Race Time Calculator\r\n      </p>\r\n\r\n      {roundLoading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div className=\"flex flex-col w-1/2 items-center justify-center align-center gap-2\">\r\n          <select\r\n            id=\"tile-select\"\r\n            className=\"select select-bordered w-full max-w-xs\"\r\n            onChange={(e) => {\r\n              setRoundSetPos(e.target.options.selectedIndex);\r\n              console.log(roundSetPos);\r\n            }}\r\n            value={roundSets[roundSetPos].name}\r\n          >\r\n            {roundSets.map((x, i) => (\r\n              <option key={i} disabled={!x.isComplete}>\r\n                {x.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <div className=\"flex w-full items-center gap-4\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={roundData.rounds.length}\r\n              value={startRound}\r\n              onChange={handleStartChange}\r\n              className=\"range\"\r\n            />\r\n            <label className=\"input input-bordered flex items-center gap-2\">\r\n              <input\r\n                className=\"font-medium text-lg max-w-10\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"Start\"\r\n                value={startRound}\r\n                onChange={handleStartChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"flex w-full items-center gap-4\">\r\n            <input\r\n              type=\"range\"\r\n              min={1}\r\n              max={roundData.rounds.length}\r\n              value={endRound}\r\n              onChange={handleEndChange}\r\n              className=\"range\"\r\n            />\r\n            <label className=\"input input-bordered flex items-center gap-2\">\r\n              <input\r\n                className=\"font-medium text-lg max-w-10\"\r\n                type=\"text\"\r\n                inputMode=\"numeric\"\r\n                placeholder=\"End\"\r\n                value={endRound}\r\n                onChange={handleEndChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <p className=\"text-lg font-medium text-center\">\r\n            Result:\r\n            <br />\r\n            <span className=\"text-3xl font-semibold\">\r\n              {convertMsToTimeFormat(calculateTime(startRound, endRound))}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            assuming you perfect clean Round{\" \"}\r\n            {calculateLongestRound(startRound, endRound).roundNumber} (\r\n            {getRoundDurationMs(calculateLongestRound(startRound, endRound)) /\r\n              1000}{\" \"}\r\n            seconds).\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"divider font-display pt-[15rem]\">FAQ</div>\r\n      <div className=\"w-2/3 flex flex-col gap-3\">\r\n        <p className=\"text-center\">\r\n          Q: What is \"min time\"?\r\n          <br />\r\n          <span className=\"font-semibold\">\r\n            A: \"Min time\" is the lowest possible score on a race, that's what\r\n            we're calculating. Any score lower than the \"min time\" is impossible\r\n            to achieve legitimately.\r\n          </span>\r\n        </p>\r\n        <p className=\"text-center\">\r\n          Q: What is a \"perfect clean\"?\r\n          <br />\r\n          <span className=\"font-semibold\">\r\n            A: A \"perfect clean\" is when the last bloon is popped as it spawns\r\n            -- which is the short answer.\r\n          </span>\r\n        </p>\r\n      </div>\r\n\r\n      {/* <div className=\"divider font-display\">Notes</div>\r\n      <p className=\"text-center w-2/3\">\r\n        The math behind this is simple:\r\n        <br />\r\n        LONGEST_ROUND_DURATION + (END_ROUND - START_ROUND) * SEND_DELAY\r\n        <br />\r\n        The send delay is a constant and is currently 200 milliseconds, as it is\r\n        in-game.\r\n        <br />\r\n        There is an interesting mechanic with timing and durations with specific\r\n        rounds that adds an extra 10 or 30 milliseconds to the time. I do not\r\n        yet understand how that is created in the game.\r\n      </p> */}\r\n\r\n      <div className=\"divider\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaceTimeCalculator;\r\n","import RaceTimeCalculator from \"./RaceTimeCalculator\";\r\nexport default RaceTimeCalculator;\r\n","export type RoundSet = {\r\n  rounds: Round[];\r\n  scale?: number;\r\n};\r\n\r\nexport type Round = {\r\n  bloonGroups: BloonGroup[];\r\n  roundNumber: number;\r\n  addToRound: boolean;\r\n};\r\n\r\nexport type BloonGroup = {\r\n  bloon: Bloon;\r\n  count: number;\r\n  start: number;\r\n  duration: number;\r\n};\r\n\r\nexport type RoundSetDef = {\r\n  name: string;\r\n  path: string;\r\n  isComplete: boolean;\r\n};\r\n\r\nexport type Bloon =\r\n  | \"Bad\"\r\n  | \"BadFortified\"\r\n  | \"Bfb\"\r\n  | \"BfbFortified\"\r\n  | \"Black\"\r\n  | \"BlackCamo\"\r\n  | \"BlackRegrow\"\r\n  | \"BlackRegrowCamo\"\r\n  | \"Blue\"\r\n  | \"BlueCamo\"\r\n  | \"BlueRegrow\"\r\n  | \"BlueRegrowCamo\"\r\n  | \"Ceramic\"\r\n  | \"CeramicCamo\"\r\n  | \"CeramicFortified\"\r\n  | \"CeramicFortifiedCamo\"\r\n  | \"CeramicRegrow\"\r\n  | \"CeramicRegrowCamo\"\r\n  | \"CeramicRegrowFortified\"\r\n  | \"CeramicRegrowFortifiedCamo\"\r\n  | \"DdtCamo\"\r\n  | \"DdtFortifiedCamo\"\r\n  | \"Green\"\r\n  | \"GreenCamo\"\r\n  | \"GreenRegrow\"\r\n  | \"GreenRegrowCamo\"\r\n  | \"Lead\"\r\n  | \"LeadCamo\"\r\n  | \"LeadFortified\"\r\n  | \"LeadFortifiedCamo\"\r\n  | \"LeadRegrow\"\r\n  | \"LeadRegrowCamo\"\r\n  | \"LeadRegrowFortified\"\r\n  | \"LeadRegrowFortifiedCamo\"\r\n  | \"Moab\"\r\n  | \"MoabFortified\"\r\n  | \"Pink\"\r\n  | \"PinkCamo\"\r\n  | \"PinkRegrow\"\r\n  | \"PinkRegrowCamo\"\r\n  | \"Purple\"\r\n  | \"PurpleCamo\"\r\n  | \"PurpleRegrow\"\r\n  | \"PurpleRegrowCamo\"\r\n  | \"Rainbow\"\r\n  | \"RainbowCamo\"\r\n  | \"RainbowRegrow\"\r\n  | \"RainbowRegrowCamo\"\r\n  | \"Red\"\r\n  | \"RedCamo\"\r\n  | \"RedRegrow\"\r\n  | \"RedRegrowCamo\"\r\n  | \"White\"\r\n  | \"WhiteCamo\"\r\n  | \"WhiteRegrow\"\r\n  | \"WhiteRegrowCamo\"\r\n  | \"Yellow\"\r\n  | \"YellowCamo\"\r\n  | \"YellowRegrow\"\r\n  | \"YellowRegrowCamo\"\r\n  | \"Zebra\"\r\n  | \"ZebraCamo\"\r\n  | \"ZebraRegrow\"\r\n  | \"ZebraRegrowCamo\"\r\n  | \"Zomg\"\r\n  | \"ZomgFortified\";\r\n\r\nexport const bloonArray: Bloon[] = [\r\n  \"Red\",\r\n  \"RedCamo\",\r\n  \"RedRegrow\",\r\n  \"RedRegrowCamo\",\r\n  \"Blue\",\r\n  \"BlueCamo\",\r\n  \"BlueRegrow\",\r\n  \"BlueRegrowCamo\",\r\n  \"Green\",\r\n  \"GreenCamo\",\r\n  \"GreenRegrow\",\r\n  \"GreenRegrowCamo\",\r\n  \"Yellow\",\r\n  \"YellowCamo\",\r\n  \"YellowRegrow\",\r\n  \"YellowRegrowCamo\",\r\n  \"Pink\",\r\n  \"PinkCamo\",\r\n  \"PinkRegrow\",\r\n  \"PinkRegrowCamo\",\r\n  \"Black\",\r\n  \"BlackCamo\",\r\n  \"BlackRegrow\",\r\n  \"BlackRegrowCamo\",\r\n  \"White\",\r\n  \"WhiteCamo\",\r\n  \"WhiteRegrow\",\r\n  \"WhiteRegrowCamo\",\r\n  \"Purple\",\r\n  \"PurpleCamo\",\r\n  \"PurpleRegrow\",\r\n  \"PurpleRegrowCamo\",\r\n  \"Zebra\",\r\n  \"ZebraCamo\",\r\n  \"ZebraRegrow\",\r\n  \"ZebraRegrowCamo\",\r\n  \"Lead\",\r\n  \"LeadCamo\",\r\n  \"LeadFortified\",\r\n  \"LeadFortifiedCamo\",\r\n  \"LeadRegrow\",\r\n  \"LeadRegrowCamo\",\r\n  \"LeadRegrowFortified\",\r\n  \"LeadRegrowFortifiedCamo\",\r\n  \"Rainbow\",\r\n  \"RainbowCamo\",\r\n  \"RainbowRegrow\",\r\n  \"RainbowRegrowCamo\",\r\n  \"Ceramic\",\r\n  \"CeramicCamo\",\r\n  \"CeramicFortified\",\r\n  \"CeramicFortifiedCamo\",\r\n  \"CeramicRegrow\",\r\n  \"CeramicRegrowCamo\",\r\n  \"CeramicRegrowFortified\",\r\n  \"CeramicRegrowFortifiedCamo\",\r\n  \"Moab\",\r\n  \"MoabFortified\",\r\n  \"Bfb\",\r\n  \"BfbFortified\",\r\n  \"Zomg\",\r\n  \"ZomgFortified\",\r\n  \"DdtCamo\",\r\n  \"DdtFortifiedCamo\",\r\n  \"Bad\",\r\n  \"BadFortified\",\r\n];\r\n\r\nexport const getRoundDurationMs = (round: Round): number => {\r\n  const rawDuration = round.bloonGroups.reduce((maxEnd, group) => {\r\n    const endTime = group.start + group.duration;\r\n    return Math.max(maxEnd, endTime);\r\n  }, 0);\r\n\r\n  return Math.round(rawDuration * 100) * 10;\r\n};\r\n\r\nexport const getRoundDurationFrameMs = (round: Round): number => {\r\n  const rawDuration = round.bloonGroups.reduce((maxEnd, group) => {\r\n    const endTime = group.start + group.duration;\r\n    return Math.max(maxEnd, endTime);\r\n  }, 0);\r\n\r\n  return (Math.ceil(rawDuration * 60) / 60) * 1000;\r\n};\r\n","import { Relic, Tower } from \"types/ct\";\r\nimport {\r\n  bossEliteMedalImages,\r\n  bossNormalMedalImages,\r\n  ctPlayerMedalImages,\r\n  ctTeamLocalMedalImages,\r\n  ctTeamMedalImages,\r\n  raceMedalImages,\r\n} from \"./formatters\";\r\nimport { EventType } from \"types/events\";\r\nimport ctIds from \"configs/ctIds.config\";\r\n\r\nexport type TowerType = \"primary\" | \"military\" | \"magic\" | \"support\" | \"hero\";\r\n\r\nexport const roundEven5 = (num: number) => {\r\n  if (num % 5 === 2.5) {\r\n    return Math.floor(num / 5) * 5;\r\n  }\r\n  return Math.round(num / 5) * 5;\r\n};\r\n\r\nexport const convertMsToTimeFormat = (ms: number): string => {\r\n  // Calculate the hours, minutes, seconds, and milliseconds\r\n  const hours = Math.floor(ms / 3600000);\r\n  const minutes = Math.floor((ms % 3600000) / 60000);\r\n  const seconds = Math.floor((ms % 60000) / 1000);\r\n  const milliseconds = Math.floor((ms % 1000) / 10); // Extract two digits of milliseconds\r\n\r\n  // Format each part to ensure two digits\r\n  const formattedHours = hours > 0 ? hours.toString().padStart(2, \"0\") : \"\";\r\n  const formattedMinutes = minutes.toString().padStart(2, \"0\");\r\n  const formattedSeconds = seconds.toString().padStart(2, \"0\");\r\n  const formattedMilliseconds = milliseconds.toString().padStart(2, \"0\");\r\n\r\n  // Combine and return the formatted string\r\n  return formattedHours\r\n    ? `${formattedHours}:${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`\r\n    : `${formattedMinutes}:${formattedSeconds}.${formattedMilliseconds}`;\r\n};\r\n\r\nexport const timeAgo = (timestamp: number): string => {\r\n  const now = Date.now();\r\n  const elapsed = now - timestamp;\r\n\r\n  const msPerSecond = 1000;\r\n  const msPerMinute = msPerSecond * 60;\r\n  const msPerHour = msPerMinute * 60;\r\n  const msPerDay = msPerHour * 24;\r\n\r\n  if (elapsed < msPerMinute) {\r\n    const seconds = Math.floor(elapsed / msPerSecond);\r\n    return `${seconds} second${seconds !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerHour) {\r\n    const minutes = Math.floor(elapsed / msPerMinute);\r\n    return `${minutes} minute${minutes !== 1 ? \"s\" : \"\"} ago`;\r\n  } else if (elapsed < msPerDay) {\r\n    const hours = Math.floor(elapsed / msPerHour);\r\n    return `${hours} hour${hours !== 1 ? \"s\" : \"\"} ago`;\r\n  } else {\r\n    const days = Math.floor(elapsed / msPerDay);\r\n    return `${days} day${days !== 1 ? \"s\" : \"\"} ago`;\r\n  }\r\n};\r\n\r\nexport const formatGameEntityName = (entity: string): string => {\r\n  const wordsToExclude = [\"or\", \"the\", \"a\", \"of\"];\r\n\r\n  return entity\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space before capitals\r\n    .replace(/\\b(Or|The|A|Of)\\b/g, (match) => match.toLowerCase()); // Lowercase specific words\r\n};\r\n\r\nexport const formatGoldenAppleDiscordEmote = (relic: Relic): string => {\r\n  return `:z_${relic}:`;\r\n};\r\n\r\nexport const formatToUpperCase = (entity: string): string => {\r\n  return entity\r\n    .split(\"_\")\r\n    .map((word) => {\r\n      return word.charAt(0).toUpperCase() + word.slice(1);\r\n    })\r\n    .join(\"\");\r\n};\r\n\r\nexport const placeToRaceMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  if (place < 1) {\r\n    return \"\";\r\n  }\r\n\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return raceMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return raceMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return raceMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return raceMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return raceMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return raceMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return raceMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return raceMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return raceMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossNormalMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  if (place < 1) {\r\n    return \"\";\r\n  }\r\n\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossNormalMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossNormalMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossNormalMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossNormalMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossNormalMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossNormalMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossNormalMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossNormalMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossNormalMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToBossEliteMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  if (place < 1) {\r\n    return \"\";\r\n  }\r\n\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return bossEliteMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return bossEliteMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return bossEliteMedalImages.diamond;\r\n  } else if (place <= 50) {\r\n    return bossEliteMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return bossEliteMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return bossEliteMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return bossEliteMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return bossEliteMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return bossEliteMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtPlayerMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  if (place < 1) {\r\n    return \"\";\r\n  }\r\n\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place <= 25) {\r\n    return ctPlayerMedalImages.diamond;\r\n  } else if (place <= 100) {\r\n    return ctPlayerMedalImages.gold_diamond;\r\n  } else if (percentile <= 1) {\r\n    return ctPlayerMedalImages.double_gold;\r\n  } else if (percentile <= 10) {\r\n    return ctPlayerMedalImages.gold_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctPlayerMedalImages.double_silver;\r\n  } else if (percentile <= 50) {\r\n    return ctPlayerMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctPlayerMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtTeamMedal = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  if (place < 1) {\r\n    return \"\";\r\n  }\r\n\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return ctTeamMedalImages.black_diamond;\r\n  } else if (place === 2) {\r\n    return ctTeamMedalImages.red_diamond;\r\n  } else if (place === 3) {\r\n    return ctTeamMedalImages.diamond;\r\n  } else if (place <= 25) {\r\n    return ctTeamMedalImages.gold_diamond;\r\n  } else if (place <= 100) {\r\n    return ctTeamMedalImages.double_gold;\r\n  } else if (percentile <= 1) {\r\n    return ctTeamMedalImages.gold_silver;\r\n  } else if (percentile <= 10) {\r\n    return ctTeamMedalImages.double_silver;\r\n  } else if (percentile <= 25) {\r\n    return ctTeamMedalImages.silver;\r\n  } else if (percentile <= 75) {\r\n    return ctTeamMedalImages.bronze;\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtHistoryEmote = (\r\n  place: number,\r\n  totalEntries: number\r\n): string => {\r\n  const percentile = (place / totalEntries) * 100;\r\n\r\n  if (place === 1) {\r\n    return \":GT1:\";\r\n  } else if (place === 2) {\r\n    return \":GT2:\";\r\n  } else if (place === 3) {\r\n    return \":GT3:\";\r\n  } else if (place <= 25) {\r\n    return \":GT25\";\r\n  } else if (place <= 100) {\r\n    return \":GT100:\";\r\n  } else {\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const placeToCtTeamLocalMedal = (place: number) => {\r\n  switch (place) {\r\n    case 1:\r\n      return ctTeamLocalMedalImages.diamond;\r\n    case 2:\r\n      return ctTeamLocalMedalImages.double_gold;\r\n    case 3:\r\n      return ctTeamLocalMedalImages.silver;\r\n    case 4:\r\n      return ctTeamLocalMedalImages.bronze;\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const appendOrdinalSuffix = (number: number): string => {\r\n  const j = number % 10;\r\n  const k = number % 100;\r\n  if (j === 1 && k !== 11) {\r\n    return number + \"st\";\r\n  }\r\n  if (j === 2 && k !== 12) {\r\n    return number + \"nd\";\r\n  }\r\n  if (j === 3 && k !== 13) {\r\n    return number + \"rd\";\r\n  }\r\n  return number + \"th\";\r\n};\r\n\r\nexport const convertGameTypeToString = (gameType: number): string => {\r\n  switch (gameType) {\r\n    case 2:\r\n      return \"Race\";\r\n    case 4:\r\n      return \"Boss\";\r\n    case 8:\r\n      return \"LeastCash\";\r\n    case 9:\r\n      return \"LeastTiers\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const formatEpochToReadableDate = (epochMs: number): string => {\r\n  const date = new Date(epochMs);\r\n  return date.toLocaleDateString(\"en-US\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n};\r\n\r\nexport const formatDateToEventHighlightDate = (epochMs: number): string => {\r\n  const date = new Date(epochMs);\r\n  const day = date.getUTCDate();\r\n  const month = date.toLocaleString(\"en-US\", {\r\n    month: \"long\",\r\n    timeZone: \"UTC\",\r\n  });\r\n  const year = date.getUTCFullYear();\r\n  return `${appendOrdinalSuffix(day)} ${month} ${year}`;\r\n};\r\n\r\nexport const towerTypes: { [key in Tower]: TowerType } = {\r\n  Alchemist: \"magic\",\r\n  BananaFarm: \"support\",\r\n  BeastHandler: \"support\",\r\n  BoomerangMonkey: \"primary\",\r\n  BombShooter: \"primary\",\r\n  DartMonkey: \"primary\",\r\n  DartlingGunner: \"military\",\r\n  Druid: \"magic\",\r\n  EngineerMonkey: \"support\",\r\n  GlueGunner: \"primary\",\r\n  HeliPilot: \"military\",\r\n  IceMonkey: \"primary\",\r\n  Mermonkey: \"magic\",\r\n  MonkeyAce: \"military\",\r\n  MonkeyBuccaneer: \"military\",\r\n  MonkeySub: \"military\",\r\n  MonkeyVillage: \"support\",\r\n  MortarMonkey: \"military\",\r\n  NinjaMonkey: \"magic\",\r\n  SniperMonkey: \"military\",\r\n  SpikeFactory: \"support\",\r\n  SuperMonkey: \"magic\",\r\n  TackShooter: \"primary\",\r\n  WizardMonkey: \"magic\",\r\n  // Heroes\r\n  AdmiralBrickell: \"hero\",\r\n  Adora: \"hero\",\r\n  Benjamin: \"hero\",\r\n  CaptainChurchill: \"hero\",\r\n  Corvus: \"hero\",\r\n  Etienne: \"hero\",\r\n  Ezili: \"hero\",\r\n  Geraldo: \"hero\",\r\n  Gwendolin: \"hero\",\r\n  ObynGreenfoot: \"hero\",\r\n  PatFusty: \"hero\",\r\n  Psi: \"hero\",\r\n  Quincy: \"hero\",\r\n  Rosalia: \"hero\",\r\n  Sauda: \"hero\",\r\n  StrikerJones: \"hero\",\r\n  ChosenPrimaryHero: \"hero\",\r\n};\r\n\r\nexport const prettyEventNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Boss\",\r\n  Boss2: \"Boss\",\r\n  Boss3: \"Boss\",\r\n  Boss4: \"Boss\",\r\n  CtPlayer: \"Contested Territory\",\r\n  CtTeam: \"Contested Territory\",\r\n};\r\n\r\nexport const prettyNames: { [key in EventType]: string } = {\r\n  Race: \"Race\",\r\n  Boss: \"Solo\",\r\n  Boss2: \"Duo\",\r\n  Boss3: \"Trio\",\r\n  Boss4: \"Quad\",\r\n  CtPlayer: \"Player\",\r\n  CtTeam: \"Team\",\r\n};\r\n"],"names":["useLocalRoundData","pos","data","setData","useState","roundSetsDefs","name","path","isComplete","loading","setLoading","useEffect","async","response","fetch","ok","Error","jsonData","json","rounds","filter","x","roundNumber","uniqueBloons","round","group","bloonGroups","includes","bloon","push","error","console","log","fetchData","RaceTimeCalculator","startRound","setStartRound","endRound","setEndRound","roundSetPos","setRoundSetPos","roundData","roundSets","roundLoading","handleStartChange","e","value","parseInt","target","length","handleEndChange","calculateLongestRound","start","end","reduce","longestRound","duration","getRoundDurationMs","_jsxs","className","children","_jsx","Loading","id","onChange","options","selectedIndex","map","i","disabled","type","min","max","inputMode","placeholder","convertMsToTimeFormat","calculateTime","longestRoundCalc","longestRoundDuration","getRoundDurationFrameMs","longestRoundTimeSentAt","Math","ceil","bloonArray","rawDuration","maxEnd","endTime","roundEven5","num","floor","ms","hours","minutes","seconds","milliseconds","formattedHours","toString","padStart","formattedMinutes","formattedSeconds","formattedMilliseconds","concat","timeAgo","timestamp","elapsed","Date","now","msPerMinute","msPerSecond","msPerHour","msPerDay","days","formatGameEntityName","entity","replace","match","toLowerCase","formatGoldenAppleDiscordEmote","relic","formatToUpperCase","split","word","charAt","toUpperCase","slice","join","placeToRaceMedal","place","totalEntries","percentile","raceMedalImages","black_diamond","red_diamond","diamond","gold_diamond","double_gold","gold_silver","double_silver","silver","bronze","placeToBossNormalMedal","bossNormalMedalImages","placeToBossEliteMedal","bossEliteMedalImages","placeToCtPlayerMedal","ctPlayerMedalImages","placeToCtTeamMedal","ctTeamMedalImages","placeToCtHistoryEmote","placeToCtTeamLocalMedal","ctTeamLocalMedalImages","appendOrdinalSuffix","number","j","k","convertGameTypeToString","gameType","formatDateToEventHighlightDate","epochMs","date","day","getUTCDate","month","toLocaleString","timeZone","year","getUTCFullYear","towerTypes","Alchemist","BananaFarm","BeastHandler","BoomerangMonkey","BombShooter","DartMonkey","DartlingGunner","Druid","EngineerMonkey","GlueGunner","HeliPilot","IceMonkey","Mermonkey","MonkeyAce","MonkeyBuccaneer","MonkeySub","MonkeyVillage","MortarMonkey","NinjaMonkey","SniperMonkey","SpikeFactory","SuperMonkey","TackShooter","WizardMonkey","AdmiralBrickell","Adora","Benjamin","CaptainChurchill","Corvus","Etienne","Ezili","Geraldo","Gwendolin","ObynGreenfoot","PatFusty","Psi","Quincy","Rosalia","Sauda","StrikerJones","ChosenPrimaryHero","prettyEventNames","Race","Boss","Boss2","Boss3","Boss4","CtPlayer","CtTeam"],"sourceRoot":""}